{"id":"c744a3f302e546a49e1a860d603ff858","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/interfaces/IAstrologerManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAstrologerManager {\n    struct Astrologer {\n        uint256 id;\n        address wallet;\n        string name;\n        string description;\n        string specialty;\n        uint256 experience;\n        uint256 reputation;\n        uint256 totalPredictions;\n        uint256 accuratePredictions;\n        uint256 tokenContract;\n        bool isVerified;\n        bool isActive;\n        uint256 registeredAt;\n        uint256 lastActive;\n    }\n\n    function getAstrologerByWallet(address wallet) external view returns (Astrologer memory);\n    function getAstrologer(uint256 astrologerId) external view returns (Astrologer memory);\n    function updateReputation(uint256 astrologerId, uint256 newReputation) external;\n    function recordPredictionResult(uint256 astrologerId, bool wasAccurate) external;\n    function setTokenContract(uint256 astrologerId, uint256 tokenContract) external;\n    function isAstrologerVerified(address wallet) external view returns (bool);\n    function getAstrologerId(address wallet) external view returns (uint256);\n} "},"contracts/interfaces/IReputationScorer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IReputationScorer {\n    function updateReputationFromWorldPrediction(\n        address _astrologer,\n        bool _wasCorrect\n    ) external;\n\n    function getReputationMultiplier(address _astrologer) external view returns (uint256);\n    \n    function getReputationScore(address _astrologer) external view returns (\n        uint256 id,\n        address astrologer,\n        uint256 totalPredictions,\n        uint256 accuratePredictions,\n        uint256 accuracyPercentage,\n        uint256 reputationMultiplier,\n        uint256 marketPredictions,\n        uint256 dailyPredictions,\n        uint256 oneToOnePredictions,\n        uint256 lastUpdated,\n        bool isActive\n    );\n} "},"contracts/WorldPredictionMarket.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport \"./interfaces/IAstrologerManager.sol\";\nimport \"./interfaces/IReputationScorer.sol\";\n\ncontract WorldPredictionMarket is \n    Initializable, \n    OwnableUpgradeable, \n    UUPSUpgradeable \n{\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    CountersUpgradeable.Counter private _predictionIds;\n    \n    struct WorldPrediction {\n        uint256 id;\n        address astrologer;\n        uint256 astrologerId;\n        string title;\n        string description;\n        uint256 deadline;\n        uint256 astrologerStake;\n        uint256 totalVoterStake;\n        uint256 yesVoterStake;\n        uint256 noVoterStake;\n        uint256 totalVoters;\n        bool isResolved;\n        bool outcome;\n        bool daoVotingActive;\n        uint256 createdAt;\n        uint256 resolvedAt;\n    }\n\n    struct Vote {\n        bool hasVoted;\n        bool vote; // true = YES, false = NO\n        uint256 stakeAmount;\n        bool rewardClaimed;\n    }\n\n    struct DAOVote {\n        bool hasVoted;\n        bool vote; // true = YES (correct), false = NO (incorrect)\n        uint256 tokenId;\n    }\n\n    struct PredictionStats {\n        uint256 totalPredictions;\n        uint256 activePredictions;\n        uint256 resolvedPredictions;\n        uint256 totalVolume;\n    }\n\n    mapping(uint256 => WorldPrediction) public predictions;\n    mapping(uint256 => mapping(address => Vote)) public votes;\n    mapping(uint256 => mapping(address => DAOVote)) public daoVotes;\n    mapping(uint256 => uint256) public daoYesVotes;\n    mapping(uint256 => uint256) public daoNoVotes;\n    mapping(address => uint256[]) public astrologerPredictions;\n    mapping(address => uint256[]) public userVotes;\n    \n    address public astrologerManager;\n    address public astroChartNFT;\n    address public zodiacDAO;\n    address public reputationScorer;\n    \n    uint256 public minAstrologerStake;\n    uint256 public minVoterStake;\n    uint256 public maxVoterStake;\n    uint256 public daoVotingDuration;\n    uint256 public astrologerRewardPercentage; // 500 = 5%\n    uint256 public platformFeePercentage; // 200 = 2%\n    \n    PredictionStats public predictionStats;\n    \n    event PredictionCreated(\n        uint256 indexed predictionId,\n        address indexed astrologer,\n        string title,\n        uint256 deadline,\n        uint256 astrologerStake\n    );\n\n    event VoteCast(\n        uint256 indexed predictionId,\n        address indexed voter,\n        bool vote,\n        uint256 stakeAmount\n    );\n\n    event DAOVoteCast(\n        uint256 indexed predictionId,\n        address indexed daoMember,\n        bool vote,\n        uint256 tokenId\n    );\n\n    event PredictionResolved(\n        uint256 indexed predictionId,\n        bool outcome,\n        uint256 totalStake,\n        uint256 astrologerReward\n    );\n\n    event RewardClaimed(\n        uint256 indexed predictionId,\n        address indexed claimer,\n        uint256 rewardAmount\n    );\n\n    event DAOVotingStarted(\n        uint256 indexed predictionId,\n        uint256 endTime\n    );\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        address _astrologerManager,\n        address _astroChartNFT,\n        address _zodiacDAO,\n        address _reputationScorer,\n        uint256 _minAstrologerStake,\n        uint256 _minVoterStake,\n        uint256 _maxVoterStake\n    ) public initializer {\n        __Ownable_init();\n        __UUPSUpgradeable_init();\n        \n        astrologerManager = _astrologerManager;\n        astroChartNFT = _astroChartNFT;\n        zodiacDAO = _zodiacDAO;\n        reputationScorer = _reputationScorer;\n        minAstrologerStake = _minAstrologerStake;\n        minVoterStake = _minVoterStake;\n        maxVoterStake = _maxVoterStake;\n        daoVotingDuration = 2 minutes; // Reduced for testing\n        astrologerRewardPercentage = 500; // 5%\n        platformFeePercentage = 200; // 2%\n    }\n\n    /**\n     * @notice Create a world prediction by staking FLOW\n     * @param _title The title of the prediction\n     * @param _description The detailed description\n     * @param _deadline The deadline for the prediction\n     */\n    function createPrediction(\n        string memory _title,\n        string memory _description,\n        uint256 _deadline\n    ) external payable returns (uint256) {\n        require(msg.value >= minAstrologerStake, \"Insufficient astrologer stake\");\n        require(bytes(_title).length > 0, \"Title cannot be empty\");\n        require(bytes(_description).length > 0, \"Description cannot be empty\");\n        require(_deadline > block.timestamp, \"Deadline must be in the future\");\n\n        // Verify astrologer is registered\n        if (astrologerManager != address(0)) {\n            require(IAstrologerManager(astrologerManager).isAstrologerVerified(msg.sender), \"Astrologer not verified\");\n        }\n\n        _predictionIds.increment();\n        uint256 predictionId = _predictionIds.current();\n\n        predictions[predictionId] = WorldPrediction({\n            id: predictionId,\n            astrologer: msg.sender,\n            astrologerId: IAstrologerManager(astrologerManager).getAstrologerId(msg.sender),\n            title: _title,\n            description: _description,\n            deadline: _deadline,\n            astrologerStake: msg.value,\n            totalVoterStake: 0,\n            yesVoterStake: 0,\n            noVoterStake: 0,\n            totalVoters: 0,\n            isResolved: false,\n            outcome: false,\n            daoVotingActive: false,\n            createdAt: block.timestamp,\n            resolvedAt: 0\n        });\n\n        astrologerPredictions[msg.sender].push(predictionId);\n        predictionStats.totalPredictions++;\n        predictionStats.activePredictions++;\n\n        emit PredictionCreated(predictionId, msg.sender, _title, _deadline, msg.value);\n        return predictionId;\n    }\n\n    /**\n     * @notice Vote on a prediction (requires AstroChart NFT)\n     * @param _predictionId The prediction ID\n     * @param _vote True for YES, false for NO\n     */\n    function voteOnPrediction(uint256 _predictionId, bool _vote) external payable {\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \"Invalid prediction ID\");\n        require(msg.value >= minVoterStake, \"Insufficient voter stake\");\n        require(msg.value <= maxVoterStake, \"Stake amount too high\");\n        \n        WorldPrediction storage prediction = predictions[_predictionId];\n        require(!prediction.isResolved, \"Prediction already resolved\");\n        require(block.timestamp < prediction.deadline, \"Voting period ended\");\n        require(!votes[_predictionId][msg.sender].hasVoted, \"Already voted\");\n        \n        // Verify voter has minted AstroChart NFT\n        require(hasAstroChartNFT(msg.sender), \"Must own AstroChart NFT to vote\");\n        \n        // Verify voter stake is >= astrologer stake\n        require(msg.value >= prediction.astrologerStake, \"Voter stake must be >= astrologer stake\");\n\n        votes[_predictionId][msg.sender] = Vote({\n            hasVoted: true,\n            vote: _vote,\n            stakeAmount: msg.value,\n            rewardClaimed: false\n        });\n\n        prediction.totalVoterStake += msg.value;\n        prediction.totalVoters++;\n        \n        if (_vote) {\n            prediction.yesVoterStake += msg.value;\n        } else {\n            prediction.noVoterStake += msg.value;\n        }\n        \n        userVotes[msg.sender].push(_predictionId);\n        predictionStats.totalVolume += msg.value;\n\n        emit VoteCast(_predictionId, msg.sender, _vote, msg.value);\n    }\n\n    /**\n     * @notice Start DAO voting after prediction deadline\n     * @param _predictionId The prediction ID\n     */\n    function startDAOVoting(uint256 _predictionId) external {\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \"Invalid prediction ID\");\n        \n        WorldPrediction storage prediction = predictions[_predictionId];\n        require(!prediction.isResolved, \"Prediction already resolved\");\n        require(block.timestamp >= prediction.deadline, \"Prediction deadline not reached\");\n        require(!prediction.daoVotingActive, \"DAO voting already active\");\n\n        prediction.daoVotingActive = true;\n        \n        emit DAOVotingStarted(_predictionId, block.timestamp + daoVotingDuration);\n    }\n\n    /**\n     * @notice DAO members vote on prediction outcome\n     * @param _predictionId The prediction ID\n     * @param _outcome True if prediction was correct, false if incorrect\n     * @param _tokenId The DAO token ID for voting\n     */\n    function castDAOVote(uint256 _predictionId, bool _outcome, uint256 _tokenId) external {\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \"Invalid prediction ID\");\n        \n        WorldPrediction storage prediction = predictions[_predictionId];\n        require(!prediction.isResolved, \"Prediction already resolved\");\n        require(prediction.daoVotingActive, \"DAO voting not active\");\n        require(!daoVotes[_predictionId][msg.sender].hasVoted, \"Already voted\");\n        \n        // Verify DAO membership by checking AstroChart NFT ownership\n        require(hasAstroChartNFT(msg.sender), \"Not a DAO member\");\n\n        daoVotes[_predictionId][msg.sender] = DAOVote({\n            hasVoted: true,\n            vote: _outcome,\n            tokenId: _tokenId\n        });\n\n        if (_outcome) {\n            daoYesVotes[_predictionId]++;\n        } else {\n            daoNoVotes[_predictionId]++;\n        }\n\n        emit DAOVoteCast(_predictionId, msg.sender, _outcome, _tokenId);\n    }\n\n    /**\n     * @notice Resolve prediction based on DAO votes\n     * @param _predictionId The prediction ID\n     */\n    function resolvePrediction(uint256 _predictionId) external {\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \"Invalid prediction ID\");\n        \n        WorldPrediction storage prediction = predictions[_predictionId];\n        require(!prediction.isResolved, \"Prediction already resolved\");\n        require(prediction.daoVotingActive, \"DAO voting not started\");\n        require(block.timestamp >= prediction.deadline + daoVotingDuration, \"DAO voting period not ended\");\n\n        // Determine outcome based on DAO votes\n        uint256 totalDAOVotes = daoYesVotes[_predictionId] + daoNoVotes[_predictionId];\n        require(totalDAOVotes > 0, \"No DAO votes cast\");\n        \n        bool outcome = daoYesVotes[_predictionId] > daoNoVotes[_predictionId];\n        \n        prediction.isResolved = true;\n        prediction.outcome = outcome;\n        prediction.resolvedAt = block.timestamp;\n        \n        predictionStats.activePredictions--;\n        predictionStats.resolvedPredictions++;\n\n        // Calculate and distribute rewards\n        uint256 astrologerReward = distributeRewards(_predictionId, outcome);\n        \n        // Update reputation\n        updateAstrologerReputation(prediction.astrologer, prediction.astrologerId, outcome);\n\n        emit PredictionResolved(_predictionId, outcome, prediction.totalVoterStake + prediction.astrologerStake, astrologerReward);\n    }\n\n    /**\n     * @notice Claim rewards for correct predictions\n     * @param _predictionId The prediction ID\n     */\n    function claimReward(uint256 _predictionId) external {\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \"Invalid prediction ID\");\n        \n        WorldPrediction storage prediction = predictions[_predictionId];\n        require(prediction.isResolved, \"Prediction not resolved\");\n        \n        Vote storage vote = votes[_predictionId][msg.sender];\n        require(vote.hasVoted, \"No vote found\");\n        require(!vote.rewardClaimed, \"Reward already claimed\");\n\n        uint256 rewardAmount = calculateVoterReward(_predictionId, msg.sender);\n        if (rewardAmount > 0) {\n            vote.rewardClaimed = true;\n            payable(msg.sender).transfer(rewardAmount);\n            emit RewardClaimed(_predictionId, msg.sender, rewardAmount);\n        }\n    }\n\n    /**\n     * @notice Distribute rewards after prediction resolution\n     */\n    function distributeRewards(uint256 _predictionId, bool outcome) internal returns (uint256) {\n        WorldPrediction storage prediction = predictions[_predictionId];\n        \n        uint256 totalPot = prediction.totalVoterStake + prediction.astrologerStake;\n        uint256 platformFee = (totalPot * platformFeePercentage) / 10000;\n        uint256 distributablePot = totalPot - platformFee;\n        \n        uint256 astrologerReward = 0;\n        \n        if (outcome) {\n            // Astrologer was correct - gets 5% of total pot\n            astrologerReward = (distributablePot * astrologerRewardPercentage) / 10000;\n            payable(prediction.astrologer).transfer(astrologerReward);\n        } else {\n            // Astrologer was wrong - stake is redistributed to winning voters\n            // Reputation will be penalized by updateAstrologerReputation\n        }\n        \n        return astrologerReward;\n    }\n\n    /**\n     * @notice Calculate voter reward amount\n     */\n    function calculateVoterReward(uint256 _predictionId, address _voter) public view returns (uint256) {\n        WorldPrediction storage prediction = predictions[_predictionId];\n        Vote storage vote = votes[_predictionId][_voter];\n        \n        if (!prediction.isResolved || !vote.hasVoted || vote.rewardClaimed) {\n            return 0;\n        }\n\n        // Only winning voters get rewards\n        if (vote.vote != prediction.outcome) {\n            return 0;\n        }\n\n        uint256 totalPot = prediction.totalVoterStake + prediction.astrologerStake;\n        uint256 platformFee = (totalPot * platformFeePercentage) / 10000;\n        uint256 distributablePot = totalPot - platformFee;\n        \n        uint256 astrologerReward = 0;\n        if (prediction.outcome) {\n            astrologerReward = (distributablePot * astrologerRewardPercentage) / 10000;\n        }\n        \n        uint256 voterRewardPool = distributablePot - astrologerReward;\n        uint256 winningStake = prediction.outcome ? prediction.yesVoterStake : prediction.noVoterStake;\n        \n        if (winningStake > 0) {\n            return (vote.stakeAmount * voterRewardPool) / winningStake;\n        }\n        \n        return 0;\n    }\n\n    /**\n     * @notice Update astrologer reputation based on prediction outcome\n     */\n    function updateAstrologerReputation(address _astrologer, uint256 _astrologerId, bool _wasCorrect) internal {\n        if (reputationScorer != address(0)) {\n            IReputationScorer(reputationScorer).updateReputationFromWorldPrediction(_astrologer, _wasCorrect);\n        }\n        \n        if (astrologerManager != address(0) && _astrologerId > 0) {\n            IAstrologerManager(astrologerManager).recordPredictionResult(_astrologerId, _wasCorrect);\n        }\n    }\n\n    /**\n     * @notice Check if user has AstroChart NFT\n     */\n    function hasAstroChartNFT(address _user) internal view returns (bool) {\n        if (astroChartNFT == address(0)) return true; // For testing\n        \n        // Check if user has at least one AstroChart NFT\n        try IERC721(astroChartNFT).balanceOf(_user) returns (uint256 balance) {\n            return balance > 0;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * @notice Check if user is DAO member\n     */\n    function isDAOMember(address _user, uint256 _tokenId) internal view returns (bool) {\n        if (zodiacDAO == address(0)) return msg.sender == owner(); // For testing, only owner can vote\n        \n        // Check if user owns the DAO token\n        try IERC721(zodiacDAO).ownerOf(_tokenId) returns (address owner) {\n            return owner == _user;\n        } catch {\n            return false;\n        }\n    }\n\n    // View functions\n    function getPrediction(uint256 _predictionId) external view returns (WorldPrediction memory) {\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \"Invalid prediction ID\");\n        return predictions[_predictionId];\n    }\n\n    function getVote(uint256 _predictionId, address _voter) external view returns (Vote memory) {\n        return votes[_predictionId][_voter];\n    }\n\n    function getDAOVote(uint256 _predictionId, address _voter) external view returns (DAOVote memory) {\n        return daoVotes[_predictionId][_voter];\n    }\n\n    function getAstrologerPredictions(address _astrologer) external view returns (uint256[] memory) {\n        return astrologerPredictions[_astrologer];\n    }\n\n    function getUserVotes(address _user) external view returns (uint256[] memory) {\n        return userVotes[_user];\n    }\n\n    function getActivePredictions() external view returns (uint256[] memory) {\n        uint256[] memory activeIds = new uint256[](predictionStats.activePredictions);\n        uint256 count = 0;\n        \n        for (uint256 i = 1; i <= _predictionIds.current(); i++) {\n            if (!predictions[i].isResolved) {\n                activeIds[count] = i;\n                count++;\n            }\n        }\n        \n        return activeIds;\n    }\n\n    function getDAOVoteCounts(uint256 _predictionId) external view returns (uint256 yesVotes, uint256 noVotes) {\n        return (daoYesVotes[_predictionId], daoNoVotes[_predictionId]);\n    }\n\n    // Admin functions\n    function setAstrologerManager(address _astrologerManager) external onlyOwner {\n        astrologerManager = _astrologerManager;\n    }\n\n    function setAstroChartNFT(address _astroChartNFT) external onlyOwner {\n        astroChartNFT = _astroChartNFT;\n    }\n\n    function setZodiacDAO(address _zodiacDAO) external onlyOwner {\n        zodiacDAO = _zodiacDAO;\n    }\n\n    function setReputationScorer(address _reputationScorer) external onlyOwner {\n        reputationScorer = _reputationScorer;\n    }\n\n    function setStakeLimits(uint256 _minAstrologerStake, uint256 _minVoterStake, uint256 _maxVoterStake) external onlyOwner {\n        minAstrologerStake = _minAstrologerStake;\n        minVoterStake = _minVoterStake;\n        maxVoterStake = _maxVoterStake;\n    }\n\n    function setDAOVotingDuration(uint256 _duration) external onlyOwner {\n        daoVotingDuration = _duration;\n    }\n\n    function setRewardPercentages(uint256 _astrologerRewardPercentage, uint256 _platformFeePercentage) external onlyOwner {\n        require(_astrologerRewardPercentage + _platformFeePercentage <= 1000, \"Total percentages cannot exceed 10%\");\n        astrologerRewardPercentage = _astrologerRewardPercentage;\n        platformFeePercentage = _platformFeePercentage;\n    }\n\n    function withdraw() external onlyOwner {\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n}\n\n// Interface for ERC721 (for NFT checks)\ninterface IERC721 {\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n} "}},"settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1131],"ContextUpgradeable":[1173],"Initializable":[665],"OwnableUpgradeable":[131]},"id":132,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":1174,"src":"127:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":666,"src":"169:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Initializable","nameLocations":["748:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":665,"src":"748:13:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"748:13:0"},{"baseName":{"id":7,"name":"ContextUpgradeable","nameLocations":["763:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":1173,"src":"763:18:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"763:18:0"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"213:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":131,"linearizedBaseContracts":[131,1173,665],"name":"OwnableUpgradeable","nameLocation":"726:18:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":10,"mutability":"mutable","name":"_owner","nameLocation":"804:6:0","nodeType":"VariableDeclaration","scope":131,"src":"788:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":16,"name":"OwnershipTransferred","nameLocation":"823:20:0","nodeType":"EventDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:0","nodeType":"VariableDeclaration","scope":16,"src":"844:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:0","nodeType":"VariableDeclaration","scope":16,"src":"875:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:0"},"src":"817:84:0"},{"body":{"id":25,"nodeType":"Block","src":"1055:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"1065:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"ExpressionStatement","src":"1065:26:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"907:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":26,"implemented":true,"kind":"function","modifiers":[{"id":20,"kind":"modifierInvocation","modifierName":{"id":19,"name":"onlyInitializing","nameLocations":["1038:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"1038:16:0"},"nodeType":"ModifierInvocation","src":"1038:16:0"}],"name":"__Ownable_init","nameLocation":"1012:14:0","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"1026:2:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"1055:0:0"},"scope":131,"src":"1003:95:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":36,"nodeType":"Block","src":"1166:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":32,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1158,"src":"1195:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":31,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"1176:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"1176:32:0"}]},"id":37,"implemented":true,"kind":"function","modifiers":[{"id":29,"kind":"modifierInvocation","modifierName":{"id":28,"name":"onlyInitializing","nameLocations":["1149:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"1149:16:0"},"nodeType":"ModifierInvocation","src":"1149:16:0"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"1137:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"1166:0:0"},"scope":131,"src":"1104:111:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":44,"nodeType":"Block","src":"1324:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":40,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1334:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"ExpressionStatement","src":"1334:13:0"},{"id":43,"nodeType":"PlaceholderStatement","src":"1357:1:0"}]},"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"1221:77:0","text":" @dev Throws if called by any account other than the owner."},"id":45,"name":"onlyOwner","nameLocation":"1312:9:0","nodeType":"ModifierDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[],"src":"1321:2:0"},"src":"1303:62:0","virtual":false,"visibility":"internal"},{"body":{"id":53,"nodeType":"Block","src":"1496:30:0","statements":[{"expression":{"id":51,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"1513:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":50,"id":52,"nodeType":"Return","src":"1506:13:0"}]},"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"1371:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":54,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:0","nodeType":"FunctionDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[],"src":"1455:2:0"},"returnParameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"1487:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:0"},"scope":131,"src":"1441:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":67,"nodeType":"Block","src":"1644:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":59,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1662:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":61,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1158,"src":"1673:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":58,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1654:68:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1532:62:0","text":" @dev Throws if the sender is not the owner."},"id":68,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1619:2:0"},"returnParameters":{"id":57,"nodeType":"ParameterList","parameters":[],"src":"1644:0:0"},"scope":131,"src":"1599:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":81,"nodeType":"Block","src":"2118:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":77,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2155:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":76,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2147:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:0","typeDescriptions":{}}},"id":78,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2147:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":74,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2128:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2128:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"ExpressionStatement","src":"2128:30:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1735:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":82,"implemented":true,"kind":"function","modifiers":[{"id":72,"kind":"modifierInvocation","modifierName":{"id":71,"name":"onlyOwner","nameLocations":["2108:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2108:9:0"},"nodeType":"ModifierInvocation","src":"2108:9:0"}],"name":"renounceOwnership","nameLocation":"2073:17:0","nodeType":"FunctionDefinition","parameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"2090:2:0"},"returnParameters":{"id":73,"nodeType":"ParameterList","parameters":[],"src":"2118:0:0"},"scope":131,"src":"2064:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":104,"nodeType":"Block","src":"2384:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":91,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2402:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2422:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2414:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"2414:7:0","typeDescriptions":{}}},"id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2402:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":97,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":90,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2394:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2394:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":99,"nodeType":"ExpressionStatement","src":"2394:73:0"},{"expression":{"arguments":[{"id":101,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2496:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2477:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":103,"nodeType":"ExpressionStatement","src":"2477:28:0"}]},"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"2171:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":105,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2374:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2374:9:0"},"nodeType":"ModifierInvocation","src":"2374:9:0"}],"name":"transferOwnership","nameLocation":"2323:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"newOwner","nameLocation":"2349:8:0","nodeType":"VariableDeclaration","scope":105,"src":"2341:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2340:18:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2384:0:0"},"scope":131,"src":"2314:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":124,"nodeType":"Block","src":"2729:124:0","statements":[{"assignments":[112],"declarations":[{"constant":false,"id":112,"mutability":"mutable","name":"oldOwner","nameLocation":"2747:8:0","nodeType":"VariableDeclaration","scope":124,"src":"2739:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":114,"initialValue":{"id":113,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2758:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2739:25:0"},{"expression":{"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":115,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2774:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":116,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2783:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2774:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":118,"nodeType":"ExpressionStatement","src":"2774:17:0"},{"eventCall":{"arguments":[{"id":120,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"2827:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":121,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2837:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":119,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"2806:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2806:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":123,"nodeType":"EmitStatement","src":"2801:45:0"}]},"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2518:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":125,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2675:18:0","nodeType":"FunctionDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"newOwner","nameLocation":"2702:8:0","nodeType":"VariableDeclaration","scope":125,"src":"2694:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:18:0"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[],"src":"2729:0:0"},"scope":131,"src":"2666:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"2859:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":130,"mutability":"mutable","name":"__gap","nameLocation":"3138:5:0","nodeType":"VariableDeclaration","scope":131,"src":"3118:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":129,"length":{"hexValue":"3439","id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3126:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3118:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":132,"src":"708:2438:0","usedErrors":[]}],"src":"102:3045:0"},"id":0},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","exportedSymbols":{"IERC1967Upgradeable":[152]},"id":153,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":133,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1967Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":134,"nodeType":"StructuredDocumentation","src":"132:133:1","text":" @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n _Available since v4.8.3._"},"fullyImplemented":true,"id":152,"linearizedBaseContracts":[152],"name":"IERC1967Upgradeable","nameLocation":"276:19:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"302:68:1","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":139,"name":"Upgraded","nameLocation":"381:8:1","nodeType":"EventDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":137,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"406:14:1","nodeType":"VariableDeclaration","scope":139,"src":"390:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":136,"name":"address","nodeType":"ElementaryTypeName","src":"390:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"389:32:1"},"src":"375:47:1"},{"anonymous":false,"documentation":{"id":140,"nodeType":"StructuredDocumentation","src":"428:67:1","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":146,"name":"AdminChanged","nameLocation":"506:12:1","nodeType":"EventDefinition","parameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":142,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"527:13:1","nodeType":"VariableDeclaration","scope":146,"src":"519:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":141,"name":"address","nodeType":"ElementaryTypeName","src":"519:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":144,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"550:8:1","nodeType":"VariableDeclaration","scope":146,"src":"542:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":143,"name":"address","nodeType":"ElementaryTypeName","src":"542:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"518:41:1"},"src":"500:60:1"},{"anonymous":false,"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"566:59:1","text":" @dev Emitted when the beacon is changed."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":151,"name":"BeaconUpgraded","nameLocation":"636:14:1","nodeType":"EventDefinition","parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"667:6:1","nodeType":"VariableDeclaration","scope":151,"src":"651:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":148,"name":"address","nodeType":"ElementaryTypeName","src":"651:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"650:24:1"},"src":"630:45:1"}],"scope":153,"src":"266:411:1","usedErrors":[]}],"src":"107:571:1"},"id":1},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","exportedSymbols":{"IERC1822ProxiableUpgradeable":[162]},"id":163,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":154,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822ProxiableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":155,"nodeType":"StructuredDocumentation","src":"138:203:2","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":162,"linearizedBaseContracts":[162],"name":"IERC1822ProxiableUpgradeable","nameLocation":"352:28:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":156,"nodeType":"StructuredDocumentation","src":"387:438:2","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":161,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"839:13:2","nodeType":"FunctionDefinition","parameters":{"id":157,"nodeType":"ParameterList","parameters":[],"src":"852:2:2"},"returnParameters":{"id":160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":161,"src":"878:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:9:2"},"scope":162,"src":"830:57:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":163,"src":"342:547:2","usedErrors":[]}],"src":"113:777:2"},"id":2},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1131],"ERC1967UpgradeUpgradeable":[486],"IBeaconUpgradeable":[496],"IERC1822ProxiableUpgradeable":[162],"IERC1967Upgradeable":[152],"Initializable":[665],"StorageSlotUpgradeable":[1357]},"id":487,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":164,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:3"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","file":"../beacon/IBeaconUpgradeable.sol","id":165,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":487,"sourceUnit":497,"src":"141:42:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","file":"../../interfaces/IERC1967Upgradeable.sol","id":166,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":487,"sourceUnit":153,"src":"184:50:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":167,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":487,"sourceUnit":163,"src":"235:56:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":168,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":487,"sourceUnit":1132,"src":"292:44:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"../../utils/StorageSlotUpgradeable.sol","id":169,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":487,"sourceUnit":1358,"src":"337:48:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../utils/Initializable.sol","id":170,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":487,"sourceUnit":666,"src":"386:36:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":172,"name":"Initializable","nameLocations":["656:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":665,"src":"656:13:3"},"id":173,"nodeType":"InheritanceSpecifier","src":"656:13:3"},{"baseName":{"id":174,"name":"IERC1967Upgradeable","nameLocations":["671:19:3"],"nodeType":"IdentifierPath","referencedDeclaration":152,"src":"671:19:3"},"id":175,"nodeType":"InheritanceSpecifier","src":"671:19:3"}],"canonicalName":"ERC1967UpgradeUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":171,"nodeType":"StructuredDocumentation","src":"424:184:3","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._"},"fullyImplemented":true,"id":486,"linearizedBaseContracts":[486,152,665],"name":"ERC1967UpgradeUpgradeable","nameLocation":"627:25:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":180,"nodeType":"Block","src":"756:7:3","statements":[]},"id":181,"implemented":true,"kind":"function","modifiers":[{"id":178,"kind":"modifierInvocation","modifierName":{"id":177,"name":"onlyInitializing","nameLocations":["739:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"739:16:3"},"nodeType":"ModifierInvocation","src":"739:16:3"}],"name":"__ERC1967Upgrade_init","nameLocation":"706:21:3","nodeType":"FunctionDefinition","parameters":{"id":176,"nodeType":"ParameterList","parameters":[],"src":"727:2:3"},"returnParameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"756:0:3"},"scope":486,"src":"697:66:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":186,"nodeType":"Block","src":"838:7:3","statements":[]},"id":187,"implemented":true,"kind":"function","modifiers":[{"id":184,"kind":"modifierInvocation","modifierName":{"id":183,"name":"onlyInitializing","nameLocations":["821:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"821:16:3"},"nodeType":"ModifierInvocation","src":"821:16:3"}],"name":"__ERC1967Upgrade_init_unchained","nameLocation":"778:31:3","nodeType":"FunctionDefinition","parameters":{"id":182,"nodeType":"ParameterList","parameters":[],"src":"809:2:3"},"returnParameters":{"id":185,"nodeType":"ParameterList","parameters":[],"src":"838:0:3"},"scope":486,"src":"769:76:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"id":190,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"954:14:3","nodeType":"VariableDeclaration","scope":486,"src":"929:108:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":188,"name":"bytes32","nodeType":"ElementaryTypeName","src":"929:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"971:66:3","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":191,"nodeType":"StructuredDocumentation","src":"1044:214:3","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":194,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1289:20:3","nodeType":"VariableDeclaration","scope":486,"src":"1263:115:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":192,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1263:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1312:66:3","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"body":{"id":206,"nodeType":"Block","src":"1519:89:3","statements":[{"expression":{"expression":{"arguments":[{"id":202,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"1574:20:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":200,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"1536:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1357_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1559:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"1536:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1253_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1536:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1253_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":204,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1596:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1252,"src":"1536:65:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":199,"id":205,"nodeType":"Return","src":"1529:72:3"}]},"documentation":{"id":195,"nodeType":"StructuredDocumentation","src":"1385:67:3","text":" @dev Returns the current implementation address."},"id":207,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1466:18:3","nodeType":"FunctionDefinition","parameters":{"id":196,"nodeType":"ParameterList","parameters":[],"src":"1484:2:3"},"returnParameters":{"id":199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":198,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":207,"src":"1510:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":197,"name":"address","nodeType":"ElementaryTypeName","src":"1510:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1509:9:3"},"scope":486,"src":"1457:151:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":230,"nodeType":"Block","src":"1762:218:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":216,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"1810:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":214,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"1780:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1131_$","typeString":"type(library AddressUpgradeable)"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1799:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":819,"src":"1780:29:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1780:48:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1830:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":213,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1772:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1772:106:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":220,"nodeType":"ExpressionStatement","src":"1772:106:3"},{"expression":{"id":228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":224,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"1926:20:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":221,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"1888:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1357_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1911:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"1888:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1253_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1253_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":226,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1948:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1252,"src":"1888:65:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":227,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"1956:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1888:85:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":229,"nodeType":"ExpressionStatement","src":"1888:85:3"}]},"documentation":{"id":208,"nodeType":"StructuredDocumentation","src":"1614:80:3","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":231,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1708:18:3","nodeType":"FunctionDefinition","parameters":{"id":211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":210,"mutability":"mutable","name":"newImplementation","nameLocation":"1735:17:3","nodeType":"VariableDeclaration","scope":231,"src":"1727:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":209,"name":"address","nodeType":"ElementaryTypeName","src":"1727:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1726:27:3"},"returnParameters":{"id":212,"nodeType":"ParameterList","parameters":[],"src":"1762:0:3"},"scope":486,"src":"1699:281:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":245,"nodeType":"Block","src":"2142:96:3","statements":[{"expression":{"arguments":[{"id":238,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"2171:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":237,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2152:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2152:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":240,"nodeType":"ExpressionStatement","src":"2152:37:3"},{"eventCall":{"arguments":[{"id":242,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"2213:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":241,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"2204:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":244,"nodeType":"EmitStatement","src":"2199:32:3"}]},"documentation":{"id":232,"nodeType":"StructuredDocumentation","src":"1986:95:3","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":246,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"2095:10:3","nodeType":"FunctionDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":234,"mutability":"mutable","name":"newImplementation","nameLocation":"2114:17:3","nodeType":"VariableDeclaration","scope":246,"src":"2106:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":233,"name":"address","nodeType":"ElementaryTypeName","src":"2106:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2105:27:3"},"returnParameters":{"id":236,"nodeType":"ParameterList","parameters":[],"src":"2142:0:3"},"scope":486,"src":"2086:152:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":275,"nodeType":"Block","src":"2470:178:3","statements":[{"expression":{"arguments":[{"id":257,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"2491:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":256,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"2480:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2480:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":259,"nodeType":"ExpressionStatement","src":"2480:29:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":260,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"2523:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2528:6:3","memberName":"length","nodeType":"MemberAccess","src":"2523:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2537:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2523:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":264,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"2542:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2523:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":274,"nodeType":"IfStatement","src":"2519:123:3","trueBody":{"id":273,"nodeType":"Block","src":"2553:89:3","statements":[{"expression":{"arguments":[{"id":269,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"2607:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":270,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"2626:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":266,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"2567:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1131_$","typeString":"type(library AddressUpgradeable)"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2586:20:3","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1018,"src":"2567:39:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2567:64:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":272,"nodeType":"ExpressionStatement","src":"2567:64:3"}]}}]},"documentation":{"id":247,"nodeType":"StructuredDocumentation","src":"2244:123:3","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":276,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2381:17:3","nodeType":"FunctionDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":249,"mutability":"mutable","name":"newImplementation","nameLocation":"2407:17:3","nodeType":"VariableDeclaration","scope":276,"src":"2399:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":248,"name":"address","nodeType":"ElementaryTypeName","src":"2399:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":251,"mutability":"mutable","name":"data","nameLocation":"2439:4:3","nodeType":"VariableDeclaration","scope":276,"src":"2426:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":250,"name":"bytes","nodeType":"ElementaryTypeName","src":"2426:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":253,"mutability":"mutable","name":"forceCall","nameLocation":"2450:9:3","nodeType":"VariableDeclaration","scope":276,"src":"2445:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":252,"name":"bool","nodeType":"ElementaryTypeName","src":"2445:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2398:62:3"},"returnParameters":{"id":255,"nodeType":"ParameterList","parameters":[],"src":"2470:0:3"},"scope":486,"src":"2372:276:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":328,"nodeType":"Block","src":"2922:842:3","statements":[{"condition":{"expression":{"arguments":[{"id":288,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"3274:14:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":286,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"3236:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1357_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3259:14:3","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":1290,"src":"3236:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$1256_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"}},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3236:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1256_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot storage pointer"}},"id":290,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3290:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1255,"src":"3236:59:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":326,"nodeType":"Block","src":"3365:393:3","statements":[{"clauses":[{"block":{"id":311,"nodeType":"Block","src":"3470:115:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":305,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"3496:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":306,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"3504:20:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3496:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3526:43:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":304,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3488:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3488:82:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":310,"nodeType":"ExpressionStatement","src":"3488:82:3"}]},"errorName":"","id":312,"nodeType":"TryCatchClause","parameters":{"id":303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"mutability":"mutable","name":"slot","nameLocation":"3464:4:3","nodeType":"VariableDeclaration","scope":312,"src":"3456:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3456:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3455:14:3"},"src":"3447:138:3"},{"block":{"id":317,"nodeType":"Block","src":"3592:89:3","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3617:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":313,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3610:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3610:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":316,"nodeType":"ExpressionStatement","src":"3610:56:3"}]},"errorName":"","id":318,"nodeType":"TryCatchClause","src":"3586:95:3"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":297,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"3412:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":296,"name":"IERC1822ProxiableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"3383:28:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822ProxiableUpgradeable_$162_$","typeString":"type(contract IERC1822ProxiableUpgradeable)"}},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3383:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822ProxiableUpgradeable_$162","typeString":"contract IERC1822ProxiableUpgradeable"}},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3431:13:3","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":161,"src":"3383:61:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3383:63:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":319,"nodeType":"TryStatement","src":"3379:302:3"},{"expression":{"arguments":[{"id":321,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"3712:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":322,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"3731:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":323,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"3737:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":320,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"3694:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3694:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":325,"nodeType":"ExpressionStatement","src":"3694:53:3"}]},"id":327,"nodeType":"IfStatement","src":"3232:526:3","trueBody":{"id":295,"nodeType":"Block","src":"3297:62:3","statements":[{"expression":{"arguments":[{"id":292,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"3330:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":291,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"3311:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3311:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":294,"nodeType":"ExpressionStatement","src":"3311:37:3"}]}}]},"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"2654:161:3","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":329,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2829:21:3","nodeType":"FunctionDefinition","parameters":{"id":284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"newImplementation","nameLocation":"2859:17:3","nodeType":"VariableDeclaration","scope":329,"src":"2851:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":278,"name":"address","nodeType":"ElementaryTypeName","src":"2851:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":281,"mutability":"mutable","name":"data","nameLocation":"2891:4:3","nodeType":"VariableDeclaration","scope":329,"src":"2878:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":280,"name":"bytes","nodeType":"ElementaryTypeName","src":"2878:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":283,"mutability":"mutable","name":"forceCall","nameLocation":"2902:9:3","nodeType":"VariableDeclaration","scope":329,"src":"2897:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":282,"name":"bool","nodeType":"ElementaryTypeName","src":"2897:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2850:62:3"},"returnParameters":{"id":285,"nodeType":"ParameterList","parameters":[],"src":"2922:0:3"},"scope":486,"src":"2820:944:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"3770:189:3","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":333,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"3990:11:3","nodeType":"VariableDeclaration","scope":486,"src":"3964:106:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":331,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3964:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4004:66:3","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"body":{"id":345,"nodeType":"Block","src":"4185:80:3","statements":[{"expression":{"expression":{"arguments":[{"id":341,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"4240:11:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":339,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"4202:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1357_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4225:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"4202:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1253_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4202:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1253_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":343,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4253:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1252,"src":"4202:56:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":338,"id":344,"nodeType":"Return","src":"4195:63:3"}]},"documentation":{"id":334,"nodeType":"StructuredDocumentation","src":"4077:50:3","text":" @dev Returns the current admin."},"id":346,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4141:9:3","nodeType":"FunctionDefinition","parameters":{"id":335,"nodeType":"ParameterList","parameters":[],"src":"4150:2:3"},"returnParameters":{"id":338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":346,"src":"4176:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":336,"name":"address","nodeType":"ElementaryTypeName","src":"4176:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4175:9:3"},"scope":486,"src":"4132:133:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":371,"nodeType":"Block","src":"4392:167:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":353,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"4410:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4430:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4422:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":354,"name":"address","nodeType":"ElementaryTypeName","src":"4422:7:3","typeDescriptions":{}}},"id":357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4422:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4410:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4434:40:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":352,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4402:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4402:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":361,"nodeType":"ExpressionStatement","src":"4402:73:3"},{"expression":{"id":369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":365,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"4523:11:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":362,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"4485:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1357_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4508:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"4485:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1253_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4485:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1253_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":367,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4536:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1252,"src":"4485:56:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":368,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"4544:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4485:67:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":370,"nodeType":"ExpressionStatement","src":"4485:67:3"}]},"documentation":{"id":347,"nodeType":"StructuredDocumentation","src":"4271:71:3","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":372,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4356:9:3","nodeType":"FunctionDefinition","parameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":349,"mutability":"mutable","name":"newAdmin","nameLocation":"4374:8:3","nodeType":"VariableDeclaration","scope":372,"src":"4366:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":348,"name":"address","nodeType":"ElementaryTypeName","src":"4366:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4365:18:3"},"returnParameters":{"id":351,"nodeType":"ParameterList","parameters":[],"src":"4392:0:3"},"scope":486,"src":"4347:212:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":388,"nodeType":"Block","src":"4719:86:3","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":379,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"4747:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4747:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":381,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"4760:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":378,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"4734:12:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4734:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":383,"nodeType":"EmitStatement","src":"4729:40:3"},{"expression":{"arguments":[{"id":385,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"4789:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":384,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"4779:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4779:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":387,"nodeType":"ExpressionStatement","src":"4779:19:3"}]},"documentation":{"id":373,"nodeType":"StructuredDocumentation","src":"4565:100:3","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":389,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4679:12:3","nodeType":"FunctionDefinition","parameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"newAdmin","nameLocation":"4700:8:3","nodeType":"VariableDeclaration","scope":389,"src":"4692:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":374,"name":"address","nodeType":"ElementaryTypeName","src":"4692:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4691:18:3"},"returnParameters":{"id":377,"nodeType":"ParameterList","parameters":[],"src":"4719:0:3"},"scope":486,"src":"4670:135:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":390,"nodeType":"StructuredDocumentation","src":"4811:232:3","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":393,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5074:12:3","nodeType":"VariableDeclaration","scope":486,"src":"5048:107:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":391,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5048:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5089:66:3","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"body":{"id":405,"nodeType":"Block","src":"5272:81:3","statements":[{"expression":{"expression":{"arguments":[{"id":401,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":393,"src":"5327:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":399,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"5289:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1357_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5312:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"5289:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1253_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5289:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1253_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":403,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5341:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1252,"src":"5289:57:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":398,"id":404,"nodeType":"Return","src":"5282:64:3"}]},"documentation":{"id":394,"nodeType":"StructuredDocumentation","src":"5162:51:3","text":" @dev Returns the current beacon."},"id":406,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5227:10:3","nodeType":"FunctionDefinition","parameters":{"id":395,"nodeType":"ParameterList","parameters":[],"src":"5237:2:3"},"returnParameters":{"id":398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":406,"src":"5263:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":396,"name":"address","nodeType":"ElementaryTypeName","src":"5263:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5262:9:3"},"scope":486,"src":"5218:135:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":441,"nodeType":"Block","src":"5482:368:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":415,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"5530:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":413,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"5500:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1131_$","typeString":"type(library AddressUpgradeable)"}},"id":414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5519:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":819,"src":"5500:29:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5500:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5542:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":412,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5492:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5492:90:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":419,"nodeType":"ExpressionStatement","src":"5492:90:3"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":424,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"5662:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":423,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":496,"src":"5643:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$496_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5643:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$496","typeString":"contract IBeaconUpgradeable"}},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5673:14:3","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":495,"src":"5643:44:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5643:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":421,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"5613:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1131_$","typeString":"type(library AddressUpgradeable)"}},"id":422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5632:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":819,"src":"5613:29:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5613:77:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5704:50:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":420,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5592:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5592:172:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":431,"nodeType":"ExpressionStatement","src":"5592:172:3"},{"expression":{"id":439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":435,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":393,"src":"5812:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":432,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"5774:22:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$1357_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5797:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"5774:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1253_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5774:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1253_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":437,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5826:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1252,"src":"5774:57:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":438,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"5834:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5774:69:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":440,"nodeType":"ExpressionStatement","src":"5774:69:3"}]},"documentation":{"id":407,"nodeType":"StructuredDocumentation","src":"5359:71:3","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":442,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5444:10:3","nodeType":"FunctionDefinition","parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"newBeacon","nameLocation":"5463:9:3","nodeType":"VariableDeclaration","scope":442,"src":"5455:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":408,"name":"address","nodeType":"ElementaryTypeName","src":"5455:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5454:19:3"},"returnParameters":{"id":411,"nodeType":"ParameterList","parameters":[],"src":"5482:0:3"},"scope":486,"src":"5435:415:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":479,"nodeType":"Block","src":"6249:239:3","statements":[{"expression":{"arguments":[{"id":453,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"6270:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":452,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"6259:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6259:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":455,"nodeType":"ExpressionStatement","src":"6259:21:3"},{"eventCall":{"arguments":[{"id":457,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"6310:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":456,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"6295:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6295:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":459,"nodeType":"EmitStatement","src":"6290:30:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":460,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6334:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6339:6:3","memberName":"length","nodeType":"MemberAccess","src":"6334:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6348:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6334:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":464,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"6353:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6334:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":478,"nodeType":"IfStatement","src":"6330:152:3","trueBody":{"id":477,"nodeType":"Block","src":"6364:118:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":470,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"6437:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":469,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":496,"src":"6418:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$496_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6418:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$496","typeString":"contract IBeaconUpgradeable"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6448:14:3","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":495,"src":"6418:44:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6418:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":474,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6466:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":466,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"6378:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1131_$","typeString":"type(library AddressUpgradeable)"}},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:20:3","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1018,"src":"6378:39:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6378:93:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":476,"nodeType":"ExpressionStatement","src":"6378:93:3"}]}}]},"documentation":{"id":443,"nodeType":"StructuredDocumentation","src":"5856:292:3","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":480,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6162:23:3","nodeType":"FunctionDefinition","parameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":445,"mutability":"mutable","name":"newBeacon","nameLocation":"6194:9:3","nodeType":"VariableDeclaration","scope":480,"src":"6186:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":444,"name":"address","nodeType":"ElementaryTypeName","src":"6186:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":447,"mutability":"mutable","name":"data","nameLocation":"6218:4:3","nodeType":"VariableDeclaration","scope":480,"src":"6205:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":446,"name":"bytes","nodeType":"ElementaryTypeName","src":"6205:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":449,"mutability":"mutable","name":"forceCall","nameLocation":"6229:9:3","nodeType":"VariableDeclaration","scope":480,"src":"6224:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":448,"name":"bool","nodeType":"ElementaryTypeName","src":"6224:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6185:54:3"},"returnParameters":{"id":451,"nodeType":"ParameterList","parameters":[],"src":"6249:0:3"},"scope":486,"src":"6153:335:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":481,"nodeType":"StructuredDocumentation","src":"6494:254:3","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":485,"mutability":"mutable","name":"__gap","nameLocation":"6773:5:3","nodeType":"VariableDeclaration","scope":486,"src":"6753:25:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":482,"name":"uint256","nodeType":"ElementaryTypeName","src":"6753:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":484,"length":{"hexValue":"3530","id":483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6761:2:3","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"6753:11:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":487,"src":"609:6172:3","usedErrors":[]}],"src":"116:6666:3"},"id":3},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","exportedSymbols":{"IBeaconUpgradeable":[496]},"id":497,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":488,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeaconUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":489,"nodeType":"StructuredDocumentation","src":"118:79:4","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":496,"linearizedBaseContracts":[496],"name":"IBeaconUpgradeable","nameLocation":"208:18:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":490,"nodeType":"StructuredDocumentation","src":"233:162:4","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":495,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"409:14:4","nodeType":"FunctionDefinition","parameters":{"id":491,"nodeType":"ParameterList","parameters":[],"src":"423:2:4"},"returnParameters":{"id":494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":493,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":495,"src":"449:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"449:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"448:9:4"},"scope":496,"src":"400:58:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":497,"src":"198:262:4","usedErrors":[]}],"src":"93:368:4"},"id":4},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1131],"Initializable":[665]},"id":666,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":498,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":499,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":666,"sourceUnit":1132,"src":"138:44:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":500,"nodeType":"StructuredDocumentation","src":"184:2209:5","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":665,"linearizedBaseContracts":[665],"name":"Initializable","nameLocation":"2412:13:5","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":501,"nodeType":"StructuredDocumentation","src":"2432:109:5","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":503,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:5","nodeType":"VariableDeclaration","scope":665,"src":"2546:26:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":502,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"2579:91:5","text":" @dev Indicates that the contract is in the process of being initialized."},"id":506,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:5","nodeType":"VariableDeclaration","scope":665,"src":"2675:26:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":505,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":507,"nodeType":"StructuredDocumentation","src":"2708:90:5","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":511,"name":"Initialized","nameLocation":"2809:11:5","nodeType":"EventDefinition","parameters":{"id":510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":509,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:5","nodeType":"VariableDeclaration","scope":511,"src":"2821:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":508,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:5"},"src":"2803:33:5"},{"body":{"id":566,"nodeType":"Block","src":"3269:483:5","statements":[{"assignments":[515],"declarations":[{"constant":false,"id":515,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:5","nodeType":"VariableDeclaration","scope":566,"src":"3279:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":514,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":518,"initialValue":{"id":517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:5","subExpression":{"id":516,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"3302:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":520,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"3347:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":521,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"3365:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":525,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:5","subExpression":{"arguments":[{"arguments":[{"id":530,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$665","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$665","typeString":"contract Initializable"}],"id":529,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":528,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:5","typeDescriptions":{}}},"id":531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":526,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"3388:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1131_$","typeString":"type(library AddressUpgradeable)"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":819,"src":"3388:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":534,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"3436:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":538,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":519,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":542,"nodeType":"ExpressionStatement","src":"3325:201:5"},{"expression":{"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":543,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"3536:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":546,"nodeType":"ExpressionStatement","src":"3536:16:5"},{"condition":{"id":547,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"3566:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":553,"nodeType":"IfStatement","src":"3562:65:5","trueBody":{"id":552,"nodeType":"Block","src":"3582:45:5","statements":[{"expression":{"id":550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":548,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"3596:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":551,"nodeType":"ExpressionStatement","src":"3596:20:5"}]}},{"id":554,"nodeType":"PlaceholderStatement","src":"3636:1:5"},{"condition":{"id":555,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"3651:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":565,"nodeType":"IfStatement","src":"3647:99:5","trueBody":{"id":564,"nodeType":"Block","src":"3667:79:5","statements":[{"expression":{"id":558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":556,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"3681:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":559,"nodeType":"ExpressionStatement","src":"3681:21:5"},{"eventCall":{"arguments":[{"hexValue":"31","id":561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":560,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"3721:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":563,"nodeType":"EmitStatement","src":"3716:19:5"}]}}]},"documentation":{"id":512,"nodeType":"StructuredDocumentation","src":"2842:399:5","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":567,"name":"initializer","nameLocation":"3255:11:5","nodeType":"ModifierDefinition","parameters":{"id":513,"nodeType":"ParameterList","parameters":[],"src":"3266:2:5"},"src":"3246:506:5","virtual":false,"visibility":"internal"},{"body":{"id":599,"nodeType":"Block","src":"4863:255:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:5","subExpression":{"id":573,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"4882:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":575,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"4899:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":576,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"4914:7:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":572,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":581,"nodeType":"ExpressionStatement","src":"4873:99:5"},{"expression":{"id":584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":582,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"4982:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":583,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"4997:7:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":585,"nodeType":"ExpressionStatement","src":"4982:22:5"},{"expression":{"id":588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":586,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"5014:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":589,"nodeType":"ExpressionStatement","src":"5014:20:5"},{"id":590,"nodeType":"PlaceholderStatement","src":"5044:1:5"},{"expression":{"id":593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":591,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"5055:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":594,"nodeType":"ExpressionStatement","src":"5055:21:5"},{"eventCall":{"arguments":[{"id":596,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"5103:7:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":595,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"5091:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":598,"nodeType":"EmitStatement","src":"5086:25:5"}]},"documentation":{"id":568,"nodeType":"StructuredDocumentation","src":"3758:1062:5","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":600,"name":"reinitializer","nameLocation":"4834:13:5","nodeType":"ModifierDefinition","parameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"version","nameLocation":"4854:7:5","nodeType":"VariableDeclaration","scope":600,"src":"4848:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":569,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:5"},"src":"4825:293:5","virtual":false,"visibility":"internal"},{"body":{"id":609,"nodeType":"Block","src":"5356:97:5","statements":[{"expression":{"arguments":[{"id":604,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"5374:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":603,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":607,"nodeType":"ExpressionStatement","src":"5366:69:5"},{"id":608,"nodeType":"PlaceholderStatement","src":"5445:1:5"}]},"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"5124:199:5","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":610,"name":"onlyInitializing","nameLocation":"5337:16:5","nodeType":"ModifierDefinition","parameters":{"id":602,"nodeType":"ParameterList","parameters":[],"src":"5353:2:5"},"src":"5328:125:5","virtual":false,"visibility":"internal"},{"body":{"id":645,"nodeType":"Block","src":"5988:231:5","statements":[{"expression":{"arguments":[{"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:5","subExpression":{"id":615,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"6007:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":614,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":619,"nodeType":"ExpressionStatement","src":"5998:66:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":620,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6078:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":622,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":621,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:5","memberName":"max","nodeType":"MemberAccess","src":"6094:15:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":644,"nodeType":"IfStatement","src":"6074:139:5","trueBody":{"id":643,"nodeType":"Block","src":"6111:102:5","statements":[{"expression":{"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":627,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6125:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":629,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":628,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:5","memberName":"max","nodeType":"MemberAccess","src":"6140:15:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":634,"nodeType":"ExpressionStatement","src":"6125:30:5"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":637,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":636,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:5","memberName":"max","nodeType":"MemberAccess","src":"6186:15:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":635,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"6174:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":642,"nodeType":"EmitStatement","src":"6169:33:5"}]}}]},"documentation":{"id":611,"nodeType":"StructuredDocumentation","src":"5459:475:5","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":646,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:5","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[],"src":"5968:2:5"},"returnParameters":{"id":613,"nodeType":"ParameterList","parameters":[],"src":"5988:0:5"},"scope":665,"src":"5939:280:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":654,"nodeType":"Block","src":"6393:36:5","statements":[{"expression":{"id":652,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6410:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":651,"id":653,"nodeType":"Return","src":"6403:19:5"}]},"documentation":{"id":647,"nodeType":"StructuredDocumentation","src":"6225:99:5","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":655,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:5","nodeType":"FunctionDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[],"src":"6360:2:5"},"returnParameters":{"id":651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":650,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":655,"src":"6386:5:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":649,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:5"},"scope":665,"src":"6329:100:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":663,"nodeType":"Block","src":"6601:37:5","statements":[{"expression":{"id":661,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"6618:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":660,"id":662,"nodeType":"Return","src":"6611:20:5"}]},"documentation":{"id":656,"nodeType":"StructuredDocumentation","src":"6435:105:5","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":664,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:5","nodeType":"FunctionDefinition","parameters":{"id":657,"nodeType":"ParameterList","parameters":[],"src":"6569:2:5"},"returnParameters":{"id":660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":664,"src":"6595:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":658,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:5"},"scope":665,"src":"6545:93:5","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":666,"src":"2394:4246:5","usedErrors":[]}],"src":"113:6528:5"},"id":5},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1131],"ERC1967UpgradeUpgradeable":[486],"IBeaconUpgradeable":[496],"IERC1822ProxiableUpgradeable":[162],"IERC1967Upgradeable":[152],"Initializable":[665],"StorageSlotUpgradeable":[1357],"UUPSUpgradeable":[801]},"id":802,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":667,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":668,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":802,"sourceUnit":163,"src":"140:56:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","file":"../ERC1967/ERC1967UpgradeUpgradeable.sol","id":669,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":802,"sourceUnit":487,"src":"197:50:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":670,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":802,"sourceUnit":666,"src":"248:29:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":672,"name":"Initializable","nameLocations":["965:13:6"],"nodeType":"IdentifierPath","referencedDeclaration":665,"src":"965:13:6"},"id":673,"nodeType":"InheritanceSpecifier","src":"965:13:6"},{"baseName":{"id":674,"name":"IERC1822ProxiableUpgradeable","nameLocations":["980:28:6"],"nodeType":"IdentifierPath","referencedDeclaration":162,"src":"980:28:6"},"id":675,"nodeType":"InheritanceSpecifier","src":"980:28:6"},{"baseName":{"id":676,"name":"ERC1967UpgradeUpgradeable","nameLocations":["1010:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":486,"src":"1010:25:6"},"id":677,"nodeType":"InheritanceSpecifier","src":"1010:25:6"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":671,"nodeType":"StructuredDocumentation","src":"279:648:6","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":801,"linearizedBaseContracts":[801,486,152,162,665],"name":"UUPSUpgradeable","nameLocation":"946:15:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":682,"nodeType":"Block","src":"1102:7:6","statements":[]},"id":683,"implemented":true,"kind":"function","modifiers":[{"id":680,"kind":"modifierInvocation","modifierName":{"id":679,"name":"onlyInitializing","nameLocations":["1085:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"1085:16:6"},"nodeType":"ModifierInvocation","src":"1085:16:6"}],"name":"__UUPSUpgradeable_init","nameLocation":"1051:22:6","nodeType":"FunctionDefinition","parameters":{"id":678,"nodeType":"ParameterList","parameters":[],"src":"1073:2:6"},"returnParameters":{"id":681,"nodeType":"ParameterList","parameters":[],"src":"1102:0:6"},"scope":801,"src":"1042:67:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":688,"nodeType":"Block","src":"1185:7:6","statements":[]},"id":689,"implemented":true,"kind":"function","modifiers":[{"id":686,"kind":"modifierInvocation","modifierName":{"id":685,"name":"onlyInitializing","nameLocations":["1168:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"1168:16:6"},"nodeType":"ModifierInvocation","src":"1168:16:6"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"1124:32:6","nodeType":"FunctionDefinition","parameters":{"id":684,"nodeType":"ParameterList","parameters":[],"src":"1156:2:6"},"returnParameters":{"id":687,"nodeType":"ParameterList","parameters":[],"src":"1185:0:6"},"scope":801,"src":"1115:77:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":690,"nodeType":"StructuredDocumentation","src":"1197:87:6","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"id":696,"mutability":"immutable","name":"__self","nameLocation":"1315:6:6","nodeType":"VariableDeclaration","scope":801,"src":"1289:48:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":691,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":694,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1332:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$801","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$801","typeString":"contract UUPSUpgradeable"}],"id":693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1324:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":692,"name":"address","nodeType":"ElementaryTypeName","src":"1324:7:6","typeDescriptions":{}}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1324:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":718,"nodeType":"Block","src":"1863:205:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":702,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1889:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$801","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$801","typeString":"contract UUPSUpgradeable"}],"id":701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1881:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":700,"name":"address","nodeType":"ElementaryTypeName","src":"1881:7:6","typeDescriptions":{}}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":704,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"1898:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1881:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1906:46:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""},"value":"Function must be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""}],"id":699,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1873:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1873:80:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":708,"nodeType":"ExpressionStatement","src":"1873:80:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":710,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"1971:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1971:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":712,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"1995:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1971:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879","id":714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2003:46:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""},"value":"Function must be called through active proxy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""}],"id":709,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1963:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1963:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":716,"nodeType":"ExpressionStatement","src":"1963:87:6"},{"id":717,"nodeType":"PlaceholderStatement","src":"2060:1:6"}]},"documentation":{"id":697,"nodeType":"StructuredDocumentation","src":"1344:493:6","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":719,"name":"onlyProxy","nameLocation":"1851:9:6","nodeType":"ModifierDefinition","parameters":{"id":698,"nodeType":"ParameterList","parameters":[],"src":"1860:2:6"},"src":"1842:226:6","virtual":false,"visibility":"internal"},{"body":{"id":733,"nodeType":"Block","src":"2298:120:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":725,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2324:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$801","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$801","typeString":"contract UUPSUpgradeable"}],"id":724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2316:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":723,"name":"address","nodeType":"ElementaryTypeName","src":"2316:7:6","typeDescriptions":{}}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":727,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"2333:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2316:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2341:58:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""},"value":"UUPSUpgradeable: must not be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""}],"id":722,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2308:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2308:92:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":731,"nodeType":"ExpressionStatement","src":"2308:92:6"},{"id":732,"nodeType":"PlaceholderStatement","src":"2410:1:6"}]},"documentation":{"id":720,"nodeType":"StructuredDocumentation","src":"2074:195:6","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":734,"name":"notDelegated","nameLocation":"2283:12:6","nodeType":"ModifierDefinition","parameters":{"id":721,"nodeType":"ParameterList","parameters":[],"src":"2295:2:6"},"src":"2274:144:6","virtual":false,"visibility":"internal"},{"baseFunctions":[161],"body":{"id":745,"nodeType":"Block","src":"3093:44:6","statements":[{"expression":{"id":743,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"3110:20:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":742,"id":744,"nodeType":"Return","src":"3103:27:6"}]},"documentation":{"id":735,"nodeType":"StructuredDocumentation","src":"2424:577:6","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":746,"implemented":true,"kind":"function","modifiers":[{"id":739,"kind":"modifierInvocation","modifierName":{"id":738,"name":"notDelegated","nameLocations":["3062:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"3062:12:6"},"nodeType":"ModifierInvocation","src":"3062:12:6"}],"name":"proxiableUUID","nameLocation":"3015:13:6","nodeType":"FunctionDefinition","overrides":{"id":737,"nodeType":"OverrideSpecifier","overrides":[],"src":"3053:8:6"},"parameters":{"id":736,"nodeType":"ParameterList","parameters":[],"src":"3028:2:6"},"returnParameters":{"id":742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":746,"src":"3084:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":740,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3084:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3083:9:6"},"scope":801,"src":"3006:131:6","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":767,"nodeType":"Block","src":"3458:124:6","statements":[{"expression":{"arguments":[{"id":755,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"3486:17:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":754,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"3468:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3468:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":757,"nodeType":"ExpressionStatement","src":"3468:36:6"},{"expression":{"arguments":[{"id":759,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"3536:17:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3565:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3555:9:6","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":760,"name":"bytes","nodeType":"ElementaryTypeName","src":"3559:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3555:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3569:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":758,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"3514:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3514:61:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":766,"nodeType":"ExpressionStatement","src":"3514:61:6"}]},"documentation":{"id":747,"nodeType":"StructuredDocumentation","src":"3143:239:6","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"3659cfe6","id":768,"implemented":true,"kind":"function","modifiers":[{"id":752,"kind":"modifierInvocation","modifierName":{"id":751,"name":"onlyProxy","nameLocations":["3448:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":719,"src":"3448:9:6"},"nodeType":"ModifierInvocation","src":"3448:9:6"}],"name":"upgradeTo","nameLocation":"3396:9:6","nodeType":"FunctionDefinition","parameters":{"id":750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":749,"mutability":"mutable","name":"newImplementation","nameLocation":"3414:17:6","nodeType":"VariableDeclaration","scope":768,"src":"3406:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":748,"name":"address","nodeType":"ElementaryTypeName","src":"3406:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3405:27:6"},"returnParameters":{"id":753,"nodeType":"ParameterList","parameters":[],"src":"3458:0:6"},"scope":801,"src":"3387:195:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":788,"nodeType":"Block","src":"4006:115:6","statements":[{"expression":{"arguments":[{"id":779,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"4034:17:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":778,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"4016:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4016:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":781,"nodeType":"ExpressionStatement","src":"4016:36:6"},{"expression":{"arguments":[{"id":783,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"4084:17:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":784,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"4103:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4109:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":782,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"4062:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4062:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":787,"nodeType":"ExpressionStatement","src":"4062:52:6"}]},"documentation":{"id":769,"nodeType":"StructuredDocumentation","src":"3588:308:6","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"4f1ef286","id":789,"implemented":true,"kind":"function","modifiers":[{"id":776,"kind":"modifierInvocation","modifierName":{"id":775,"name":"onlyProxy","nameLocations":["3996:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":719,"src":"3996:9:6"},"nodeType":"ModifierInvocation","src":"3996:9:6"}],"name":"upgradeToAndCall","nameLocation":"3910:16:6","nodeType":"FunctionDefinition","parameters":{"id":774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":771,"mutability":"mutable","name":"newImplementation","nameLocation":"3935:17:6","nodeType":"VariableDeclaration","scope":789,"src":"3927:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":770,"name":"address","nodeType":"ElementaryTypeName","src":"3927:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":773,"mutability":"mutable","name":"data","nameLocation":"3967:4:6","nodeType":"VariableDeclaration","scope":789,"src":"3954:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":772,"name":"bytes","nodeType":"ElementaryTypeName","src":"3954:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3926:46:6"},"returnParameters":{"id":777,"nodeType":"ParameterList","parameters":[],"src":"4006:0:6"},"scope":801,"src":"3901:220:6","stateMutability":"payable","virtual":true,"visibility":"public"},{"documentation":{"id":790,"nodeType":"StructuredDocumentation","src":"4127:397:6","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":795,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"4538:17:6","nodeType":"FunctionDefinition","parameters":{"id":793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":792,"mutability":"mutable","name":"newImplementation","nameLocation":"4564:17:6","nodeType":"VariableDeclaration","scope":795,"src":"4556:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":791,"name":"address","nodeType":"ElementaryTypeName","src":"4556:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4555:27:6"},"returnParameters":{"id":794,"nodeType":"ParameterList","parameters":[],"src":"4599:0:6"},"scope":801,"src":"4529:71:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":796,"nodeType":"StructuredDocumentation","src":"4606:254:6","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":800,"mutability":"mutable","name":"__gap","nameLocation":"4885:5:6","nodeType":"VariableDeclaration","scope":801,"src":"4865:25:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":797,"name":"uint256","nodeType":"ElementaryTypeName","src":"4865:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":799,"length":{"hexValue":"3530","id":798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4873:2:6","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"4865:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":802,"src":"928:3965:6","usedErrors":[]}],"src":"115:4779:6"},"id":6},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1131]},"id":1132,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":803,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":804,"nodeType":"StructuredDocumentation","src":"126:67:7","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1131,"linearizedBaseContracts":[1131],"name":"AddressUpgradeable","nameLocation":"202:18:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":818,"nodeType":"Block","src":"1489:254:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":812,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"1713:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:7","memberName":"code","nodeType":"MemberAccess","src":"1713:12:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:7","memberName":"length","nodeType":"MemberAccess","src":"1713:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":811,"id":817,"nodeType":"Return","src":"1706:30:7"}]},"documentation":{"id":805,"nodeType":"StructuredDocumentation","src":"227:1191:7","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":819,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:7","nodeType":"FunctionDefinition","parameters":{"id":808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":807,"mutability":"mutable","name":"account","nameLocation":"1451:7:7","nodeType":"VariableDeclaration","scope":819,"src":"1443:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":806,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:7"},"returnParameters":{"id":811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":810,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":819,"src":"1483:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":809,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:7"},"scope":1131,"src":"1423:320:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":852,"nodeType":"Block","src":"2729:241:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":830,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1131","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1131","typeString":"library AddressUpgradeable"}],"id":829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":828,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:7","typeDescriptions":{}}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:7","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":833,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"2772:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":827,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":837,"nodeType":"ExpressionStatement","src":"2739:73:7"},{"assignments":[839,null],"declarations":[{"constant":false,"id":839,"mutability":"mutable","name":"success","nameLocation":"2829:7:7","nodeType":"VariableDeclaration","scope":852,"src":"2824:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":838,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":846,"initialValue":{"arguments":[{"hexValue":"","id":844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":840,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"2842:9:7","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:7","memberName":"call","nodeType":"MemberAccess","src":"2842:14:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":842,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"2864:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:7"},{"expression":{"arguments":[{"id":848,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"2893:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":847,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":851,"nodeType":"ExpressionStatement","src":"2885:78:7"}]},"documentation":{"id":820,"nodeType":"StructuredDocumentation","src":"1749:904:7","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":853,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:7","nodeType":"FunctionDefinition","parameters":{"id":825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":822,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:7","nodeType":"VariableDeclaration","scope":853,"src":"2677:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":821,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":824,"mutability":"mutable","name":"amount","nameLocation":"2712:6:7","nodeType":"VariableDeclaration","scope":853,"src":"2704:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":823,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:7"},"returnParameters":{"id":826,"nodeType":"ParameterList","parameters":[],"src":"2729:0:7"},"scope":1131,"src":"2658:312:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":870,"nodeType":"Block","src":"3801:96:7","statements":[{"expression":{"arguments":[{"id":864,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"3840:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":865,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":858,"src":"3848:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":863,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[911,955],"referencedDeclaration":955,"src":"3818:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":862,"id":869,"nodeType":"Return","src":"3811:79:7"}]},"documentation":{"id":854,"nodeType":"StructuredDocumentation","src":"2976:731:7","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":871,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:7","nodeType":"FunctionDefinition","parameters":{"id":859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":856,"mutability":"mutable","name":"target","nameLocation":"3742:6:7","nodeType":"VariableDeclaration","scope":871,"src":"3734:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":855,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":858,"mutability":"mutable","name":"data","nameLocation":"3763:4:7","nodeType":"VariableDeclaration","scope":871,"src":"3750:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":857,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:7"},"returnParameters":{"id":862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":861,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":871,"src":"3787:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":860,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:7"},"scope":1131,"src":"3712:185:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":890,"nodeType":"Block","src":"4266:76:7","statements":[{"expression":{"arguments":[{"id":884,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"4305:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":885,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"4313:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":887,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"4322:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":883,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[911,955],"referencedDeclaration":955,"src":"4283:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":882,"id":889,"nodeType":"Return","src":"4276:59:7"}]},"documentation":{"id":872,"nodeType":"StructuredDocumentation","src":"3903:211:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":891,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:7","nodeType":"FunctionDefinition","parameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":874,"mutability":"mutable","name":"target","nameLocation":"4158:6:7","nodeType":"VariableDeclaration","scope":891,"src":"4150:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":873,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":876,"mutability":"mutable","name":"data","nameLocation":"4187:4:7","nodeType":"VariableDeclaration","scope":891,"src":"4174:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":875,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":878,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:7","nodeType":"VariableDeclaration","scope":891,"src":"4201:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":877,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:7"},"returnParameters":{"id":882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":881,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":891,"src":"4252:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":880,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:7"},"scope":1131,"src":"4119:223:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":910,"nodeType":"Block","src":"4817:111:7","statements":[{"expression":{"arguments":[{"id":904,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"4856:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":905,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"4864:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":906,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"4870:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":903,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[911,955],"referencedDeclaration":955,"src":"4834:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":902,"id":909,"nodeType":"Return","src":"4827:94:7"}]},"documentation":{"id":892,"nodeType":"StructuredDocumentation","src":"4348:351:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":911,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:7","nodeType":"FunctionDefinition","parameters":{"id":899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":894,"mutability":"mutable","name":"target","nameLocation":"4743:6:7","nodeType":"VariableDeclaration","scope":911,"src":"4735:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":893,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":896,"mutability":"mutable","name":"data","nameLocation":"4764:4:7","nodeType":"VariableDeclaration","scope":911,"src":"4751:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":895,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":898,"mutability":"mutable","name":"value","nameLocation":"4778:5:7","nodeType":"VariableDeclaration","scope":911,"src":"4770:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":897,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:7"},"returnParameters":{"id":902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":901,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":911,"src":"4803:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":900,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:7"},"scope":1131,"src":"4704:224:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":954,"nodeType":"Block","src":"5355:267:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":928,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1131","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1131","typeString":"library AddressUpgradeable"}],"id":927,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":926,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:7","typeDescriptions":{}}},"id":929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:7","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":931,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"5398:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":925,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":935,"nodeType":"ExpressionStatement","src":"5365:81:7"},{"assignments":[937,939],"declarations":[{"constant":false,"id":937,"mutability":"mutable","name":"success","nameLocation":"5462:7:7","nodeType":"VariableDeclaration","scope":954,"src":"5457:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":936,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":939,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:7","nodeType":"VariableDeclaration","scope":954,"src":"5471:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":938,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":946,"initialValue":{"arguments":[{"id":944,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"5524:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":940,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"5498:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:7","memberName":"call","nodeType":"MemberAccess","src":"5498:11:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":942,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"5517:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:7"},{"expression":{"arguments":[{"id":948,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"5573:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":949,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"5581:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":950,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"5590:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":951,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"5602:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":947,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"5546:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":924,"id":953,"nodeType":"Return","src":"5539:76:7"}]},"documentation":{"id":912,"nodeType":"StructuredDocumentation","src":"4934:237:7","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":955,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:7","nodeType":"FunctionDefinition","parameters":{"id":921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":914,"mutability":"mutable","name":"target","nameLocation":"5224:6:7","nodeType":"VariableDeclaration","scope":955,"src":"5216:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":913,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":916,"mutability":"mutable","name":"data","nameLocation":"5253:4:7","nodeType":"VariableDeclaration","scope":955,"src":"5240:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":915,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":918,"mutability":"mutable","name":"value","nameLocation":"5275:5:7","nodeType":"VariableDeclaration","scope":955,"src":"5267:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":917,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":920,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:7","nodeType":"VariableDeclaration","scope":955,"src":"5290:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":919,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:7"},"returnParameters":{"id":924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":955,"src":"5341:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":922,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:7"},"scope":1131,"src":"5176:446:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":971,"nodeType":"Block","src":"5899:97:7","statements":[{"expression":{"arguments":[{"id":966,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"5935:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":967,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"5943:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":965,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[972,1001],"referencedDeclaration":1001,"src":"5916:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":964,"id":970,"nodeType":"Return","src":"5909:80:7"}]},"documentation":{"id":956,"nodeType":"StructuredDocumentation","src":"5628:166:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":972,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:7","nodeType":"FunctionDefinition","parameters":{"id":961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":958,"mutability":"mutable","name":"target","nameLocation":"5835:6:7","nodeType":"VariableDeclaration","scope":972,"src":"5827:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":957,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":960,"mutability":"mutable","name":"data","nameLocation":"5856:4:7","nodeType":"VariableDeclaration","scope":972,"src":"5843:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":959,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:7"},"returnParameters":{"id":964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":972,"src":"5885:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":962,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:7"},"scope":1131,"src":"5799:197:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1000,"nodeType":"Block","src":"6338:168:7","statements":[{"assignments":[985,987],"declarations":[{"constant":false,"id":985,"mutability":"mutable","name":"success","nameLocation":"6354:7:7","nodeType":"VariableDeclaration","scope":1000,"src":"6349:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":984,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":987,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:7","nodeType":"VariableDeclaration","scope":1000,"src":"6363:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":986,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":992,"initialValue":{"arguments":[{"id":990,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"6408:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":988,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"6390:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:7","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:7","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:7"},{"expression":{"arguments":[{"id":994,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"6457:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":995,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"6465:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":996,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"6474:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":997,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"6486:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":993,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"6430:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":983,"id":999,"nodeType":"Return","src":"6423:76:7"}]},"documentation":{"id":973,"nodeType":"StructuredDocumentation","src":"6002:173:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1001,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:7","nodeType":"FunctionDefinition","parameters":{"id":980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":975,"mutability":"mutable","name":"target","nameLocation":"6225:6:7","nodeType":"VariableDeclaration","scope":1001,"src":"6217:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":974,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":977,"mutability":"mutable","name":"data","nameLocation":"6254:4:7","nodeType":"VariableDeclaration","scope":1001,"src":"6241:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":976,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":979,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:7","nodeType":"VariableDeclaration","scope":1001,"src":"6268:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":978,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:7"},"returnParameters":{"id":983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":982,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1001,"src":"6324:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":981,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:7"},"scope":1131,"src":"6180:326:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1017,"nodeType":"Block","src":"6782:101:7","statements":[{"expression":{"arguments":[{"id":1012,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"6820:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1013,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"6828:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1011,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1018,1047],"referencedDeclaration":1047,"src":"6799:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1010,"id":1016,"nodeType":"Return","src":"6792:84:7"}]},"documentation":{"id":1002,"nodeType":"StructuredDocumentation","src":"6512:168:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1018,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:7","nodeType":"FunctionDefinition","parameters":{"id":1007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1004,"mutability":"mutable","name":"target","nameLocation":"6723:6:7","nodeType":"VariableDeclaration","scope":1018,"src":"6715:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1003,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1006,"mutability":"mutable","name":"data","nameLocation":"6744:4:7","nodeType":"VariableDeclaration","scope":1018,"src":"6731:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1005,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:7"},"returnParameters":{"id":1010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1009,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1018,"src":"6768:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1008,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:7"},"scope":1131,"src":"6685:198:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1046,"nodeType":"Block","src":"7224:170:7","statements":[{"assignments":[1031,1033],"declarations":[{"constant":false,"id":1031,"mutability":"mutable","name":"success","nameLocation":"7240:7:7","nodeType":"VariableDeclaration","scope":1046,"src":"7235:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1030,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1033,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:7","nodeType":"VariableDeclaration","scope":1046,"src":"7249:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1032,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1038,"initialValue":{"arguments":[{"id":1036,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"7296:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1034,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"7276:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:7","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:7","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:7"},{"expression":{"arguments":[{"id":1040,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"7345:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1041,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"7353:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1042,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"7362:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1043,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"7374:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1039,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"7318:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1029,"id":1045,"nodeType":"Return","src":"7311:76:7"}]},"documentation":{"id":1019,"nodeType":"StructuredDocumentation","src":"6889:175:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1047,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:7","nodeType":"FunctionDefinition","parameters":{"id":1026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1021,"mutability":"mutable","name":"target","nameLocation":"7116:6:7","nodeType":"VariableDeclaration","scope":1047,"src":"7108:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1020,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1023,"mutability":"mutable","name":"data","nameLocation":"7145:4:7","nodeType":"VariableDeclaration","scope":1047,"src":"7132:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1022,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1025,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:7","nodeType":"VariableDeclaration","scope":1047,"src":"7159:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1024,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:7"},"returnParameters":{"id":1029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1028,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1047,"src":"7210:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1027,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:7"},"scope":1131,"src":"7069:325:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1085,"nodeType":"Block","src":"7876:434:7","statements":[{"condition":{"id":1061,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1052,"src":"7890:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1083,"nodeType":"Block","src":"8246:58:7","statements":[{"expression":{"arguments":[{"id":1079,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"8268:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1080,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"8280:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1078,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"8260:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1082,"nodeType":"ExpressionStatement","src":"8260:33:7"}]},"id":1084,"nodeType":"IfStatement","src":"7886:418:7","trueBody":{"id":1077,"nodeType":"Block","src":"7899:341:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1062,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"7917:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:7","memberName":"length","nodeType":"MemberAccess","src":"7917:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1074,"nodeType":"IfStatement","src":"7913:286:7","trueBody":{"id":1073,"nodeType":"Block","src":"7941:258:7","statements":[{"expression":{"arguments":[{"arguments":[{"id":1068,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"8143:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1067,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"8132:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1066,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1072,"nodeType":"ExpressionStatement","src":"8124:60:7"}]}},{"expression":{"id":1075,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"8219:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1060,"id":1076,"nodeType":"Return","src":"8212:17:7"}]}}]},"documentation":{"id":1048,"nodeType":"StructuredDocumentation","src":"7400:277:7","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1086,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:7","nodeType":"FunctionDefinition","parameters":{"id":1057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1050,"mutability":"mutable","name":"target","nameLocation":"7735:6:7","nodeType":"VariableDeclaration","scope":1086,"src":"7727:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1049,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1052,"mutability":"mutable","name":"success","nameLocation":"7756:7:7","nodeType":"VariableDeclaration","scope":1086,"src":"7751:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1051,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1054,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:7","nodeType":"VariableDeclaration","scope":1086,"src":"7773:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1053,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1056,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:7","nodeType":"VariableDeclaration","scope":1086,"src":"7806:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1055,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:7"},"returnParameters":{"id":1060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1086,"src":"7862:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1058,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:7"},"scope":1131,"src":"7682:628:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1109,"nodeType":"Block","src":"8691:135:7","statements":[{"condition":{"id":1098,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"8705:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1107,"nodeType":"Block","src":"8762:58:7","statements":[{"expression":{"arguments":[{"id":1103,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"8784:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1104,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"8796:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1102,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"8776:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1106,"nodeType":"ExpressionStatement","src":"8776:33:7"}]},"id":1108,"nodeType":"IfStatement","src":"8701:119:7","trueBody":{"id":1101,"nodeType":"Block","src":"8714:42:7","statements":[{"expression":{"id":1099,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"8735:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1097,"id":1100,"nodeType":"Return","src":"8728:17:7"}]}}]},"documentation":{"id":1087,"nodeType":"StructuredDocumentation","src":"8316:210:7","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1110,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:7","nodeType":"FunctionDefinition","parameters":{"id":1094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1089,"mutability":"mutable","name":"success","nameLocation":"8571:7:7","nodeType":"VariableDeclaration","scope":1110,"src":"8566:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1088,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1091,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:7","nodeType":"VariableDeclaration","scope":1110,"src":"8588:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1090,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1093,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:7","nodeType":"VariableDeclaration","scope":1110,"src":"8621:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1092,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:7"},"returnParameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1096,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1110,"src":"8677:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1095,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:7"},"scope":1131,"src":"8531:295:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1129,"nodeType":"Block","src":"8915:457:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1117,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1112,"src":"8991:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:7","memberName":"length","nodeType":"MemberAccess","src":"8991:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1127,"nodeType":"Block","src":"9321:45:7","statements":[{"expression":{"arguments":[{"id":1124,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1114,"src":"9342:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1123,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1126,"nodeType":"ExpressionStatement","src":"9335:20:7"}]},"id":1128,"nodeType":"IfStatement","src":"8987:379:7","trueBody":{"id":1122,"nodeType":"Block","src":"9014:301:7","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:7","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:7","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:7"},"nodeType":"YulFunctionCall","src":"9213:17:7"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:7","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:7"},"nodeType":"YulFunctionCall","src":"9254:19:7"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:7"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:7"},"nodeType":"YulFunctionCall","src":"9247:44:7"},"nodeType":"YulExpressionStatement","src":"9247:44:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1112,"isOffset":false,"isSlot":false,"src":"9219:10:7","valueSize":1},{"declaration":1112,"isOffset":false,"isSlot":false,"src":"9262:10:7","valueSize":1}],"id":1121,"nodeType":"InlineAssembly","src":"9163:142:7"}]}}]},"id":1130,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:7","nodeType":"FunctionDefinition","parameters":{"id":1115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1112,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:7","nodeType":"VariableDeclaration","scope":1130,"src":"8849:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1111,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1114,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:7","nodeType":"VariableDeclaration","scope":1130,"src":"8874:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1113,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:7"},"returnParameters":{"id":1116,"nodeType":"ParameterList","parameters":[],"src":"8915:0:7"},"scope":1131,"src":"8832:540:7","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1132,"src":"194:9180:7","usedErrors":[]}],"src":"101:9274:7"},"id":7},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1131],"ContextUpgradeable":[1173],"Initializable":[665]},"id":1174,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1133,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1134,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1174,"sourceUnit":666,"src":"110:42:8","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1136,"name":"Initializable","nameLocations":["691:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":665,"src":"691:13:8"},"id":1137,"nodeType":"InheritanceSpecifier","src":"691:13:8"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1135,"nodeType":"StructuredDocumentation","src":"154:496:8","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1173,"linearizedBaseContracts":[1173,665],"name":"ContextUpgradeable","nameLocation":"669:18:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1142,"nodeType":"Block","src":"763:7:8","statements":[]},"id":1143,"implemented":true,"kind":"function","modifiers":[{"id":1140,"kind":"modifierInvocation","modifierName":{"id":1139,"name":"onlyInitializing","nameLocations":["746:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"746:16:8"},"nodeType":"ModifierInvocation","src":"746:16:8"}],"name":"__Context_init","nameLocation":"720:14:8","nodeType":"FunctionDefinition","parameters":{"id":1138,"nodeType":"ParameterList","parameters":[],"src":"734:2:8"},"returnParameters":{"id":1141,"nodeType":"ParameterList","parameters":[],"src":"763:0:8"},"scope":1173,"src":"711:59:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1148,"nodeType":"Block","src":"838:7:8","statements":[]},"id":1149,"implemented":true,"kind":"function","modifiers":[{"id":1146,"kind":"modifierInvocation","modifierName":{"id":1145,"name":"onlyInitializing","nameLocations":["821:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"821:16:8"},"nodeType":"ModifierInvocation","src":"821:16:8"}],"name":"__Context_init_unchained","nameLocation":"785:24:8","nodeType":"FunctionDefinition","parameters":{"id":1144,"nodeType":"ParameterList","parameters":[],"src":"809:2:8"},"returnParameters":{"id":1147,"nodeType":"ParameterList","parameters":[],"src":"838:0:8"},"scope":1173,"src":"776:69:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1157,"nodeType":"Block","src":"912:34:8","statements":[{"expression":{"expression":{"id":1154,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:8","memberName":"sender","nodeType":"MemberAccess","src":"929:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1153,"id":1156,"nodeType":"Return","src":"922:17:8"}]},"id":1158,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:8","nodeType":"FunctionDefinition","parameters":{"id":1150,"nodeType":"ParameterList","parameters":[],"src":"869:2:8"},"returnParameters":{"id":1153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1152,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1158,"src":"903:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1151,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:8"},"scope":1173,"src":"850:96:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1166,"nodeType":"Block","src":"1019:32:8","statements":[{"expression":{"expression":{"id":1163,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:8","memberName":"data","nodeType":"MemberAccess","src":"1036:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1162,"id":1165,"nodeType":"Return","src":"1029:15:8"}]},"id":1167,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:8","nodeType":"FunctionDefinition","parameters":{"id":1159,"nodeType":"ParameterList","parameters":[],"src":"969:2:8"},"returnParameters":{"id":1162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1167,"src":"1003:14:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1160,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:8"},"scope":1173,"src":"952:99:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1168,"nodeType":"StructuredDocumentation","src":"1057:254:8","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1172,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:8","nodeType":"VariableDeclaration","scope":1173,"src":"1316:25:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1169,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1171,"length":{"hexValue":"3530","id":1170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:8","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1174,"src":"651:693:8","usedErrors":[]}],"src":"86:1259:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","exportedSymbols":{"CountersUpgradeable":[1247]},"id":1248,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1175,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"CountersUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1176,"nodeType":"StructuredDocumentation","src":"112:311:9","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":1247,"linearizedBaseContracts":[1247],"name":"CountersUpgradeable","nameLocation":"432:19:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"CountersUpgradeable.Counter","id":1179,"members":[{"constant":false,"id":1178,"mutability":"mutable","name":"_value","nameLocation":"805:6:9","nodeType":"VariableDeclaration","scope":1179,"src":"797:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1177,"name":"uint256","nodeType":"ElementaryTypeName","src":"797:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"465:7:9","nodeType":"StructDefinition","scope":1247,"src":"458:374:9","visibility":"public"},{"body":{"id":1190,"nodeType":"Block","src":"912:38:9","statements":[{"expression":{"expression":{"id":1187,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"929:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":1188,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"937:6:9","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1178,"src":"929:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1186,"id":1189,"nodeType":"Return","src":"922:21:9"}]},"id":1191,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"847:7:9","nodeType":"FunctionDefinition","parameters":{"id":1183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1182,"mutability":"mutable","name":"counter","nameLocation":"871:7:9","nodeType":"VariableDeclaration","scope":1191,"src":"855:23:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":1181,"nodeType":"UserDefinedTypeName","pathNode":{"id":1180,"name":"Counter","nameLocations":["855:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":1179,"src":"855:7:9"},"referencedDeclaration":1179,"src":"855:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"854:25:9"},"returnParameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1185,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1191,"src":"903:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1184,"name":"uint256","nodeType":"ElementaryTypeName","src":"903:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"902:9:9"},"scope":1247,"src":"838:112:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1204,"nodeType":"Block","src":"1009:70:9","statements":[{"id":1203,"nodeType":"UncheckedBlock","src":"1019:54:9","statements":[{"expression":{"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1197,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"1043:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":1199,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1051:6:9","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1178,"src":"1043:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1061:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1043:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1202,"nodeType":"ExpressionStatement","src":"1043:19:9"}]}]},"id":1205,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"965:9:9","nodeType":"FunctionDefinition","parameters":{"id":1195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1194,"mutability":"mutable","name":"counter","nameLocation":"991:7:9","nodeType":"VariableDeclaration","scope":1205,"src":"975:23:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":1193,"nodeType":"UserDefinedTypeName","pathNode":{"id":1192,"name":"Counter","nameLocations":["975:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":1179,"src":"975:7:9"},"referencedDeclaration":1179,"src":"975:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"974:25:9"},"returnParameters":{"id":1196,"nodeType":"ParameterList","parameters":[],"src":"1009:0:9"},"scope":1247,"src":"956:123:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1232,"nodeType":"Block","src":"1138:176:9","statements":[{"assignments":[1212],"declarations":[{"constant":false,"id":1212,"mutability":"mutable","name":"value","nameLocation":"1156:5:9","nodeType":"VariableDeclaration","scope":1232,"src":"1148:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1211,"name":"uint256","nodeType":"ElementaryTypeName","src":"1148:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1215,"initialValue":{"expression":{"id":1213,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"1164:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":1214,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1172:6:9","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1178,"src":"1164:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1148:30:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1217,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"1196:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1204:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1196:9:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":1220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1207:29:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":1216,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1188:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1188:49:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1222,"nodeType":"ExpressionStatement","src":"1188:49:9"},{"id":1231,"nodeType":"UncheckedBlock","src":"1247:61:9","statements":[{"expression":{"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1223,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"1271:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":1225,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1279:6:9","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1178,"src":"1271:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1226,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"1288:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1296:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1288:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1271:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1230,"nodeType":"ExpressionStatement","src":"1271:26:9"}]}]},"id":1233,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1094:9:9","nodeType":"FunctionDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"counter","nameLocation":"1120:7:9","nodeType":"VariableDeclaration","scope":1233,"src":"1104:23:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":1207,"nodeType":"UserDefinedTypeName","pathNode":{"id":1206,"name":"Counter","nameLocations":["1104:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":1179,"src":"1104:7:9"},"referencedDeclaration":1179,"src":"1104:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"1103:25:9"},"returnParameters":{"id":1210,"nodeType":"ParameterList","parameters":[],"src":"1138:0:9"},"scope":1247,"src":"1085:229:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1245,"nodeType":"Block","src":"1369:35:9","statements":[{"expression":{"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1239,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"1379:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":1241,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1387:6:9","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1178,"src":"1379:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1396:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1379:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1244,"nodeType":"ExpressionStatement","src":"1379:18:9"}]},"id":1246,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1329:5:9","nodeType":"FunctionDefinition","parameters":{"id":1237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1236,"mutability":"mutable","name":"counter","nameLocation":"1351:7:9","nodeType":"VariableDeclaration","scope":1246,"src":"1335:23:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":1235,"nodeType":"UserDefinedTypeName","pathNode":{"id":1234,"name":"Counter","nameLocations":["1335:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":1179,"src":"1335:7:9"},"referencedDeclaration":1179,"src":"1335:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"1334:25:9"},"returnParameters":{"id":1238,"nodeType":"ParameterList","parameters":[],"src":"1369:0:9"},"scope":1247,"src":"1320:84:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1248,"src":"424:982:9","usedErrors":[]}],"src":"87:1320:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","exportedSymbols":{"StorageSlotUpgradeable":[1357]},"id":1358,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1249,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1250,"nodeType":"StructuredDocumentation","src":"218:1201:10","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":1357,"linearizedBaseContracts":[1357],"name":"StorageSlotUpgradeable","nameLocation":"1428:22:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotUpgradeable.AddressSlot","id":1253,"members":[{"constant":false,"id":1252,"mutability":"mutable","name":"value","nameLocation":"1494:5:10","nodeType":"VariableDeclaration","scope":1253,"src":"1486:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1251,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1464:11:10","nodeType":"StructDefinition","scope":1357,"src":"1457:49:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BooleanSlot","id":1256,"members":[{"constant":false,"id":1255,"mutability":"mutable","name":"value","nameLocation":"1546:5:10","nodeType":"VariableDeclaration","scope":1256,"src":"1541:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1254,"name":"bool","nodeType":"ElementaryTypeName","src":"1541:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1519:11:10","nodeType":"StructDefinition","scope":1357,"src":"1512:46:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","id":1259,"members":[{"constant":false,"id":1258,"mutability":"mutable","name":"value","nameLocation":"1601:5:10","nodeType":"VariableDeclaration","scope":1259,"src":"1593:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1257,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1593:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1571:11:10","nodeType":"StructDefinition","scope":1357,"src":"1564:49:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Uint256Slot","id":1262,"members":[{"constant":false,"id":1261,"mutability":"mutable","name":"value","nameLocation":"1656:5:10","nodeType":"VariableDeclaration","scope":1262,"src":"1648:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1260,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1626:11:10","nodeType":"StructDefinition","scope":1357,"src":"1619:49:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.StringSlot","id":1265,"members":[{"constant":false,"id":1264,"mutability":"mutable","name":"value","nameLocation":"1709:5:10","nodeType":"VariableDeclaration","scope":1265,"src":"1702:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1263,"name":"string","nodeType":"ElementaryTypeName","src":"1702:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1681:10:10","nodeType":"StructDefinition","scope":1357,"src":"1674:47:10","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BytesSlot","id":1268,"members":[{"constant":false,"id":1267,"mutability":"mutable","name":"value","nameLocation":"1760:5:10","nodeType":"VariableDeclaration","scope":1268,"src":"1754:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1266,"name":"bytes","nodeType":"ElementaryTypeName","src":"1754:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1734:9:10","nodeType":"StructDefinition","scope":1357,"src":"1727:45:10","visibility":"public"},{"body":{"id":1278,"nodeType":"Block","src":"1954:106:10","statements":[{"AST":{"nodeType":"YulBlock","src":"2016:38:10","statements":[{"nodeType":"YulAssignment","src":"2030:14:10","value":{"name":"slot","nodeType":"YulIdentifier","src":"2040:4:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2030:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1275,"isOffset":false,"isSlot":true,"src":"2030:6:10","suffix":"slot","valueSize":1},{"declaration":1271,"isOffset":false,"isSlot":false,"src":"2040:4:10","valueSize":1}],"id":1277,"nodeType":"InlineAssembly","src":"2007:47:10"}]},"documentation":{"id":1269,"nodeType":"StructuredDocumentation","src":"1778:87:10","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1279,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1879:14:10","nodeType":"FunctionDefinition","parameters":{"id":1272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1271,"mutability":"mutable","name":"slot","nameLocation":"1902:4:10","nodeType":"VariableDeclaration","scope":1279,"src":"1894:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1270,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1894:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1893:14:10"},"returnParameters":{"id":1276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1275,"mutability":"mutable","name":"r","nameLocation":"1951:1:10","nodeType":"VariableDeclaration","scope":1279,"src":"1931:21:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1253_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":1274,"nodeType":"UserDefinedTypeName","pathNode":{"id":1273,"name":"AddressSlot","nameLocations":["1931:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1253,"src":"1931:11:10"},"referencedDeclaration":1253,"src":"1931:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1253_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1930:23:10"},"scope":1357,"src":"1870:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1289,"nodeType":"Block","src":"2242:106:10","statements":[{"AST":{"nodeType":"YulBlock","src":"2304:38:10","statements":[{"nodeType":"YulAssignment","src":"2318:14:10","value":{"name":"slot","nodeType":"YulIdentifier","src":"2328:4:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2318:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1286,"isOffset":false,"isSlot":true,"src":"2318:6:10","suffix":"slot","valueSize":1},{"declaration":1282,"isOffset":false,"isSlot":false,"src":"2328:4:10","valueSize":1}],"id":1288,"nodeType":"InlineAssembly","src":"2295:47:10"}]},"documentation":{"id":1280,"nodeType":"StructuredDocumentation","src":"2066:87:10","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":1290,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2167:14:10","nodeType":"FunctionDefinition","parameters":{"id":1283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1282,"mutability":"mutable","name":"slot","nameLocation":"2190:4:10","nodeType":"VariableDeclaration","scope":1290,"src":"2182:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1281,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2182:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2181:14:10"},"returnParameters":{"id":1287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1286,"mutability":"mutable","name":"r","nameLocation":"2239:1:10","nodeType":"VariableDeclaration","scope":1290,"src":"2219:21:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1256_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":1285,"nodeType":"UserDefinedTypeName","pathNode":{"id":1284,"name":"BooleanSlot","nameLocations":["2219:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1256,"src":"2219:11:10"},"referencedDeclaration":1256,"src":"2219:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1256_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"2218:23:10"},"scope":1357,"src":"2158:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1300,"nodeType":"Block","src":"2530:106:10","statements":[{"AST":{"nodeType":"YulBlock","src":"2592:38:10","statements":[{"nodeType":"YulAssignment","src":"2606:14:10","value":{"name":"slot","nodeType":"YulIdentifier","src":"2616:4:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2606:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1297,"isOffset":false,"isSlot":true,"src":"2606:6:10","suffix":"slot","valueSize":1},{"declaration":1293,"isOffset":false,"isSlot":false,"src":"2616:4:10","valueSize":1}],"id":1299,"nodeType":"InlineAssembly","src":"2583:47:10"}]},"documentation":{"id":1291,"nodeType":"StructuredDocumentation","src":"2354:87:10","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1301,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2455:14:10","nodeType":"FunctionDefinition","parameters":{"id":1294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1293,"mutability":"mutable","name":"slot","nameLocation":"2478:4:10","nodeType":"VariableDeclaration","scope":1301,"src":"2470:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1292,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2470:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2469:14:10"},"returnParameters":{"id":1298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1297,"mutability":"mutable","name":"r","nameLocation":"2527:1:10","nodeType":"VariableDeclaration","scope":1301,"src":"2507:21:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1259_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":1296,"nodeType":"UserDefinedTypeName","pathNode":{"id":1295,"name":"Bytes32Slot","nameLocations":["2507:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1259,"src":"2507:11:10"},"referencedDeclaration":1259,"src":"2507:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1259_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2506:23:10"},"scope":1357,"src":"2446:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1311,"nodeType":"Block","src":"2818:106:10","statements":[{"AST":{"nodeType":"YulBlock","src":"2880:38:10","statements":[{"nodeType":"YulAssignment","src":"2894:14:10","value":{"name":"slot","nodeType":"YulIdentifier","src":"2904:4:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2894:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1308,"isOffset":false,"isSlot":true,"src":"2894:6:10","suffix":"slot","valueSize":1},{"declaration":1304,"isOffset":false,"isSlot":false,"src":"2904:4:10","valueSize":1}],"id":1310,"nodeType":"InlineAssembly","src":"2871:47:10"}]},"documentation":{"id":1302,"nodeType":"StructuredDocumentation","src":"2642:87:10","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1312,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2743:14:10","nodeType":"FunctionDefinition","parameters":{"id":1305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1304,"mutability":"mutable","name":"slot","nameLocation":"2766:4:10","nodeType":"VariableDeclaration","scope":1312,"src":"2758:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2758:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2757:14:10"},"returnParameters":{"id":1309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"r","nameLocation":"2815:1:10","nodeType":"VariableDeclaration","scope":1312,"src":"2795:21:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1262_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":1307,"nodeType":"UserDefinedTypeName","pathNode":{"id":1306,"name":"Uint256Slot","nameLocations":["2795:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1262,"src":"2795:11:10"},"referencedDeclaration":1262,"src":"2795:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1262_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2794:23:10"},"scope":1357,"src":"2734:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1322,"nodeType":"Block","src":"3103:106:10","statements":[{"AST":{"nodeType":"YulBlock","src":"3165:38:10","statements":[{"nodeType":"YulAssignment","src":"3179:14:10","value":{"name":"slot","nodeType":"YulIdentifier","src":"3189:4:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3179:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1319,"isOffset":false,"isSlot":true,"src":"3179:6:10","suffix":"slot","valueSize":1},{"declaration":1315,"isOffset":false,"isSlot":false,"src":"3189:4:10","valueSize":1}],"id":1321,"nodeType":"InlineAssembly","src":"3156:47:10"}]},"documentation":{"id":1313,"nodeType":"StructuredDocumentation","src":"2930:86:10","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":1323,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3030:13:10","nodeType":"FunctionDefinition","parameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1315,"mutability":"mutable","name":"slot","nameLocation":"3052:4:10","nodeType":"VariableDeclaration","scope":1323,"src":"3044:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3044:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3043:14:10"},"returnParameters":{"id":1320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1319,"mutability":"mutable","name":"r","nameLocation":"3100:1:10","nodeType":"VariableDeclaration","scope":1323,"src":"3081:20:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1265_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":1318,"nodeType":"UserDefinedTypeName","pathNode":{"id":1317,"name":"StringSlot","nameLocations":["3081:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":1265,"src":"3081:10:10"},"referencedDeclaration":1265,"src":"3081:10:10","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1265_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3080:22:10"},"scope":1357,"src":"3021:188:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1333,"nodeType":"Block","src":"3411:112:10","statements":[{"AST":{"nodeType":"YulBlock","src":"3473:44:10","statements":[{"nodeType":"YulAssignment","src":"3487:20:10","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3497:10:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3487:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1330,"isOffset":false,"isSlot":true,"src":"3487:6:10","suffix":"slot","valueSize":1},{"declaration":1326,"isOffset":false,"isSlot":true,"src":"3497:10:10","suffix":"slot","valueSize":1}],"id":1332,"nodeType":"InlineAssembly","src":"3464:53:10"}]},"documentation":{"id":1324,"nodeType":"StructuredDocumentation","src":"3215:101:10","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":1334,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3330:13:10","nodeType":"FunctionDefinition","parameters":{"id":1327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"mutability":"mutable","name":"store","nameLocation":"3359:5:10","nodeType":"VariableDeclaration","scope":1334,"src":"3344:20:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1325,"name":"string","nodeType":"ElementaryTypeName","src":"3344:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3343:22:10"},"returnParameters":{"id":1331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1330,"mutability":"mutable","name":"r","nameLocation":"3408:1:10","nodeType":"VariableDeclaration","scope":1334,"src":"3389:20:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1265_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":1329,"nodeType":"UserDefinedTypeName","pathNode":{"id":1328,"name":"StringSlot","nameLocations":["3389:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":1265,"src":"3389:10:10"},"referencedDeclaration":1265,"src":"3389:10:10","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1265_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3388:22:10"},"scope":1357,"src":"3321:202:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1344,"nodeType":"Block","src":"3699:106:10","statements":[{"AST":{"nodeType":"YulBlock","src":"3761:38:10","statements":[{"nodeType":"YulAssignment","src":"3775:14:10","value":{"name":"slot","nodeType":"YulIdentifier","src":"3785:4:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3775:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1341,"isOffset":false,"isSlot":true,"src":"3775:6:10","suffix":"slot","valueSize":1},{"declaration":1337,"isOffset":false,"isSlot":false,"src":"3785:4:10","valueSize":1}],"id":1343,"nodeType":"InlineAssembly","src":"3752:47:10"}]},"documentation":{"id":1335,"nodeType":"StructuredDocumentation","src":"3529:85:10","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":1345,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3628:12:10","nodeType":"FunctionDefinition","parameters":{"id":1338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1337,"mutability":"mutable","name":"slot","nameLocation":"3649:4:10","nodeType":"VariableDeclaration","scope":1345,"src":"3641:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1336,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3641:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3640:14:10"},"returnParameters":{"id":1342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1341,"mutability":"mutable","name":"r","nameLocation":"3696:1:10","nodeType":"VariableDeclaration","scope":1345,"src":"3678:19:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1268_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":1340,"nodeType":"UserDefinedTypeName","pathNode":{"id":1339,"name":"BytesSlot","nameLocations":["3678:9:10"],"nodeType":"IdentifierPath","referencedDeclaration":1268,"src":"3678:9:10"},"referencedDeclaration":1268,"src":"3678:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1268_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3677:21:10"},"scope":1357,"src":"3619:186:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1355,"nodeType":"Block","src":"4002:112:10","statements":[{"AST":{"nodeType":"YulBlock","src":"4064:44:10","statements":[{"nodeType":"YulAssignment","src":"4078:20:10","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"4088:10:10"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"4078:6:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1352,"isOffset":false,"isSlot":true,"src":"4078:6:10","suffix":"slot","valueSize":1},{"declaration":1348,"isOffset":false,"isSlot":true,"src":"4088:10:10","suffix":"slot","valueSize":1}],"id":1354,"nodeType":"InlineAssembly","src":"4055:53:10"}]},"documentation":{"id":1346,"nodeType":"StructuredDocumentation","src":"3811:99:10","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":1356,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3924:12:10","nodeType":"FunctionDefinition","parameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1348,"mutability":"mutable","name":"store","nameLocation":"3951:5:10","nodeType":"VariableDeclaration","scope":1356,"src":"3937:19:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1347,"name":"bytes","nodeType":"ElementaryTypeName","src":"3937:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3936:21:10"},"returnParameters":{"id":1353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1352,"mutability":"mutable","name":"r","nameLocation":"3999:1:10","nodeType":"VariableDeclaration","scope":1356,"src":"3981:19:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1268_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":1351,"nodeType":"UserDefinedTypeName","pathNode":{"id":1350,"name":"BytesSlot","nameLocations":["3981:9:10"],"nodeType":"IdentifierPath","referencedDeclaration":1268,"src":"3981:9:10"},"referencedDeclaration":1268,"src":"3981:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1268_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3980:21:10"},"scope":1357,"src":"3915:199:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1358,"src":"1420:2696:10","usedErrors":[]}],"src":"193:3924:10"},"id":10},"contracts/WorldPredictionMarket.sol":{"ast":{"absolutePath":"contracts/WorldPredictionMarket.sol","exportedSymbols":{"AddressUpgradeable":[1131],"ContextUpgradeable":[1173],"CountersUpgradeable":[1247],"ERC1967UpgradeUpgradeable":[486],"IAstrologerManager":[3031],"IBeaconUpgradeable":[496],"IERC1822ProxiableUpgradeable":[162],"IERC1967Upgradeable":[152],"IERC721":[2948],"IReputationScorer":[3075],"Initializable":[665],"OwnableUpgradeable":[131],"StorageSlotUpgradeable":[1357],"UUPSUpgradeable":[801],"WorldPredictionMarket":[2933]},"id":2949,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1359,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":1360,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2949,"sourceUnit":132,"src":"57:75:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":1361,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2949,"sourceUnit":666,"src":"133:75:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":1362,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2949,"sourceUnit":802,"src":"209:77:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","id":1363,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2949,"sourceUnit":1248,"src":"287:75:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IAstrologerManager.sol","file":"./interfaces/IAstrologerManager.sol","id":1364,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2949,"sourceUnit":3032,"src":"363:45:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IReputationScorer.sol","file":"./interfaces/IReputationScorer.sol","id":1365,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2949,"sourceUnit":3076,"src":"409:44:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1366,"name":"Initializable","nameLocations":["494:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":665,"src":"494:13:11"},"id":1367,"nodeType":"InheritanceSpecifier","src":"494:13:11"},{"baseName":{"id":1368,"name":"OwnableUpgradeable","nameLocations":["514:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":131,"src":"514:18:11"},"id":1369,"nodeType":"InheritanceSpecifier","src":"514:18:11"},{"baseName":{"id":1370,"name":"UUPSUpgradeable","nameLocations":["539:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":801,"src":"539:15:11"},"id":1371,"nodeType":"InheritanceSpecifier","src":"539:15:11"}],"canonicalName":"WorldPredictionMarket","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2933,"linearizedBaseContracts":[2933,801,486,152,162,131,1173,665],"name":"WorldPredictionMarket","nameLocation":"464:21:11","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1375,"libraryName":{"id":1372,"name":"CountersUpgradeable","nameLocations":["568:19:11"],"nodeType":"IdentifierPath","referencedDeclaration":1247,"src":"568:19:11"},"nodeType":"UsingForDirective","src":"562:58:11","typeName":{"id":1374,"nodeType":"UserDefinedTypeName","pathNode":{"id":1373,"name":"CountersUpgradeable.Counter","nameLocations":["592:19:11","612:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":1179,"src":"592:27:11"},"referencedDeclaration":1179,"src":"592:27:11","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}}},{"constant":false,"id":1378,"mutability":"mutable","name":"_predictionIds","nameLocation":"662:14:11","nodeType":"VariableDeclaration","scope":2933,"src":"626:50:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":1377,"nodeType":"UserDefinedTypeName","pathNode":{"id":1376,"name":"CountersUpgradeable.Counter","nameLocations":["626:19:11","646:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":1179,"src":"626:27:11"},"referencedDeclaration":1179,"src":"626:27:11","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"private"},{"canonicalName":"WorldPredictionMarket.WorldPrediction","id":1411,"members":[{"constant":false,"id":1380,"mutability":"mutable","name":"id","nameLocation":"728:2:11","nodeType":"VariableDeclaration","scope":1411,"src":"720:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1379,"name":"uint256","nodeType":"ElementaryTypeName","src":"720:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1382,"mutability":"mutable","name":"astrologer","nameLocation":"748:10:11","nodeType":"VariableDeclaration","scope":1411,"src":"740:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1381,"name":"address","nodeType":"ElementaryTypeName","src":"740:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1384,"mutability":"mutable","name":"astrologerId","nameLocation":"776:12:11","nodeType":"VariableDeclaration","scope":1411,"src":"768:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1383,"name":"uint256","nodeType":"ElementaryTypeName","src":"768:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1386,"mutability":"mutable","name":"title","nameLocation":"805:5:11","nodeType":"VariableDeclaration","scope":1411,"src":"798:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1385,"name":"string","nodeType":"ElementaryTypeName","src":"798:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1388,"mutability":"mutable","name":"description","nameLocation":"827:11:11","nodeType":"VariableDeclaration","scope":1411,"src":"820:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1387,"name":"string","nodeType":"ElementaryTypeName","src":"820:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1390,"mutability":"mutable","name":"deadline","nameLocation":"856:8:11","nodeType":"VariableDeclaration","scope":1411,"src":"848:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1389,"name":"uint256","nodeType":"ElementaryTypeName","src":"848:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1392,"mutability":"mutable","name":"astrologerStake","nameLocation":"882:15:11","nodeType":"VariableDeclaration","scope":1411,"src":"874:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1391,"name":"uint256","nodeType":"ElementaryTypeName","src":"874:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1394,"mutability":"mutable","name":"totalVoterStake","nameLocation":"915:15:11","nodeType":"VariableDeclaration","scope":1411,"src":"907:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1393,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1396,"mutability":"mutable","name":"yesVoterStake","nameLocation":"948:13:11","nodeType":"VariableDeclaration","scope":1411,"src":"940:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1395,"name":"uint256","nodeType":"ElementaryTypeName","src":"940:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1398,"mutability":"mutable","name":"noVoterStake","nameLocation":"979:12:11","nodeType":"VariableDeclaration","scope":1411,"src":"971:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1397,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1400,"mutability":"mutable","name":"totalVoters","nameLocation":"1009:11:11","nodeType":"VariableDeclaration","scope":1411,"src":"1001:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1399,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1402,"mutability":"mutable","name":"isResolved","nameLocation":"1035:10:11","nodeType":"VariableDeclaration","scope":1411,"src":"1030:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1401,"name":"bool","nodeType":"ElementaryTypeName","src":"1030:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1404,"mutability":"mutable","name":"outcome","nameLocation":"1060:7:11","nodeType":"VariableDeclaration","scope":1411,"src":"1055:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1403,"name":"bool","nodeType":"ElementaryTypeName","src":"1055:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1406,"mutability":"mutable","name":"daoVotingActive","nameLocation":"1082:15:11","nodeType":"VariableDeclaration","scope":1411,"src":"1077:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1405,"name":"bool","nodeType":"ElementaryTypeName","src":"1077:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1408,"mutability":"mutable","name":"createdAt","nameLocation":"1115:9:11","nodeType":"VariableDeclaration","scope":1411,"src":"1107:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1407,"name":"uint256","nodeType":"ElementaryTypeName","src":"1107:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1410,"mutability":"mutable","name":"resolvedAt","nameLocation":"1142:10:11","nodeType":"VariableDeclaration","scope":1411,"src":"1134:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1409,"name":"uint256","nodeType":"ElementaryTypeName","src":"1134:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"WorldPrediction","nameLocation":"694:15:11","nodeType":"StructDefinition","scope":2933,"src":"687:472:11","visibility":"public"},{"canonicalName":"WorldPredictionMarket.Vote","id":1420,"members":[{"constant":false,"id":1413,"mutability":"mutable","name":"hasVoted","nameLocation":"1192:8:11","nodeType":"VariableDeclaration","scope":1420,"src":"1187:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1412,"name":"bool","nodeType":"ElementaryTypeName","src":"1187:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1415,"mutability":"mutable","name":"vote","nameLocation":"1215:4:11","nodeType":"VariableDeclaration","scope":1420,"src":"1210:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1414,"name":"bool","nodeType":"ElementaryTypeName","src":"1210:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1417,"mutability":"mutable","name":"stakeAmount","nameLocation":"1263:11:11","nodeType":"VariableDeclaration","scope":1420,"src":"1255:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1416,"name":"uint256","nodeType":"ElementaryTypeName","src":"1255:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1419,"mutability":"mutable","name":"rewardClaimed","nameLocation":"1289:13:11","nodeType":"VariableDeclaration","scope":1420,"src":"1284:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1418,"name":"bool","nodeType":"ElementaryTypeName","src":"1284:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Vote","nameLocation":"1172:4:11","nodeType":"StructDefinition","scope":2933,"src":"1165:144:11","visibility":"public"},{"canonicalName":"WorldPredictionMarket.DAOVote","id":1427,"members":[{"constant":false,"id":1422,"mutability":"mutable","name":"hasVoted","nameLocation":"1345:8:11","nodeType":"VariableDeclaration","scope":1427,"src":"1340:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1421,"name":"bool","nodeType":"ElementaryTypeName","src":"1340:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1424,"mutability":"mutable","name":"vote","nameLocation":"1368:4:11","nodeType":"VariableDeclaration","scope":1427,"src":"1363:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1423,"name":"bool","nodeType":"ElementaryTypeName","src":"1363:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1426,"mutability":"mutable","name":"tokenId","nameLocation":"1438:7:11","nodeType":"VariableDeclaration","scope":1427,"src":"1430:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1425,"name":"uint256","nodeType":"ElementaryTypeName","src":"1430:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"DAOVote","nameLocation":"1322:7:11","nodeType":"StructDefinition","scope":2933,"src":"1315:137:11","visibility":"public"},{"canonicalName":"WorldPredictionMarket.PredictionStats","id":1436,"members":[{"constant":false,"id":1429,"mutability":"mutable","name":"totalPredictions","nameLocation":"1499:16:11","nodeType":"VariableDeclaration","scope":1436,"src":"1491:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1428,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1431,"mutability":"mutable","name":"activePredictions","nameLocation":"1533:17:11","nodeType":"VariableDeclaration","scope":1436,"src":"1525:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1430,"name":"uint256","nodeType":"ElementaryTypeName","src":"1525:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1433,"mutability":"mutable","name":"resolvedPredictions","nameLocation":"1568:19:11","nodeType":"VariableDeclaration","scope":1436,"src":"1560:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1432,"name":"uint256","nodeType":"ElementaryTypeName","src":"1560:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1435,"mutability":"mutable","name":"totalVolume","nameLocation":"1605:11:11","nodeType":"VariableDeclaration","scope":1436,"src":"1597:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1434,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PredictionStats","nameLocation":"1465:15:11","nodeType":"StructDefinition","scope":2933,"src":"1458:165:11","visibility":"public"},{"constant":false,"functionSelector":"004fbbb0","id":1441,"mutability":"mutable","name":"predictions","nameLocation":"1672:11:11","nodeType":"VariableDeclaration","scope":2933,"src":"1629:54:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WorldPrediction_$1411_storage_$","typeString":"mapping(uint256 => struct WorldPredictionMarket.WorldPrediction)"},"typeName":{"id":1440,"keyType":{"id":1437,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1629:35:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WorldPrediction_$1411_storage_$","typeString":"mapping(uint256 => struct WorldPredictionMarket.WorldPrediction)"},"valueType":{"id":1439,"nodeType":"UserDefinedTypeName","pathNode":{"id":1438,"name":"WorldPrediction","nameLocations":["1648:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":1411,"src":"1648:15:11"},"referencedDeclaration":1411,"src":"1648:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"}}},"visibility":"public"},{"constant":false,"functionSelector":"d23254b4","id":1448,"mutability":"mutable","name":"votes","nameLocation":"1741:5:11","nodeType":"VariableDeclaration","scope":2933,"src":"1689:57:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Vote_$1420_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.Vote))"},"typeName":{"id":1447,"keyType":{"id":1442,"name":"uint256","nodeType":"ElementaryTypeName","src":"1697:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1689:44:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Vote_$1420_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.Vote))"},"valueType":{"id":1446,"keyType":{"id":1443,"name":"address","nodeType":"ElementaryTypeName","src":"1716:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1708:24:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Vote_$1420_storage_$","typeString":"mapping(address => struct WorldPredictionMarket.Vote)"},"valueType":{"id":1445,"nodeType":"UserDefinedTypeName","pathNode":{"id":1444,"name":"Vote","nameLocations":["1727:4:11"],"nodeType":"IdentifierPath","referencedDeclaration":1420,"src":"1727:4:11"},"referencedDeclaration":1420,"src":"1727:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage_ptr","typeString":"struct WorldPredictionMarket.Vote"}}}},"visibility":"public"},{"constant":false,"functionSelector":"78640668","id":1455,"mutability":"mutable","name":"daoVotes","nameLocation":"1807:8:11","nodeType":"VariableDeclaration","scope":2933,"src":"1752:63:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_DAOVote_$1427_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.DAOVote))"},"typeName":{"id":1454,"keyType":{"id":1449,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1752:47:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_DAOVote_$1427_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.DAOVote))"},"valueType":{"id":1453,"keyType":{"id":1450,"name":"address","nodeType":"ElementaryTypeName","src":"1779:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1771:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_DAOVote_$1427_storage_$","typeString":"mapping(address => struct WorldPredictionMarket.DAOVote)"},"valueType":{"id":1452,"nodeType":"UserDefinedTypeName","pathNode":{"id":1451,"name":"DAOVote","nameLocations":["1790:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":1427,"src":"1790:7:11"},"referencedDeclaration":1427,"src":"1790:7:11","typeDescriptions":{"typeIdentifier":"t_struct$_DAOVote_$1427_storage_ptr","typeString":"struct WorldPredictionMarket.DAOVote"}}}},"visibility":"public"},{"constant":false,"functionSelector":"533a12a5","id":1459,"mutability":"mutable","name":"daoYesVotes","nameLocation":"1856:11:11","nodeType":"VariableDeclaration","scope":2933,"src":"1821:46:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1458,"keyType":{"id":1456,"name":"uint256","nodeType":"ElementaryTypeName","src":"1829:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1821:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":1457,"name":"uint256","nodeType":"ElementaryTypeName","src":"1840:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"256c52d3","id":1463,"mutability":"mutable","name":"daoNoVotes","nameLocation":"1908:10:11","nodeType":"VariableDeclaration","scope":2933,"src":"1873:45:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1462,"keyType":{"id":1460,"name":"uint256","nodeType":"ElementaryTypeName","src":"1881:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1873:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":1461,"name":"uint256","nodeType":"ElementaryTypeName","src":"1892:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"37562b29","id":1468,"mutability":"mutable","name":"astrologerPredictions","nameLocation":"1961:21:11","nodeType":"VariableDeclaration","scope":2933,"src":"1924:58:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"typeName":{"id":1467,"keyType":{"id":1464,"name":"address","nodeType":"ElementaryTypeName","src":"1932:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1924:29:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"valueType":{"baseType":{"id":1465,"name":"uint256","nodeType":"ElementaryTypeName","src":"1943:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1466,"nodeType":"ArrayTypeName","src":"1943:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"visibility":"public"},{"constant":false,"functionSelector":"8b3511f7","id":1473,"mutability":"mutable","name":"userVotes","nameLocation":"2025:9:11","nodeType":"VariableDeclaration","scope":2933,"src":"1988:46:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"typeName":{"id":1472,"keyType":{"id":1469,"name":"address","nodeType":"ElementaryTypeName","src":"1996:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1988:29:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"valueType":{"baseType":{"id":1470,"name":"uint256","nodeType":"ElementaryTypeName","src":"2007:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1471,"nodeType":"ArrayTypeName","src":"2007:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"visibility":"public"},{"constant":false,"functionSelector":"6fd31a41","id":1475,"mutability":"mutable","name":"astrologerManager","nameLocation":"2060:17:11","nodeType":"VariableDeclaration","scope":2933,"src":"2045:32:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1474,"name":"address","nodeType":"ElementaryTypeName","src":"2045:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"b488202d","id":1477,"mutability":"mutable","name":"astroChartNFT","nameLocation":"2098:13:11","nodeType":"VariableDeclaration","scope":2933,"src":"2083:28:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1476,"name":"address","nodeType":"ElementaryTypeName","src":"2083:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"ab76c9ed","id":1479,"mutability":"mutable","name":"zodiacDAO","nameLocation":"2132:9:11","nodeType":"VariableDeclaration","scope":2933,"src":"2117:24:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1478,"name":"address","nodeType":"ElementaryTypeName","src":"2117:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"73c84d21","id":1481,"mutability":"mutable","name":"reputationScorer","nameLocation":"2162:16:11","nodeType":"VariableDeclaration","scope":2933,"src":"2147:31:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1480,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"63ab68ef","id":1483,"mutability":"mutable","name":"minAstrologerStake","nameLocation":"2204:18:11","nodeType":"VariableDeclaration","scope":2933,"src":"2189:33:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1482,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"f7333e33","id":1485,"mutability":"mutable","name":"minVoterStake","nameLocation":"2243:13:11","nodeType":"VariableDeclaration","scope":2933,"src":"2228:28:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1484,"name":"uint256","nodeType":"ElementaryTypeName","src":"2228:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"0e8c47f2","id":1487,"mutability":"mutable","name":"maxVoterStake","nameLocation":"2277:13:11","nodeType":"VariableDeclaration","scope":2933,"src":"2262:28:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1486,"name":"uint256","nodeType":"ElementaryTypeName","src":"2262:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"72f022c2","id":1489,"mutability":"mutable","name":"daoVotingDuration","nameLocation":"2311:17:11","nodeType":"VariableDeclaration","scope":2933,"src":"2296:32:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1488,"name":"uint256","nodeType":"ElementaryTypeName","src":"2296:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"d75ebce5","id":1491,"mutability":"mutable","name":"astrologerRewardPercentage","nameLocation":"2349:26:11","nodeType":"VariableDeclaration","scope":2933,"src":"2334:41:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1490,"name":"uint256","nodeType":"ElementaryTypeName","src":"2334:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"cdd78cfc","id":1493,"mutability":"mutable","name":"platformFeePercentage","nameLocation":"2408:21:11","nodeType":"VariableDeclaration","scope":2933,"src":"2393:36:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1492,"name":"uint256","nodeType":"ElementaryTypeName","src":"2393:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"b6bb1754","id":1496,"mutability":"mutable","name":"predictionStats","nameLocation":"2475:15:11","nodeType":"VariableDeclaration","scope":2933,"src":"2452:38:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PredictionStats_$1436_storage","typeString":"struct WorldPredictionMarket.PredictionStats"},"typeName":{"id":1495,"nodeType":"UserDefinedTypeName","pathNode":{"id":1494,"name":"PredictionStats","nameLocations":["2452:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":1436,"src":"2452:15:11"},"referencedDeclaration":1436,"src":"2452:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_PredictionStats_$1436_storage_ptr","typeString":"struct WorldPredictionMarket.PredictionStats"}},"visibility":"public"},{"anonymous":false,"eventSelector":"37f3edf7ed237f91fd6999d49411c7e10b3602f2e561a5adf21934775659c61a","id":1508,"name":"PredictionCreated","nameLocation":"2507:17:11","nodeType":"EventDefinition","parameters":{"id":1507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1498,"indexed":true,"mutability":"mutable","name":"predictionId","nameLocation":"2550:12:11","nodeType":"VariableDeclaration","scope":1508,"src":"2534:28:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1497,"name":"uint256","nodeType":"ElementaryTypeName","src":"2534:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1500,"indexed":true,"mutability":"mutable","name":"astrologer","nameLocation":"2588:10:11","nodeType":"VariableDeclaration","scope":1508,"src":"2572:26:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1499,"name":"address","nodeType":"ElementaryTypeName","src":"2572:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1502,"indexed":false,"mutability":"mutable","name":"title","nameLocation":"2615:5:11","nodeType":"VariableDeclaration","scope":1508,"src":"2608:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1501,"name":"string","nodeType":"ElementaryTypeName","src":"2608:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1504,"indexed":false,"mutability":"mutable","name":"deadline","nameLocation":"2638:8:11","nodeType":"VariableDeclaration","scope":1508,"src":"2630:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1503,"name":"uint256","nodeType":"ElementaryTypeName","src":"2630:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1506,"indexed":false,"mutability":"mutable","name":"astrologerStake","nameLocation":"2664:15:11","nodeType":"VariableDeclaration","scope":1508,"src":"2656:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1505,"name":"uint256","nodeType":"ElementaryTypeName","src":"2656:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2524:161:11"},"src":"2501:185:11"},{"anonymous":false,"eventSelector":"cbdf6214089cba887ecbf35a0b6a734589959c9763342c756bb2a80ca2bc9f6e","id":1518,"name":"VoteCast","nameLocation":"2698:8:11","nodeType":"EventDefinition","parameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1510,"indexed":true,"mutability":"mutable","name":"predictionId","nameLocation":"2732:12:11","nodeType":"VariableDeclaration","scope":1518,"src":"2716:28:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1509,"name":"uint256","nodeType":"ElementaryTypeName","src":"2716:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1512,"indexed":true,"mutability":"mutable","name":"voter","nameLocation":"2770:5:11","nodeType":"VariableDeclaration","scope":1518,"src":"2754:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1511,"name":"address","nodeType":"ElementaryTypeName","src":"2754:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1514,"indexed":false,"mutability":"mutable","name":"vote","nameLocation":"2790:4:11","nodeType":"VariableDeclaration","scope":1518,"src":"2785:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1513,"name":"bool","nodeType":"ElementaryTypeName","src":"2785:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1516,"indexed":false,"mutability":"mutable","name":"stakeAmount","nameLocation":"2812:11:11","nodeType":"VariableDeclaration","scope":1518,"src":"2804:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1515,"name":"uint256","nodeType":"ElementaryTypeName","src":"2804:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2706:123:11"},"src":"2692:138:11"},{"anonymous":false,"eventSelector":"f34f077f143d412407a903c03d8d2132b5dd9c006763fdf1fc57f5133610e64f","id":1528,"name":"DAOVoteCast","nameLocation":"2842:11:11","nodeType":"EventDefinition","parameters":{"id":1527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1520,"indexed":true,"mutability":"mutable","name":"predictionId","nameLocation":"2879:12:11","nodeType":"VariableDeclaration","scope":1528,"src":"2863:28:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1519,"name":"uint256","nodeType":"ElementaryTypeName","src":"2863:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1522,"indexed":true,"mutability":"mutable","name":"daoMember","nameLocation":"2917:9:11","nodeType":"VariableDeclaration","scope":1528,"src":"2901:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1521,"name":"address","nodeType":"ElementaryTypeName","src":"2901:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1524,"indexed":false,"mutability":"mutable","name":"vote","nameLocation":"2941:4:11","nodeType":"VariableDeclaration","scope":1528,"src":"2936:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1523,"name":"bool","nodeType":"ElementaryTypeName","src":"2936:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1526,"indexed":false,"mutability":"mutable","name":"tokenId","nameLocation":"2963:7:11","nodeType":"VariableDeclaration","scope":1528,"src":"2955:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1525,"name":"uint256","nodeType":"ElementaryTypeName","src":"2955:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2853:123:11"},"src":"2836:141:11"},{"anonymous":false,"eventSelector":"1ee447de28c6ff53bc0403bdbc8f4114866f73b12fc451b0605fc923b02b65bf","id":1538,"name":"PredictionResolved","nameLocation":"2989:18:11","nodeType":"EventDefinition","parameters":{"id":1537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1530,"indexed":true,"mutability":"mutable","name":"predictionId","nameLocation":"3033:12:11","nodeType":"VariableDeclaration","scope":1538,"src":"3017:28:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1529,"name":"uint256","nodeType":"ElementaryTypeName","src":"3017:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1532,"indexed":false,"mutability":"mutable","name":"outcome","nameLocation":"3060:7:11","nodeType":"VariableDeclaration","scope":1538,"src":"3055:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1531,"name":"bool","nodeType":"ElementaryTypeName","src":"3055:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1534,"indexed":false,"mutability":"mutable","name":"totalStake","nameLocation":"3085:10:11","nodeType":"VariableDeclaration","scope":1538,"src":"3077:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1533,"name":"uint256","nodeType":"ElementaryTypeName","src":"3077:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1536,"indexed":false,"mutability":"mutable","name":"astrologerReward","nameLocation":"3113:16:11","nodeType":"VariableDeclaration","scope":1538,"src":"3105:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1535,"name":"uint256","nodeType":"ElementaryTypeName","src":"3105:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3007:128:11"},"src":"2983:153:11"},{"anonymous":false,"eventSelector":"24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb7","id":1546,"name":"RewardClaimed","nameLocation":"3148:13:11","nodeType":"EventDefinition","parameters":{"id":1545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"indexed":true,"mutability":"mutable","name":"predictionId","nameLocation":"3187:12:11","nodeType":"VariableDeclaration","scope":1546,"src":"3171:28:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1539,"name":"uint256","nodeType":"ElementaryTypeName","src":"3171:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1542,"indexed":true,"mutability":"mutable","name":"claimer","nameLocation":"3225:7:11","nodeType":"VariableDeclaration","scope":1546,"src":"3209:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1541,"name":"address","nodeType":"ElementaryTypeName","src":"3209:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1544,"indexed":false,"mutability":"mutable","name":"rewardAmount","nameLocation":"3250:12:11","nodeType":"VariableDeclaration","scope":1546,"src":"3242:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1543,"name":"uint256","nodeType":"ElementaryTypeName","src":"3242:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3161:107:11"},"src":"3142:127:11"},{"anonymous":false,"eventSelector":"c83104e48f44c8c7b89a4dec1259a93bffcef18013dc1ac5891a260de98a50e5","id":1552,"name":"DAOVotingStarted","nameLocation":"3281:16:11","nodeType":"EventDefinition","parameters":{"id":1551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1548,"indexed":true,"mutability":"mutable","name":"predictionId","nameLocation":"3323:12:11","nodeType":"VariableDeclaration","scope":1552,"src":"3307:28:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1547,"name":"uint256","nodeType":"ElementaryTypeName","src":"3307:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1550,"indexed":false,"mutability":"mutable","name":"endTime","nameLocation":"3353:7:11","nodeType":"VariableDeclaration","scope":1552,"src":"3345:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1549,"name":"uint256","nodeType":"ElementaryTypeName","src":"3345:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3297:69:11"},"src":"3275:92:11"},{"body":{"id":1559,"nodeType":"Block","src":"3440:39:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1556,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"3450:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3450:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1558,"nodeType":"ExpressionStatement","src":"3450:22:11"}]},"documentation":{"id":1553,"nodeType":"StructuredDocumentation","src":"3373:48:11","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":1560,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1554,"nodeType":"ParameterList","parameters":[],"src":"3437:2:11"},"returnParameters":{"id":1555,"nodeType":"ParameterList","parameters":[],"src":"3440:0:11"},"scope":2933,"src":"3426:53:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1625,"nodeType":"Block","src":"3762:525:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1579,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"3772:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3772:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1581,"nodeType":"ExpressionStatement","src":"3772:16:11"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1582,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":683,"src":"3798:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3798:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1584,"nodeType":"ExpressionStatement","src":"3798:24:11"},{"expression":{"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1585,"name":"astrologerManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"3841:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1586,"name":"_astrologerManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"3861:18:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3841:38:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1588,"nodeType":"ExpressionStatement","src":"3841:38:11"},{"expression":{"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1589,"name":"astroChartNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"3889:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1590,"name":"_astroChartNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"3905:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3889:30:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1592,"nodeType":"ExpressionStatement","src":"3889:30:11"},{"expression":{"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1593,"name":"zodiacDAO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"3929:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1594,"name":"_zodiacDAO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"3941:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3929:22:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1596,"nodeType":"ExpressionStatement","src":"3929:22:11"},{"expression":{"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1597,"name":"reputationScorer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"3961:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1598,"name":"_reputationScorer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"3980:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3961:36:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1600,"nodeType":"ExpressionStatement","src":"3961:36:11"},{"expression":{"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1601,"name":"minAstrologerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"4007:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1602,"name":"_minAstrologerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"4028:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4007:40:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1604,"nodeType":"ExpressionStatement","src":"4007:40:11"},{"expression":{"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1605,"name":"minVoterStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"4057:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1606,"name":"_minVoterStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"4073:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4057:30:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1608,"nodeType":"ExpressionStatement","src":"4057:30:11"},{"expression":{"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1609,"name":"maxVoterStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"4097:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1610,"name":"_maxVoterStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1574,"src":"4113:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4097:30:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1612,"nodeType":"ExpressionStatement","src":"4097:30:11"},{"expression":{"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1613,"name":"daoVotingDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"4137:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"32","id":1614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4157:9:11","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"2"},"src":"4137:29:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1616,"nodeType":"ExpressionStatement","src":"4137:29:11"},{"expression":{"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1617,"name":"astrologerRewardPercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"4199:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"353030","id":1618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4228:3:11","typeDescriptions":{"typeIdentifier":"t_rational_500_by_1","typeString":"int_const 500"},"value":"500"},"src":"4199:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1620,"nodeType":"ExpressionStatement","src":"4199:32:11"},{"expression":{"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1621,"name":"platformFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"4247:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"323030","id":1622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4271:3:11","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},"src":"4247:27:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1624,"nodeType":"ExpressionStatement","src":"4247:27:11"}]},"functionSelector":"e77fc7a4","id":1626,"implemented":true,"kind":"function","modifiers":[{"id":1577,"kind":"modifierInvocation","modifierName":{"id":1576,"name":"initializer","nameLocations":["3750:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":567,"src":"3750:11:11"},"nodeType":"ModifierInvocation","src":"3750:11:11"}],"name":"initialize","nameLocation":"3494:10:11","nodeType":"FunctionDefinition","parameters":{"id":1575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1562,"mutability":"mutable","name":"_astrologerManager","nameLocation":"3522:18:11","nodeType":"VariableDeclaration","scope":1626,"src":"3514:26:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1561,"name":"address","nodeType":"ElementaryTypeName","src":"3514:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1564,"mutability":"mutable","name":"_astroChartNFT","nameLocation":"3558:14:11","nodeType":"VariableDeclaration","scope":1626,"src":"3550:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1563,"name":"address","nodeType":"ElementaryTypeName","src":"3550:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1566,"mutability":"mutable","name":"_zodiacDAO","nameLocation":"3590:10:11","nodeType":"VariableDeclaration","scope":1626,"src":"3582:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1565,"name":"address","nodeType":"ElementaryTypeName","src":"3582:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1568,"mutability":"mutable","name":"_reputationScorer","nameLocation":"3618:17:11","nodeType":"VariableDeclaration","scope":1626,"src":"3610:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1567,"name":"address","nodeType":"ElementaryTypeName","src":"3610:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1570,"mutability":"mutable","name":"_minAstrologerStake","nameLocation":"3653:19:11","nodeType":"VariableDeclaration","scope":1626,"src":"3645:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1569,"name":"uint256","nodeType":"ElementaryTypeName","src":"3645:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1572,"mutability":"mutable","name":"_minVoterStake","nameLocation":"3690:14:11","nodeType":"VariableDeclaration","scope":1626,"src":"3682:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1571,"name":"uint256","nodeType":"ElementaryTypeName","src":"3682:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1574,"mutability":"mutable","name":"_maxVoterStake","nameLocation":"3722:14:11","nodeType":"VariableDeclaration","scope":1626,"src":"3714:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1573,"name":"uint256","nodeType":"ElementaryTypeName","src":"3714:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3504:238:11"},"returnParameters":{"id":1578,"nodeType":"ParameterList","parameters":[],"src":"3762:0:11"},"scope":2933,"src":"3485:802:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1768,"nodeType":"Block","src":"4683:1548:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1639,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4701:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4705:5:11","memberName":"value","nodeType":"MemberAccess","src":"4701:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1641,"name":"minAstrologerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"4714:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4701:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420617374726f6c6f676572207374616b65","id":1643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4734:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_e806bea1b349cb5c8358eb9ee41175912ef732ad3123d69bed55f98a8062ebe7","typeString":"literal_string \"Insufficient astrologer stake\""},"value":"Insufficient astrologer stake"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e806bea1b349cb5c8358eb9ee41175912ef732ad3123d69bed55f98a8062ebe7","typeString":"literal_string \"Insufficient astrologer stake\""}],"id":1638,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4693:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4693:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1645,"nodeType":"ExpressionStatement","src":"4693:73:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1649,"name":"_title","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"4790:6:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4784:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1647,"name":"bytes","nodeType":"ElementaryTypeName","src":"4784:5:11","typeDescriptions":{}}},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4784:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4798:6:11","memberName":"length","nodeType":"MemberAccess","src":"4784:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4807:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4784:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5469746c652063616e6e6f7420626520656d707479","id":1654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4810:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_698ca3c7081ed8237247ee65908074972d8604d6a2052a29e97091f6cc36ebf4","typeString":"literal_string \"Title cannot be empty\""},"value":"Title cannot be empty"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_698ca3c7081ed8237247ee65908074972d8604d6a2052a29e97091f6cc36ebf4","typeString":"literal_string \"Title cannot be empty\""}],"id":1646,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4776:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4776:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1656,"nodeType":"ExpressionStatement","src":"4776:58:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1660,"name":"_description","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"4858:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4852:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1658,"name":"bytes","nodeType":"ElementaryTypeName","src":"4852:5:11","typeDescriptions":{}}},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4852:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4872:6:11","memberName":"length","nodeType":"MemberAccess","src":"4852:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4881:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4852:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4465736372697074696f6e2063616e6e6f7420626520656d707479","id":1665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4884:29:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_5136780377cc231258678d13fe3ea7b31bc96a5f8a36a4c81f29820551bb6214","typeString":"literal_string \"Description cannot be empty\""},"value":"Description cannot be empty"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5136780377cc231258678d13fe3ea7b31bc96a5f8a36a4c81f29820551bb6214","typeString":"literal_string \"Description cannot be empty\""}],"id":1657,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4844:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4844:70:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1667,"nodeType":"ExpressionStatement","src":"4844:70:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1669,"name":"_deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"4932:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1670,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4944:5:11","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4950:9:11","memberName":"timestamp","nodeType":"MemberAccess","src":"4944:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4932:27:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"446561646c696e65206d75737420626520696e2074686520667574757265","id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4961:32:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3e7aa4aa0cbec9a64fb6a0b8b9ffd2b31f86995a33f516b85a302b0ba10930e","typeString":"literal_string \"Deadline must be in the future\""},"value":"Deadline must be in the future"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d3e7aa4aa0cbec9a64fb6a0b8b9ffd2b31f86995a33f516b85a302b0ba10930e","typeString":"literal_string \"Deadline must be in the future\""}],"id":1668,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4924:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4924:70:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1675,"nodeType":"ExpressionStatement","src":"4924:70:11"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1676,"name":"astrologerManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"5052:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5081:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1678,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5073:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1677,"name":"address","nodeType":"ElementaryTypeName","src":"5073:7:11","typeDescriptions":{}}},"id":1680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5073:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5052:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1694,"nodeType":"IfStatement","src":"5048:168:11","trueBody":{"id":1693,"nodeType":"Block","src":"5085:131:11","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":1687,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5166:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5170:6:11","memberName":"sender","nodeType":"MemberAccess","src":"5166:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":1684,"name":"astrologerManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"5126:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1683,"name":"IAstrologerManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"5107:18:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAstrologerManager_$3031_$","typeString":"type(contract IAstrologerManager)"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5107:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAstrologerManager_$3031","typeString":"contract IAstrologerManager"}},"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5145:20:11","memberName":"isAstrologerVerified","nodeType":"MemberAccess","referencedDeclaration":3023,"src":"5107:58:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5107:70:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"417374726f6c6f676572206e6f74207665726966696564","id":1690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5179:25:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_f2b69f472c51edd3f3560c488068a1e68bb0c0d7f90c4cbf6f3b1e1e8d03c902","typeString":"literal_string \"Astrologer not verified\""},"value":"Astrologer not verified"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f2b69f472c51edd3f3560c488068a1e68bb0c0d7f90c4cbf6f3b1e1e8d03c902","typeString":"literal_string \"Astrologer not verified\""}],"id":1682,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5099:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5099:106:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1692,"nodeType":"ExpressionStatement","src":"5099:106:11"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1695,"name":"_predictionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"5226:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":1697,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5241:9:11","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":1205,"src":"5226:24:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$1179_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$1179_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer)"}},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5226:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1699,"nodeType":"ExpressionStatement","src":"5226:26:11"},{"assignments":[1701],"declarations":[{"constant":false,"id":1701,"mutability":"mutable","name":"predictionId","nameLocation":"5270:12:11","nodeType":"VariableDeclaration","scope":1768,"src":"5262:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1700,"name":"uint256","nodeType":"ElementaryTypeName","src":"5262:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1705,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1702,"name":"_predictionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"5285:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":1703,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5300:7:11","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1191,"src":"5285:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1179_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1179_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5285:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5262:47:11"},{"expression":{"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1706,"name":"predictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"5320:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WorldPrediction_$1411_storage_$","typeString":"mapping(uint256 => struct WorldPredictionMarket.WorldPrediction storage ref)"}},"id":1708,"indexExpression":{"id":1707,"name":"predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"5332:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5320:25:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage","typeString":"struct WorldPredictionMarket.WorldPrediction storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1710,"name":"predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"5382:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1711,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5420:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5424:6:11","memberName":"sender","nodeType":"MemberAccess","src":"5420:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"id":1717,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5512:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5516:6:11","memberName":"sender","nodeType":"MemberAccess","src":"5512:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":1714,"name":"astrologerManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"5477:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1713,"name":"IAstrologerManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"5458:18:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAstrologerManager_$3031_$","typeString":"type(contract IAstrologerManager)"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5458:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAstrologerManager_$3031","typeString":"contract IAstrologerManager"}},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5496:15:11","memberName":"getAstrologerId","nodeType":"MemberAccess","referencedDeclaration":3030,"src":"5458:53:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5458:65:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1720,"name":"_title","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"5544:6:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1721,"name":"_description","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"5577:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1722,"name":"_deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"5613:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1723,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5653:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5657:5:11","memberName":"value","nodeType":"MemberAccess","src":"5653:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5693:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5723:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5752:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5780:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"66616c7365","id":1729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5807:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"66616c7365","id":1730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5835:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"66616c7365","id":1731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5871:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"expression":{"id":1732,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5901:5:11","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5907:9:11","memberName":"timestamp","nodeType":"MemberAccess","src":"5901:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":1734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5942:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1709,"name":"WorldPrediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"5348:15:11","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_WorldPrediction_$1411_storage_ptr_$","typeString":"type(struct WorldPredictionMarket.WorldPrediction storage pointer)"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["5378:2:11","5408:10:11","5444:12:11","5537:5:11","5564:11:11","5603:8:11","5636:15:11","5676:15:11","5708:13:11","5738:12:11","5767:11:11","5795:10:11","5826:7:11","5854:15:11","5890:9:11","5930:10:11"],"names":["id","astrologer","astrologerId","title","description","deadline","astrologerStake","totalVoterStake","yesVoterStake","noVoterStake","totalVoters","isResolved","outcome","daoVotingActive","createdAt","resolvedAt"],"nodeType":"FunctionCall","src":"5348:606:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_memory_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction memory"}},"src":"5320:634:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage","typeString":"struct WorldPredictionMarket.WorldPrediction storage ref"}},"id":1737,"nodeType":"ExpressionStatement","src":"5320:634:11"},{"expression":{"arguments":[{"id":1743,"name":"predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"6004:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1738,"name":"astrologerPredictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"5965:21:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":1741,"indexExpression":{"expression":{"id":1739,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5987:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5991:6:11","memberName":"sender","nodeType":"MemberAccess","src":"5987:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5965:33:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5999:4:11","memberName":"push","nodeType":"MemberAccess","src":"5965:38:11","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1745,"nodeType":"ExpressionStatement","src":"5965:52:11"},{"expression":{"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6027:34:11","subExpression":{"expression":{"id":1746,"name":"predictionStats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"6027:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_PredictionStats_$1436_storage","typeString":"struct WorldPredictionMarket.PredictionStats storage ref"}},"id":1748,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6043:16:11","memberName":"totalPredictions","nodeType":"MemberAccess","referencedDeclaration":1429,"src":"6027:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1750,"nodeType":"ExpressionStatement","src":"6027:34:11"},{"expression":{"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6071:35:11","subExpression":{"expression":{"id":1751,"name":"predictionStats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"6071:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_PredictionStats_$1436_storage","typeString":"struct WorldPredictionMarket.PredictionStats storage ref"}},"id":1753,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6087:17:11","memberName":"activePredictions","nodeType":"MemberAccess","referencedDeclaration":1431,"src":"6071:33:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1755,"nodeType":"ExpressionStatement","src":"6071:35:11"},{"eventCall":{"arguments":[{"id":1757,"name":"predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"6140:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1758,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6154:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6158:6:11","memberName":"sender","nodeType":"MemberAccess","src":"6154:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1760,"name":"_title","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"6166:6:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1761,"name":"_deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"6174:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1762,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6185:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6189:5:11","memberName":"value","nodeType":"MemberAccess","src":"6185:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1756,"name":"PredictionCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"6122:17:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,address,string memory,uint256,uint256)"}},"id":1764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6122:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1765,"nodeType":"EmitStatement","src":"6117:78:11"},{"expression":{"id":1766,"name":"predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"6212:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1637,"id":1767,"nodeType":"Return","src":"6205:19:11"}]},"documentation":{"id":1627,"nodeType":"StructuredDocumentation","src":"4293:225:11","text":" @notice Create a world prediction by staking FLOW\n @param _title The title of the prediction\n @param _description The detailed description\n @param _deadline The deadline for the prediction"},"functionSelector":"d472a570","id":1769,"implemented":true,"kind":"function","modifiers":[],"name":"createPrediction","nameLocation":"4532:16:11","nodeType":"FunctionDefinition","parameters":{"id":1634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1629,"mutability":"mutable","name":"_title","nameLocation":"4572:6:11","nodeType":"VariableDeclaration","scope":1769,"src":"4558:20:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1628,"name":"string","nodeType":"ElementaryTypeName","src":"4558:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1631,"mutability":"mutable","name":"_description","nameLocation":"4602:12:11","nodeType":"VariableDeclaration","scope":1769,"src":"4588:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1630,"name":"string","nodeType":"ElementaryTypeName","src":"4588:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1633,"mutability":"mutable","name":"_deadline","nameLocation":"4632:9:11","nodeType":"VariableDeclaration","scope":1769,"src":"4624:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1632,"name":"uint256","nodeType":"ElementaryTypeName","src":"4624:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4548:99:11"},"returnParameters":{"id":1637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1636,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1769,"src":"4674:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1635,"name":"uint256","nodeType":"ElementaryTypeName","src":"4674:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4673:9:11"},"scope":2933,"src":"4523:1708:11","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":1927,"nodeType":"Block","src":"6486:1477:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1778,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"6504:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6520:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6504:17:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1781,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"6525:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1782,"name":"_predictionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"6542:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":1783,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6557:7:11","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1191,"src":"6542:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1179_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1179_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6542:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6525:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6504:62:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642070726564696374696f6e204944","id":1787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6568:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_aa200ea2f36f3d7ec238a38cbd1984d2d2df09c69ef58fb1cf5e7b214b9d8a1e","typeString":"literal_string \"Invalid prediction ID\""},"value":"Invalid prediction ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aa200ea2f36f3d7ec238a38cbd1984d2d2df09c69ef58fb1cf5e7b214b9d8a1e","typeString":"literal_string \"Invalid prediction ID\""}],"id":1777,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6496:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6496:96:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1789,"nodeType":"ExpressionStatement","src":"6496:96:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1791,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6610:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6614:5:11","memberName":"value","nodeType":"MemberAccess","src":"6610:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1793,"name":"minVoterStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"6623:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6610:26:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420766f746572207374616b65","id":1795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6638:26:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_2e3d6c39044eb304362cc6bc25184db63691f9e4a10309d160e6306a9fcf5402","typeString":"literal_string \"Insufficient voter stake\""},"value":"Insufficient voter stake"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2e3d6c39044eb304362cc6bc25184db63691f9e4a10309d160e6306a9fcf5402","typeString":"literal_string \"Insufficient voter stake\""}],"id":1790,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6602:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6602:63:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1797,"nodeType":"ExpressionStatement","src":"6602:63:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1799,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6683:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6687:5:11","memberName":"value","nodeType":"MemberAccess","src":"6683:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1801,"name":"maxVoterStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"6696:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6683:26:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5374616b6520616d6f756e7420746f6f2068696768","id":1803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6711:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_18aae7b06d8cca1aad60c6e7a965c7cc9b1e7647c01b28f8bb3d06af3148b8c6","typeString":"literal_string \"Stake amount too high\""},"value":"Stake amount too high"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_18aae7b06d8cca1aad60c6e7a965c7cc9b1e7647c01b28f8bb3d06af3148b8c6","typeString":"literal_string \"Stake amount too high\""}],"id":1798,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6675:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6675:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1805,"nodeType":"ExpressionStatement","src":"6675:60:11"},{"assignments":[1808],"declarations":[{"constant":false,"id":1808,"mutability":"mutable","name":"prediction","nameLocation":"6778:10:11","nodeType":"VariableDeclaration","scope":1927,"src":"6754:34:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"},"typeName":{"id":1807,"nodeType":"UserDefinedTypeName","pathNode":{"id":1806,"name":"WorldPrediction","nameLocations":["6754:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":1411,"src":"6754:15:11"},"referencedDeclaration":1411,"src":"6754:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"}},"visibility":"internal"}],"id":1812,"initialValue":{"baseExpression":{"id":1809,"name":"predictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"6791:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WorldPrediction_$1411_storage_$","typeString":"mapping(uint256 => struct WorldPredictionMarket.WorldPrediction storage ref)"}},"id":1811,"indexExpression":{"id":1810,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"6803:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6791:26:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage","typeString":"struct WorldPredictionMarket.WorldPrediction storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6754:63:11"},{"expression":{"arguments":[{"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6835:22:11","subExpression":{"expression":{"id":1814,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"6836:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":1815,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6847:10:11","memberName":"isResolved","nodeType":"MemberAccess","referencedDeclaration":1402,"src":"6836:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50726564696374696f6e20616c7265616479207265736f6c766564","id":1817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6859:29:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_e5c7fd694202985aae764043fecb045b079bc8cf6282adc9f3fb74cc21cb2321","typeString":"literal_string \"Prediction already resolved\""},"value":"Prediction already resolved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e5c7fd694202985aae764043fecb045b079bc8cf6282adc9f3fb74cc21cb2321","typeString":"literal_string \"Prediction already resolved\""}],"id":1813,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6827:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6827:62:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1819,"nodeType":"ExpressionStatement","src":"6827:62:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1821,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6907:5:11","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6913:9:11","memberName":"timestamp","nodeType":"MemberAccess","src":"6907:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1823,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"6925:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":1824,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6936:8:11","memberName":"deadline","nodeType":"MemberAccess","referencedDeclaration":1390,"src":"6925:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6907:37:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"566f74696e6720706572696f6420656e646564","id":1826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6946:21:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_36ba02d776fd732ac627a72d2a4bcd896afdeadba8694171733d88c6775413e0","typeString":"literal_string \"Voting period ended\""},"value":"Voting period ended"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36ba02d776fd732ac627a72d2a4bcd896afdeadba8694171733d88c6775413e0","typeString":"literal_string \"Voting period ended\""}],"id":1820,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6899:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6899:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1828,"nodeType":"ExpressionStatement","src":"6899:69:11"},{"expression":{"arguments":[{"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6986:42:11","subExpression":{"expression":{"baseExpression":{"baseExpression":{"id":1830,"name":"votes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"6987:5:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Vote_$1420_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.Vote storage ref))"}},"id":1832,"indexExpression":{"id":1831,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"6993:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6987:20:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Vote_$1420_storage_$","typeString":"mapping(address => struct WorldPredictionMarket.Vote storage ref)"}},"id":1835,"indexExpression":{"expression":{"id":1833,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7008:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7012:6:11","memberName":"sender","nodeType":"MemberAccess","src":"7008:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6987:32:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage","typeString":"struct WorldPredictionMarket.Vote storage ref"}},"id":1836,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7020:8:11","memberName":"hasVoted","nodeType":"MemberAccess","referencedDeclaration":1413,"src":"6987:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416c726561647920766f746564","id":1838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7030:15:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6","typeString":"literal_string \"Already voted\""},"value":"Already voted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6","typeString":"literal_string \"Already voted\""}],"id":1829,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6978:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6978:68:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1840,"nodeType":"ExpressionStatement","src":"6978:68:11"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":1843,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7140:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7144:6:11","memberName":"sender","nodeType":"MemberAccess","src":"7140:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1842,"name":"hasAstroChartNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"7123:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7123:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d757374206f776e20417374726f4368617274204e465420746f20766f7465","id":1846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7153:33:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_b09899ee9c939607250b65aa50c67289069ee729c4119f9b45d26f1e535ee892","typeString":"literal_string \"Must own AstroChart NFT to vote\""},"value":"Must own AstroChart NFT to vote"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b09899ee9c939607250b65aa50c67289069ee729c4119f9b45d26f1e535ee892","typeString":"literal_string \"Must own AstroChart NFT to vote\""}],"id":1841,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7115:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7115:72:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1848,"nodeType":"ExpressionStatement","src":"7115:72:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1850,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7267:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7271:5:11","memberName":"value","nodeType":"MemberAccess","src":"7267:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":1852,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"7280:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":1853,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7291:15:11","memberName":"astrologerStake","nodeType":"MemberAccess","referencedDeclaration":1392,"src":"7280:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7267:39:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"566f746572207374616b65206d757374206265203e3d20617374726f6c6f676572207374616b65","id":1855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7308:41:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e0432039de1a758d5a3f1a47de7bcb737768a5a8d291e8cb024fef606e757c8","typeString":"literal_string \"Voter stake must be >= astrologer stake\""},"value":"Voter stake must be >= astrologer stake"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3e0432039de1a758d5a3f1a47de7bcb737768a5a8d291e8cb024fef606e757c8","typeString":"literal_string \"Voter stake must be >= astrologer stake\""}],"id":1849,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7259:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7259:91:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1857,"nodeType":"ExpressionStatement","src":"7259:91:11"},{"expression":{"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1858,"name":"votes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"7361:5:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Vote_$1420_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.Vote storage ref))"}},"id":1862,"indexExpression":{"id":1859,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"7367:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7361:20:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Vote_$1420_storage_$","typeString":"mapping(address => struct WorldPredictionMarket.Vote storage ref)"}},"id":1863,"indexExpression":{"expression":{"id":1860,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7382:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7386:6:11","memberName":"sender","nodeType":"MemberAccess","src":"7382:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7361:32:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage","typeString":"struct WorldPredictionMarket.Vote storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"74727565","id":1865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7425:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1866,"name":"_vote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"7449:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":1867,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7481:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7485:5:11","memberName":"value","nodeType":"MemberAccess","src":"7481:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":1869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7519:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1864,"name":"Vote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"7396:4:11","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Vote_$1420_storage_ptr_$","typeString":"type(struct WorldPredictionMarket.Vote storage pointer)"}},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["7415:8:11","7443:4:11","7468:11:11","7504:13:11"],"names":["hasVoted","vote","stakeAmount","rewardClaimed"],"nodeType":"FunctionCall","src":"7396:139:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_memory_ptr","typeString":"struct WorldPredictionMarket.Vote memory"}},"src":"7361:174:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage","typeString":"struct WorldPredictionMarket.Vote storage ref"}},"id":1872,"nodeType":"ExpressionStatement","src":"7361:174:11"},{"expression":{"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1873,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"7546:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":1875,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7557:15:11","memberName":"totalVoterStake","nodeType":"MemberAccess","referencedDeclaration":1394,"src":"7546:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":1876,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7576:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7580:5:11","memberName":"value","nodeType":"MemberAccess","src":"7576:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7546:39:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1879,"nodeType":"ExpressionStatement","src":"7546:39:11"},{"expression":{"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7595:24:11","subExpression":{"expression":{"id":1880,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"7595:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":1882,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7606:11:11","memberName":"totalVoters","nodeType":"MemberAccess","referencedDeclaration":1400,"src":"7595:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1884,"nodeType":"ExpressionStatement","src":"7595:24:11"},{"condition":{"id":1885,"name":"_vote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"7642:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1901,"nodeType":"Block","src":"7717:61:11","statements":[{"expression":{"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1894,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"7731:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":1896,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7742:12:11","memberName":"noVoterStake","nodeType":"MemberAccess","referencedDeclaration":1398,"src":"7731:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":1897,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7758:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7762:5:11","memberName":"value","nodeType":"MemberAccess","src":"7758:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7731:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1900,"nodeType":"ExpressionStatement","src":"7731:36:11"}]},"id":1902,"nodeType":"IfStatement","src":"7638:140:11","trueBody":{"id":1893,"nodeType":"Block","src":"7649:62:11","statements":[{"expression":{"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1886,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"7663:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":1888,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7674:13:11","memberName":"yesVoterStake","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"7663:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":1889,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7691:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7695:5:11","memberName":"value","nodeType":"MemberAccess","src":"7691:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7663:37:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1892,"nodeType":"ExpressionStatement","src":"7663:37:11"}]}},{"expression":{"arguments":[{"id":1908,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"7823:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1903,"name":"userVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"7796:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":1906,"indexExpression":{"expression":{"id":1904,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7806:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7810:6:11","memberName":"sender","nodeType":"MemberAccess","src":"7806:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7796:21:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7818:4:11","memberName":"push","nodeType":"MemberAccess","src":"7796:26:11","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":1909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7796:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1910,"nodeType":"ExpressionStatement","src":"7796:41:11"},{"expression":{"id":1916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1911,"name":"predictionStats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"7847:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_PredictionStats_$1436_storage","typeString":"struct WorldPredictionMarket.PredictionStats storage ref"}},"id":1913,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7863:11:11","memberName":"totalVolume","nodeType":"MemberAccess","referencedDeclaration":1435,"src":"7847:27:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":1914,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7878:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7882:5:11","memberName":"value","nodeType":"MemberAccess","src":"7878:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7847:40:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1917,"nodeType":"ExpressionStatement","src":"7847:40:11"},{"eventCall":{"arguments":[{"id":1919,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"7912:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1920,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7927:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7931:6:11","memberName":"sender","nodeType":"MemberAccess","src":"7927:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1922,"name":"_vote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"7939:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":1923,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7946:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7950:5:11","memberName":"value","nodeType":"MemberAccess","src":"7946:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1918,"name":"VoteCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"7903:8:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_bool_$_t_uint256_$returns$__$","typeString":"function (uint256,address,bool,uint256)"}},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7903:53:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1926,"nodeType":"EmitStatement","src":"7898:58:11"}]},"documentation":{"id":1770,"nodeType":"StructuredDocumentation","src":"6237:166:11","text":" @notice Vote on a prediction (requires AstroChart NFT)\n @param _predictionId The prediction ID\n @param _vote True for YES, false for NO"},"functionSelector":"700c8367","id":1928,"implemented":true,"kind":"function","modifiers":[],"name":"voteOnPrediction","nameLocation":"6417:16:11","nodeType":"FunctionDefinition","parameters":{"id":1775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1772,"mutability":"mutable","name":"_predictionId","nameLocation":"6442:13:11","nodeType":"VariableDeclaration","scope":1928,"src":"6434:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1771,"name":"uint256","nodeType":"ElementaryTypeName","src":"6434:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1774,"mutability":"mutable","name":"_vote","nameLocation":"6462:5:11","nodeType":"VariableDeclaration","scope":1928,"src":"6457:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1773,"name":"bool","nodeType":"ElementaryTypeName","src":"6457:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6433:35:11"},"returnParameters":{"id":1776,"nodeType":"ParameterList","parameters":[],"src":"6486:0:11"},"scope":2933,"src":"6408:1555:11","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":1991,"nodeType":"Block","src":"8145:570:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1935,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"8163:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8179:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8163:17:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1938,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"8184:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1939,"name":"_predictionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"8201:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":1940,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8216:7:11","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1191,"src":"8201:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1179_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1179_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8201:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8184:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8163:62:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642070726564696374696f6e204944","id":1944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8227:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_aa200ea2f36f3d7ec238a38cbd1984d2d2df09c69ef58fb1cf5e7b214b9d8a1e","typeString":"literal_string \"Invalid prediction ID\""},"value":"Invalid prediction ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aa200ea2f36f3d7ec238a38cbd1984d2d2df09c69ef58fb1cf5e7b214b9d8a1e","typeString":"literal_string \"Invalid prediction ID\""}],"id":1934,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8155:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8155:96:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1946,"nodeType":"ExpressionStatement","src":"8155:96:11"},{"assignments":[1949],"declarations":[{"constant":false,"id":1949,"mutability":"mutable","name":"prediction","nameLocation":"8294:10:11","nodeType":"VariableDeclaration","scope":1991,"src":"8270:34:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"},"typeName":{"id":1948,"nodeType":"UserDefinedTypeName","pathNode":{"id":1947,"name":"WorldPrediction","nameLocations":["8270:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":1411,"src":"8270:15:11"},"referencedDeclaration":1411,"src":"8270:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"}},"visibility":"internal"}],"id":1953,"initialValue":{"baseExpression":{"id":1950,"name":"predictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"8307:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WorldPrediction_$1411_storage_$","typeString":"mapping(uint256 => struct WorldPredictionMarket.WorldPrediction storage ref)"}},"id":1952,"indexExpression":{"id":1951,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"8319:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8307:26:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage","typeString":"struct WorldPredictionMarket.WorldPrediction storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8270:63:11"},{"expression":{"arguments":[{"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8351:22:11","subExpression":{"expression":{"id":1955,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"8352:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":1956,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8363:10:11","memberName":"isResolved","nodeType":"MemberAccess","referencedDeclaration":1402,"src":"8352:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50726564696374696f6e20616c7265616479207265736f6c766564","id":1958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8375:29:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_e5c7fd694202985aae764043fecb045b079bc8cf6282adc9f3fb74cc21cb2321","typeString":"literal_string \"Prediction already resolved\""},"value":"Prediction already resolved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e5c7fd694202985aae764043fecb045b079bc8cf6282adc9f3fb74cc21cb2321","typeString":"literal_string \"Prediction already resolved\""}],"id":1954,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8343:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8343:62:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1960,"nodeType":"ExpressionStatement","src":"8343:62:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1962,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8423:5:11","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8429:9:11","memberName":"timestamp","nodeType":"MemberAccess","src":"8423:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":1964,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"8442:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":1965,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8453:8:11","memberName":"deadline","nodeType":"MemberAccess","referencedDeclaration":1390,"src":"8442:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8423:38:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50726564696374696f6e20646561646c696e65206e6f742072656163686564","id":1967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8463:33:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_44b9aa865ba15e81bdd3728cd6ea47c14d3c33ba13db48fb6d8d6d87956ad29f","typeString":"literal_string \"Prediction deadline not reached\""},"value":"Prediction deadline not reached"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_44b9aa865ba15e81bdd3728cd6ea47c14d3c33ba13db48fb6d8d6d87956ad29f","typeString":"literal_string \"Prediction deadline not reached\""}],"id":1961,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8415:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8415:82:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1969,"nodeType":"ExpressionStatement","src":"8415:82:11"},{"expression":{"arguments":[{"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8515:27:11","subExpression":{"expression":{"id":1971,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"8516:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":1972,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8527:15:11","memberName":"daoVotingActive","nodeType":"MemberAccess","referencedDeclaration":1406,"src":"8516:26:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"44414f20766f74696e6720616c726561647920616374697665","id":1974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8544:27:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_596954e29975c7f51ea1f19196d3d678c07733a66a0e74a6bb6ba203e5485b6d","typeString":"literal_string \"DAO voting already active\""},"value":"DAO voting already active"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_596954e29975c7f51ea1f19196d3d678c07733a66a0e74a6bb6ba203e5485b6d","typeString":"literal_string \"DAO voting already active\""}],"id":1970,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8507:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8507:65:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1976,"nodeType":"ExpressionStatement","src":"8507:65:11"},{"expression":{"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1977,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"8583:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":1979,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8594:15:11","memberName":"daoVotingActive","nodeType":"MemberAccess","referencedDeclaration":1406,"src":"8583:26:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8612:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"8583:33:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1982,"nodeType":"ExpressionStatement","src":"8583:33:11"},{"eventCall":{"arguments":[{"id":1984,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"8657:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1985,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8672:5:11","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8678:9:11","memberName":"timestamp","nodeType":"MemberAccess","src":"8672:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1987,"name":"daoVotingDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"8690:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8672:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1983,"name":"DAOVotingStarted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"8640:16:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8640:68:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1990,"nodeType":"EmitStatement","src":"8635:73:11"}]},"documentation":{"id":1929,"nodeType":"StructuredDocumentation","src":"7969:115:11","text":" @notice Start DAO voting after prediction deadline\n @param _predictionId The prediction ID"},"functionSelector":"886dbdf9","id":1992,"implemented":true,"kind":"function","modifiers":[],"name":"startDAOVoting","nameLocation":"8098:14:11","nodeType":"FunctionDefinition","parameters":{"id":1932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1931,"mutability":"mutable","name":"_predictionId","nameLocation":"8121:13:11","nodeType":"VariableDeclaration","scope":1992,"src":"8113:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1930,"name":"uint256","nodeType":"ElementaryTypeName","src":"8113:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8112:23:11"},"returnParameters":{"id":1933,"nodeType":"ParameterList","parameters":[],"src":"8145:0:11"},"scope":2933,"src":"8089:626:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2090,"nodeType":"Block","src":"9048:928:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2003,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"9066:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9082:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9066:17:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2006,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"9087:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2007,"name":"_predictionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"9104:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":2008,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9119:7:11","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1191,"src":"9104:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1179_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1179_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9104:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9087:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9066:62:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642070726564696374696f6e204944","id":2012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9130:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_aa200ea2f36f3d7ec238a38cbd1984d2d2df09c69ef58fb1cf5e7b214b9d8a1e","typeString":"literal_string \"Invalid prediction ID\""},"value":"Invalid prediction ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aa200ea2f36f3d7ec238a38cbd1984d2d2df09c69ef58fb1cf5e7b214b9d8a1e","typeString":"literal_string \"Invalid prediction ID\""}],"id":2002,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9058:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9058:96:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2014,"nodeType":"ExpressionStatement","src":"9058:96:11"},{"assignments":[2017],"declarations":[{"constant":false,"id":2017,"mutability":"mutable","name":"prediction","nameLocation":"9197:10:11","nodeType":"VariableDeclaration","scope":2090,"src":"9173:34:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"},"typeName":{"id":2016,"nodeType":"UserDefinedTypeName","pathNode":{"id":2015,"name":"WorldPrediction","nameLocations":["9173:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":1411,"src":"9173:15:11"},"referencedDeclaration":1411,"src":"9173:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"}},"visibility":"internal"}],"id":2021,"initialValue":{"baseExpression":{"id":2018,"name":"predictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"9210:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WorldPrediction_$1411_storage_$","typeString":"mapping(uint256 => struct WorldPredictionMarket.WorldPrediction storage ref)"}},"id":2020,"indexExpression":{"id":2019,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"9222:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9210:26:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage","typeString":"struct WorldPredictionMarket.WorldPrediction storage ref"}},"nodeType":"VariableDeclarationStatement","src":"9173:63:11"},{"expression":{"arguments":[{"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9254:22:11","subExpression":{"expression":{"id":2023,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"9255:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2024,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9266:10:11","memberName":"isResolved","nodeType":"MemberAccess","referencedDeclaration":1402,"src":"9255:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50726564696374696f6e20616c7265616479207265736f6c766564","id":2026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9278:29:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_e5c7fd694202985aae764043fecb045b079bc8cf6282adc9f3fb74cc21cb2321","typeString":"literal_string \"Prediction already resolved\""},"value":"Prediction already resolved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e5c7fd694202985aae764043fecb045b079bc8cf6282adc9f3fb74cc21cb2321","typeString":"literal_string \"Prediction already resolved\""}],"id":2022,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9246:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9246:62:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2028,"nodeType":"ExpressionStatement","src":"9246:62:11"},{"expression":{"arguments":[{"expression":{"id":2030,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"9326:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2031,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9337:15:11","memberName":"daoVotingActive","nodeType":"MemberAccess","referencedDeclaration":1406,"src":"9326:26:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"44414f20766f74696e67206e6f7420616374697665","id":2032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9354:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_23481764773651837b693c0116eb1867a15e4af0b37eaa952dfe02da7ca67c1a","typeString":"literal_string \"DAO voting not active\""},"value":"DAO voting not active"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_23481764773651837b693c0116eb1867a15e4af0b37eaa952dfe02da7ca67c1a","typeString":"literal_string \"DAO voting not active\""}],"id":2029,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9318:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9318:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2034,"nodeType":"ExpressionStatement","src":"9318:60:11"},{"expression":{"arguments":[{"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9396:45:11","subExpression":{"expression":{"baseExpression":{"baseExpression":{"id":2036,"name":"daoVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"9397:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_DAOVote_$1427_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.DAOVote storage ref))"}},"id":2038,"indexExpression":{"id":2037,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"9406:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9397:23:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_DAOVote_$1427_storage_$","typeString":"mapping(address => struct WorldPredictionMarket.DAOVote storage ref)"}},"id":2041,"indexExpression":{"expression":{"id":2039,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9421:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9425:6:11","memberName":"sender","nodeType":"MemberAccess","src":"9421:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9397:35:11","typeDescriptions":{"typeIdentifier":"t_struct$_DAOVote_$1427_storage","typeString":"struct WorldPredictionMarket.DAOVote storage ref"}},"id":2042,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9433:8:11","memberName":"hasVoted","nodeType":"MemberAccess","referencedDeclaration":1422,"src":"9397:44:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416c726561647920766f746564","id":2044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9443:15:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6","typeString":"literal_string \"Already voted\""},"value":"Already voted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_512fc59044d4f0722f9346c450973ffe8aac7aa1142e536739987018593c53b6","typeString":"literal_string \"Already voted\""}],"id":2035,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9388:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9388:71:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2046,"nodeType":"ExpressionStatement","src":"9388:71:11"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":2049,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9573:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9577:6:11","memberName":"sender","nodeType":"MemberAccess","src":"9573:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2048,"name":"hasAstroChartNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"9556:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9556:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420612044414f206d656d626572","id":2052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9586:18:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8fc0753689749684a9e551425bc1a5c3140528f7a45ea255ec00e51d97963b5","typeString":"literal_string \"Not a DAO member\""},"value":"Not a DAO member"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c8fc0753689749684a9e551425bc1a5c3140528f7a45ea255ec00e51d97963b5","typeString":"literal_string \"Not a DAO member\""}],"id":2047,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9548:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9548:57:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2054,"nodeType":"ExpressionStatement","src":"9548:57:11"},{"expression":{"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2055,"name":"daoVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"9616:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_DAOVote_$1427_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.DAOVote storage ref))"}},"id":2059,"indexExpression":{"id":2056,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"9625:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9616:23:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_DAOVote_$1427_storage_$","typeString":"mapping(address => struct WorldPredictionMarket.DAOVote storage ref)"}},"id":2060,"indexExpression":{"expression":{"id":2057,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9640:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9644:6:11","memberName":"sender","nodeType":"MemberAccess","src":"9640:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9616:35:11","typeDescriptions":{"typeIdentifier":"t_struct$_DAOVote_$1427_storage","typeString":"struct WorldPredictionMarket.DAOVote storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"74727565","id":2062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9686:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2063,"name":"_outcome","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"9710:8:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2064,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"9741:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2061,"name":"DAOVote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1427,"src":"9654:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_DAOVote_$1427_storage_ptr_$","typeString":"type(struct WorldPredictionMarket.DAOVote storage pointer)"}},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["9676:8:11","9704:4:11","9732:7:11"],"names":["hasVoted","vote","tokenId"],"nodeType":"FunctionCall","src":"9654:106:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DAOVote_$1427_memory_ptr","typeString":"struct WorldPredictionMarket.DAOVote memory"}},"src":"9616:144:11","typeDescriptions":{"typeIdentifier":"t_struct$_DAOVote_$1427_storage","typeString":"struct WorldPredictionMarket.DAOVote storage ref"}},"id":2067,"nodeType":"ExpressionStatement","src":"9616:144:11"},{"condition":{"id":2068,"name":"_outcome","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"9775:8:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2080,"nodeType":"Block","src":"9844:52:11","statements":[{"expression":{"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9858:27:11","subExpression":{"baseExpression":{"id":2075,"name":"daoNoVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"9858:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2077,"indexExpression":{"id":2076,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"9869:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9858:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2079,"nodeType":"ExpressionStatement","src":"9858:27:11"}]},"id":2081,"nodeType":"IfStatement","src":"9771:125:11","trueBody":{"id":2074,"nodeType":"Block","src":"9785:53:11","statements":[{"expression":{"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9799:28:11","subExpression":{"baseExpression":{"id":2069,"name":"daoYesVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"9799:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2071,"indexExpression":{"id":2070,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"9811:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9799:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2073,"nodeType":"ExpressionStatement","src":"9799:28:11"}]}},{"eventCall":{"arguments":[{"id":2083,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"9923:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2084,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9938:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9942:6:11","memberName":"sender","nodeType":"MemberAccess","src":"9938:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2086,"name":"_outcome","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"9950:8:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2087,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"9960:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2082,"name":"DAOVoteCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"9911:11:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_bool_$_t_uint256_$returns$__$","typeString":"function (uint256,address,bool,uint256)"}},"id":2088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2089,"nodeType":"EmitStatement","src":"9906:63:11"}]},"documentation":{"id":1993,"nodeType":"StructuredDocumentation","src":"8721:236:11","text":" @notice DAO members vote on prediction outcome\n @param _predictionId The prediction ID\n @param _outcome True if prediction was correct, false if incorrect\n @param _tokenId The DAO token ID for voting"},"functionSelector":"84ebaae1","id":2091,"implemented":true,"kind":"function","modifiers":[],"name":"castDAOVote","nameLocation":"8971:11:11","nodeType":"FunctionDefinition","parameters":{"id":2000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1995,"mutability":"mutable","name":"_predictionId","nameLocation":"8991:13:11","nodeType":"VariableDeclaration","scope":2091,"src":"8983:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1994,"name":"uint256","nodeType":"ElementaryTypeName","src":"8983:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1997,"mutability":"mutable","name":"_outcome","nameLocation":"9011:8:11","nodeType":"VariableDeclaration","scope":2091,"src":"9006:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1996,"name":"bool","nodeType":"ElementaryTypeName","src":"9006:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1999,"mutability":"mutable","name":"_tokenId","nameLocation":"9029:8:11","nodeType":"VariableDeclaration","scope":2091,"src":"9021:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1998,"name":"uint256","nodeType":"ElementaryTypeName","src":"9021:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8982:56:11"},"returnParameters":{"id":2001,"nodeType":"ParameterList","parameters":[],"src":"9048:0:11"},"scope":2933,"src":"8962:1014:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2223,"nodeType":"Block","src":"10156:1350:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2098,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"10174:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10190:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10174:17:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2101,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"10195:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2102,"name":"_predictionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"10212:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":2103,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10227:7:11","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1191,"src":"10212:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1179_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1179_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10212:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10195:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10174:62:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642070726564696374696f6e204944","id":2107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10238:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_aa200ea2f36f3d7ec238a38cbd1984d2d2df09c69ef58fb1cf5e7b214b9d8a1e","typeString":"literal_string \"Invalid prediction ID\""},"value":"Invalid prediction ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aa200ea2f36f3d7ec238a38cbd1984d2d2df09c69ef58fb1cf5e7b214b9d8a1e","typeString":"literal_string \"Invalid prediction ID\""}],"id":2097,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10166:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10166:96:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2109,"nodeType":"ExpressionStatement","src":"10166:96:11"},{"assignments":[2112],"declarations":[{"constant":false,"id":2112,"mutability":"mutable","name":"prediction","nameLocation":"10305:10:11","nodeType":"VariableDeclaration","scope":2223,"src":"10281:34:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"},"typeName":{"id":2111,"nodeType":"UserDefinedTypeName","pathNode":{"id":2110,"name":"WorldPrediction","nameLocations":["10281:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":1411,"src":"10281:15:11"},"referencedDeclaration":1411,"src":"10281:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"}},"visibility":"internal"}],"id":2116,"initialValue":{"baseExpression":{"id":2113,"name":"predictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"10318:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WorldPrediction_$1411_storage_$","typeString":"mapping(uint256 => struct WorldPredictionMarket.WorldPrediction storage ref)"}},"id":2115,"indexExpression":{"id":2114,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"10330:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10318:26:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage","typeString":"struct WorldPredictionMarket.WorldPrediction storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10281:63:11"},{"expression":{"arguments":[{"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10362:22:11","subExpression":{"expression":{"id":2118,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"10363:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2119,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10374:10:11","memberName":"isResolved","nodeType":"MemberAccess","referencedDeclaration":1402,"src":"10363:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50726564696374696f6e20616c7265616479207265736f6c766564","id":2121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10386:29:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_e5c7fd694202985aae764043fecb045b079bc8cf6282adc9f3fb74cc21cb2321","typeString":"literal_string \"Prediction already resolved\""},"value":"Prediction already resolved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e5c7fd694202985aae764043fecb045b079bc8cf6282adc9f3fb74cc21cb2321","typeString":"literal_string \"Prediction already resolved\""}],"id":2117,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10354:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10354:62:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2123,"nodeType":"ExpressionStatement","src":"10354:62:11"},{"expression":{"arguments":[{"expression":{"id":2125,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"10434:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2126,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10445:15:11","memberName":"daoVotingActive","nodeType":"MemberAccess","referencedDeclaration":1406,"src":"10434:26:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"44414f20766f74696e67206e6f742073746172746564","id":2127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10462:24:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_3f69aa035c2300465b3b3ac77ec1e7c2defcf6ec4a77f25a01644bb392a08ccb","typeString":"literal_string \"DAO voting not started\""},"value":"DAO voting not started"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3f69aa035c2300465b3b3ac77ec1e7c2defcf6ec4a77f25a01644bb392a08ccb","typeString":"literal_string \"DAO voting not started\""}],"id":2124,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10426:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10426:61:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2129,"nodeType":"ExpressionStatement","src":"10426:61:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2131,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10505:5:11","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10511:9:11","memberName":"timestamp","nodeType":"MemberAccess","src":"10505:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2133,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"10524:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2134,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10535:8:11","memberName":"deadline","nodeType":"MemberAccess","referencedDeclaration":1390,"src":"10524:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2135,"name":"daoVotingDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"10546:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:39:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10505:58:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"44414f20766f74696e6720706572696f64206e6f7420656e646564","id":2138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10565:29:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_891360af1abbee9addc57e5951a6b396a9e19bddf2027a7e0f3b17d7cc19be76","typeString":"literal_string \"DAO voting period not ended\""},"value":"DAO voting period not ended"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_891360af1abbee9addc57e5951a6b396a9e19bddf2027a7e0f3b17d7cc19be76","typeString":"literal_string \"DAO voting period not ended\""}],"id":2130,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10497:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10497:98:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2140,"nodeType":"ExpressionStatement","src":"10497:98:11"},{"assignments":[2142],"declarations":[{"constant":false,"id":2142,"mutability":"mutable","name":"totalDAOVotes","nameLocation":"10662:13:11","nodeType":"VariableDeclaration","scope":2223,"src":"10654:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2141,"name":"uint256","nodeType":"ElementaryTypeName","src":"10654:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2150,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2143,"name":"daoYesVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"10678:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2145,"indexExpression":{"id":2144,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"10690:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10678:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"baseExpression":{"id":2146,"name":"daoNoVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"10707:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2148,"indexExpression":{"id":2147,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"10718:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10707:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10678:54:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10654:78:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2152,"name":"totalDAOVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"10750:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10766:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10750:17:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f2044414f20766f7465732063617374","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10769:19:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_55242650e6363316d9bf96eaf027f9437d9fd733b148b9346e7feecabeb8dc14","typeString":"literal_string \"No DAO votes cast\""},"value":"No DAO votes cast"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_55242650e6363316d9bf96eaf027f9437d9fd733b148b9346e7feecabeb8dc14","typeString":"literal_string \"No DAO votes cast\""}],"id":2151,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10742:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10742:47:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2157,"nodeType":"ExpressionStatement","src":"10742:47:11"},{"assignments":[2159],"declarations":[{"constant":false,"id":2159,"mutability":"mutable","name":"outcome","nameLocation":"10813:7:11","nodeType":"VariableDeclaration","scope":2223,"src":"10808:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2158,"name":"bool","nodeType":"ElementaryTypeName","src":"10808:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2167,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2160,"name":"daoYesVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"10823:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2162,"indexExpression":{"id":2161,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"10835:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10823:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"baseExpression":{"id":2163,"name":"daoNoVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"10852:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2165,"indexExpression":{"id":2164,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"10863:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10852:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10823:54:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"10808:69:11"},{"expression":{"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2168,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"10896:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2170,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10907:10:11","memberName":"isResolved","nodeType":"MemberAccess","referencedDeclaration":1402,"src":"10896:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10920:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"10896:28:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2173,"nodeType":"ExpressionStatement","src":"10896:28:11"},{"expression":{"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2174,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"10934:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2176,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10945:7:11","memberName":"outcome","nodeType":"MemberAccess","referencedDeclaration":1404,"src":"10934:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2177,"name":"outcome","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"10955:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10934:28:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2179,"nodeType":"ExpressionStatement","src":"10934:28:11"},{"expression":{"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2180,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"10972:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2182,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10983:10:11","memberName":"resolvedAt","nodeType":"MemberAccess","referencedDeclaration":1410,"src":"10972:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2183,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10996:5:11","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11002:9:11","memberName":"timestamp","nodeType":"MemberAccess","src":"10996:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10972:39:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2186,"nodeType":"ExpressionStatement","src":"10972:39:11"},{"expression":{"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"11030:35:11","subExpression":{"expression":{"id":2187,"name":"predictionStats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"11030:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_PredictionStats_$1436_storage","typeString":"struct WorldPredictionMarket.PredictionStats storage ref"}},"id":2189,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11046:17:11","memberName":"activePredictions","nodeType":"MemberAccess","referencedDeclaration":1431,"src":"11030:33:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2191,"nodeType":"ExpressionStatement","src":"11030:35:11"},{"expression":{"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"11075:37:11","subExpression":{"expression":{"id":2192,"name":"predictionStats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"11075:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_PredictionStats_$1436_storage","typeString":"struct WorldPredictionMarket.PredictionStats storage ref"}},"id":2194,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11091:19:11","memberName":"resolvedPredictions","nodeType":"MemberAccess","referencedDeclaration":1433,"src":"11075:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2196,"nodeType":"ExpressionStatement","src":"11075:37:11"},{"assignments":[2198],"declarations":[{"constant":false,"id":2198,"mutability":"mutable","name":"astrologerReward","nameLocation":"11175:16:11","nodeType":"VariableDeclaration","scope":2223,"src":"11167:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2197,"name":"uint256","nodeType":"ElementaryTypeName","src":"11167:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2203,"initialValue":{"arguments":[{"id":2200,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"11212:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2201,"name":"outcome","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"11227:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2199,"name":"distributeRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"11194:17:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint256,bool) returns (uint256)"}},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11194:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11167:68:11"},{"expression":{"arguments":[{"expression":{"id":2205,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"11310:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2206,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11321:10:11","memberName":"astrologer","nodeType":"MemberAccess","referencedDeclaration":1382,"src":"11310:21:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2207,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"11333:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2208,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11344:12:11","memberName":"astrologerId","nodeType":"MemberAccess","referencedDeclaration":1384,"src":"11333:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2209,"name":"outcome","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"11358:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2204,"name":"updateAstrologerReputation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2552,"src":"11283:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,uint256,bool)"}},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11283:83:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2211,"nodeType":"ExpressionStatement","src":"11283:83:11"},{"eventCall":{"arguments":[{"id":2213,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"11401:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2214,"name":"outcome","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"11416:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2215,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"11425:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2216,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11436:15:11","memberName":"totalVoterStake","nodeType":"MemberAccess","referencedDeclaration":1394,"src":"11425:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":2217,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"11454:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11465:15:11","memberName":"astrologerStake","nodeType":"MemberAccess","referencedDeclaration":1392,"src":"11454:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11425:55:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2220,"name":"astrologerReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"11482:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2212,"name":"PredictionResolved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"11382:18:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_bool_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,bool,uint256,uint256)"}},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11382:117:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2222,"nodeType":"EmitStatement","src":"11377:122:11"}]},"documentation":{"id":2092,"nodeType":"StructuredDocumentation","src":"9982:110:11","text":" @notice Resolve prediction based on DAO votes\n @param _predictionId The prediction ID"},"functionSelector":"e69fe3dc","id":2224,"implemented":true,"kind":"function","modifiers":[],"name":"resolvePrediction","nameLocation":"10106:17:11","nodeType":"FunctionDefinition","parameters":{"id":2095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2094,"mutability":"mutable","name":"_predictionId","nameLocation":"10132:13:11","nodeType":"VariableDeclaration","scope":2224,"src":"10124:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2093,"name":"uint256","nodeType":"ElementaryTypeName","src":"10124:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10123:23:11"},"returnParameters":{"id":2096,"nodeType":"ParameterList","parameters":[],"src":"10156:0:11"},"scope":2933,"src":"10097:1409:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2314,"nodeType":"Block","src":"11680:737:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2231,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"11698:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11714:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11698:17:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2234,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"11719:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2235,"name":"_predictionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"11736:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":2236,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11751:7:11","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1191,"src":"11736:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1179_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1179_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11736:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11719:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11698:62:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642070726564696374696f6e204944","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11762:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_aa200ea2f36f3d7ec238a38cbd1984d2d2df09c69ef58fb1cf5e7b214b9d8a1e","typeString":"literal_string \"Invalid prediction ID\""},"value":"Invalid prediction ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aa200ea2f36f3d7ec238a38cbd1984d2d2df09c69ef58fb1cf5e7b214b9d8a1e","typeString":"literal_string \"Invalid prediction ID\""}],"id":2230,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11690:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11690:96:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2242,"nodeType":"ExpressionStatement","src":"11690:96:11"},{"assignments":[2245],"declarations":[{"constant":false,"id":2245,"mutability":"mutable","name":"prediction","nameLocation":"11829:10:11","nodeType":"VariableDeclaration","scope":2314,"src":"11805:34:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"},"typeName":{"id":2244,"nodeType":"UserDefinedTypeName","pathNode":{"id":2243,"name":"WorldPrediction","nameLocations":["11805:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":1411,"src":"11805:15:11"},"referencedDeclaration":1411,"src":"11805:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"}},"visibility":"internal"}],"id":2249,"initialValue":{"baseExpression":{"id":2246,"name":"predictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"11842:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WorldPrediction_$1411_storage_$","typeString":"mapping(uint256 => struct WorldPredictionMarket.WorldPrediction storage ref)"}},"id":2248,"indexExpression":{"id":2247,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"11854:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11842:26:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage","typeString":"struct WorldPredictionMarket.WorldPrediction storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11805:63:11"},{"expression":{"arguments":[{"expression":{"id":2251,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"11886:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2252,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11897:10:11","memberName":"isResolved","nodeType":"MemberAccess","referencedDeclaration":1402,"src":"11886:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50726564696374696f6e206e6f74207265736f6c766564","id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11909:25:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_382bda24046a8d0af5605bb825d7eec7bed8aa46697cda2a990b33f7d72d9cdd","typeString":"literal_string \"Prediction not resolved\""},"value":"Prediction not resolved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_382bda24046a8d0af5605bb825d7eec7bed8aa46697cda2a990b33f7d72d9cdd","typeString":"literal_string \"Prediction not resolved\""}],"id":2250,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11878:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11878:57:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2255,"nodeType":"ExpressionStatement","src":"11878:57:11"},{"assignments":[2258],"declarations":[{"constant":false,"id":2258,"mutability":"mutable","name":"vote","nameLocation":"11967:4:11","nodeType":"VariableDeclaration","scope":2314,"src":"11954:17:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage_ptr","typeString":"struct WorldPredictionMarket.Vote"},"typeName":{"id":2257,"nodeType":"UserDefinedTypeName","pathNode":{"id":2256,"name":"Vote","nameLocations":["11954:4:11"],"nodeType":"IdentifierPath","referencedDeclaration":1420,"src":"11954:4:11"},"referencedDeclaration":1420,"src":"11954:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage_ptr","typeString":"struct WorldPredictionMarket.Vote"}},"visibility":"internal"}],"id":2265,"initialValue":{"baseExpression":{"baseExpression":{"id":2259,"name":"votes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"11974:5:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Vote_$1420_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.Vote storage ref))"}},"id":2261,"indexExpression":{"id":2260,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"11980:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11974:20:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Vote_$1420_storage_$","typeString":"mapping(address => struct WorldPredictionMarket.Vote storage ref)"}},"id":2264,"indexExpression":{"expression":{"id":2262,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11995:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11999:6:11","memberName":"sender","nodeType":"MemberAccess","src":"11995:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11974:32:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage","typeString":"struct WorldPredictionMarket.Vote storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11954:52:11"},{"expression":{"arguments":[{"expression":{"id":2267,"name":"vote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"12024:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage_ptr","typeString":"struct WorldPredictionMarket.Vote storage pointer"}},"id":2268,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12029:8:11","memberName":"hasVoted","nodeType":"MemberAccess","referencedDeclaration":1413,"src":"12024:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f20766f746520666f756e64","id":2269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12039:15:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_d6131f382f49656f9d2ea1f970e53c16ce56c65bc624a1259379c03224a20d2f","typeString":"literal_string \"No vote found\""},"value":"No vote found"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d6131f382f49656f9d2ea1f970e53c16ce56c65bc624a1259379c03224a20d2f","typeString":"literal_string \"No vote found\""}],"id":2266,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12016:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12016:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2271,"nodeType":"ExpressionStatement","src":"12016:39:11"},{"expression":{"arguments":[{"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12073:19:11","subExpression":{"expression":{"id":2273,"name":"vote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"12074:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage_ptr","typeString":"struct WorldPredictionMarket.Vote storage pointer"}},"id":2274,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12079:13:11","memberName":"rewardClaimed","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"12074:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"52657761726420616c726561647920636c61696d6564","id":2276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12094:24:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_59cbfee2a24523c1fd613f6298f3ecd1131edd49036e244040e570087e53f19c","typeString":"literal_string \"Reward already claimed\""},"value":"Reward already claimed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_59cbfee2a24523c1fd613f6298f3ecd1131edd49036e244040e570087e53f19c","typeString":"literal_string \"Reward already claimed\""}],"id":2272,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12065:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12065:54:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2278,"nodeType":"ExpressionStatement","src":"12065:54:11"},{"assignments":[2280],"declarations":[{"constant":false,"id":2280,"mutability":"mutable","name":"rewardAmount","nameLocation":"12138:12:11","nodeType":"VariableDeclaration","scope":2314,"src":"12130:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2279,"name":"uint256","nodeType":"ElementaryTypeName","src":"12130:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2286,"initialValue":{"arguments":[{"id":2282,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"12174:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2283,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12189:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12193:6:11","memberName":"sender","nodeType":"MemberAccess","src":"12189:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2281,"name":"calculateVoterReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"12153:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_address_$returns$_t_uint256_$","typeString":"function (uint256,address) view returns (uint256)"}},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12153:47:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12130:70:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2287,"name":"rewardAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"12214:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12229:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12214:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2313,"nodeType":"IfStatement","src":"12210:201:11","trueBody":{"id":2312,"nodeType":"Block","src":"12232:179:11","statements":[{"expression":{"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2290,"name":"vote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"12246:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage_ptr","typeString":"struct WorldPredictionMarket.Vote storage pointer"}},"id":2292,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12251:13:11","memberName":"rewardClaimed","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"12246:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12267:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"12246:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2295,"nodeType":"ExpressionStatement","src":"12246:25:11"},{"expression":{"arguments":[{"id":2302,"name":"rewardAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"12314:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":2298,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12293:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12297:6:11","memberName":"sender","nodeType":"MemberAccess","src":"12293:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12285:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2296,"name":"address","nodeType":"ElementaryTypeName","src":"12285:8:11","stateMutability":"payable","typeDescriptions":{}}},"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12285:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12305:8:11","memberName":"transfer","nodeType":"MemberAccess","src":"12285:28:11","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12285:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2304,"nodeType":"ExpressionStatement","src":"12285:42:11"},{"eventCall":{"arguments":[{"id":2306,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"12360:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2307,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12375:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12379:6:11","memberName":"sender","nodeType":"MemberAccess","src":"12375:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2309,"name":"rewardAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"12387:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2305,"name":"RewardClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"12346:13:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256)"}},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12346:54:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2311,"nodeType":"EmitStatement","src":"12341:59:11"}]}}]},"documentation":{"id":2225,"nodeType":"StructuredDocumentation","src":"11512:110:11","text":" @notice Claim rewards for correct predictions\n @param _predictionId The prediction ID"},"functionSelector":"ae169a50","id":2315,"implemented":true,"kind":"function","modifiers":[],"name":"claimReward","nameLocation":"11636:11:11","nodeType":"FunctionDefinition","parameters":{"id":2228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2227,"mutability":"mutable","name":"_predictionId","nameLocation":"11656:13:11","nodeType":"VariableDeclaration","scope":2315,"src":"11648:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2226,"name":"uint256","nodeType":"ElementaryTypeName","src":"11648:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11647:23:11"},"returnParameters":{"id":2229,"nodeType":"ParameterList","parameters":[],"src":"11680:0:11"},"scope":2933,"src":"11627:790:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2383,"nodeType":"Block","src":"12592:827:11","statements":[{"assignments":[2327],"declarations":[{"constant":false,"id":2327,"mutability":"mutable","name":"prediction","nameLocation":"12626:10:11","nodeType":"VariableDeclaration","scope":2383,"src":"12602:34:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"},"typeName":{"id":2326,"nodeType":"UserDefinedTypeName","pathNode":{"id":2325,"name":"WorldPrediction","nameLocations":["12602:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":1411,"src":"12602:15:11"},"referencedDeclaration":1411,"src":"12602:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"}},"visibility":"internal"}],"id":2331,"initialValue":{"baseExpression":{"id":2328,"name":"predictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"12639:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WorldPrediction_$1411_storage_$","typeString":"mapping(uint256 => struct WorldPredictionMarket.WorldPrediction storage ref)"}},"id":2330,"indexExpression":{"id":2329,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"12651:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12639:26:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage","typeString":"struct WorldPredictionMarket.WorldPrediction storage ref"}},"nodeType":"VariableDeclarationStatement","src":"12602:63:11"},{"assignments":[2333],"declarations":[{"constant":false,"id":2333,"mutability":"mutable","name":"totalPot","nameLocation":"12692:8:11","nodeType":"VariableDeclaration","scope":2383,"src":"12684:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2332,"name":"uint256","nodeType":"ElementaryTypeName","src":"12684:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2339,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2334,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"12703:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2335,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12714:15:11","memberName":"totalVoterStake","nodeType":"MemberAccess","referencedDeclaration":1394,"src":"12703:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":2336,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"12732:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2337,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12743:15:11","memberName":"astrologerStake","nodeType":"MemberAccess","referencedDeclaration":1392,"src":"12732:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12703:55:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12684:74:11"},{"assignments":[2341],"declarations":[{"constant":false,"id":2341,"mutability":"mutable","name":"platformFee","nameLocation":"12776:11:11","nodeType":"VariableDeclaration","scope":2383,"src":"12768:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2340,"name":"uint256","nodeType":"ElementaryTypeName","src":"12768:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2348,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2342,"name":"totalPot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"12791:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2343,"name":"platformFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"12802:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12791:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2345,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12790:34:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":2346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12827:5:11","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"12790:42:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12768:64:11"},{"assignments":[2350],"declarations":[{"constant":false,"id":2350,"mutability":"mutable","name":"distributablePot","nameLocation":"12850:16:11","nodeType":"VariableDeclaration","scope":2383,"src":"12842:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2349,"name":"uint256","nodeType":"ElementaryTypeName","src":"12842:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2354,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2351,"name":"totalPot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"12869:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2352,"name":"platformFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"12880:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12869:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12842:49:11"},{"assignments":[2356],"declarations":[{"constant":false,"id":2356,"mutability":"mutable","name":"astrologerReward","nameLocation":"12918:16:11","nodeType":"VariableDeclaration","scope":2383,"src":"12910:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2355,"name":"uint256","nodeType":"ElementaryTypeName","src":"12910:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2358,"initialValue":{"hexValue":"30","id":2357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12937:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12910:28:11"},{"condition":{"id":2359,"name":"outcome","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"12961:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2379,"nodeType":"Block","src":"13207:164:11","statements":[]},"id":2380,"nodeType":"IfStatement","src":"12957:414:11","trueBody":{"id":2378,"nodeType":"Block","src":"12970:231:11","statements":[{"expression":{"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2360,"name":"astrologerReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"13045:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2361,"name":"distributablePot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2350,"src":"13065:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2362,"name":"astrologerRewardPercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"13084:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13065:45:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2364,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13064:47:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13114:5:11","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"13064:55:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13045:74:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2368,"nodeType":"ExpressionStatement","src":"13045:74:11"},{"expression":{"arguments":[{"id":2375,"name":"astrologerReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"13173:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":2371,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"13141:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2372,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13152:10:11","memberName":"astrologer","nodeType":"MemberAccess","referencedDeclaration":1382,"src":"13141:21:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13133:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2369,"name":"address","nodeType":"ElementaryTypeName","src":"13133:8:11","stateMutability":"payable","typeDescriptions":{}}},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13133:30:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13164:8:11","memberName":"transfer","nodeType":"MemberAccess","src":"13133:39:11","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13133:57:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2377,"nodeType":"ExpressionStatement","src":"13133:57:11"}]}},{"expression":{"id":2381,"name":"astrologerReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"13396:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2324,"id":2382,"nodeType":"Return","src":"13389:23:11"}]},"documentation":{"id":2316,"nodeType":"StructuredDocumentation","src":"12423:73:11","text":" @notice Distribute rewards after prediction resolution"},"id":2384,"implemented":true,"kind":"function","modifiers":[],"name":"distributeRewards","nameLocation":"12510:17:11","nodeType":"FunctionDefinition","parameters":{"id":2321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2318,"mutability":"mutable","name":"_predictionId","nameLocation":"12536:13:11","nodeType":"VariableDeclaration","scope":2384,"src":"12528:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2317,"name":"uint256","nodeType":"ElementaryTypeName","src":"12528:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2320,"mutability":"mutable","name":"outcome","nameLocation":"12556:7:11","nodeType":"VariableDeclaration","scope":2384,"src":"12551:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2319,"name":"bool","nodeType":"ElementaryTypeName","src":"12551:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12527:37:11"},"returnParameters":{"id":2324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2384,"src":"12583:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2322,"name":"uint256","nodeType":"ElementaryTypeName","src":"12583:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12582:9:11"},"scope":2933,"src":"12501:918:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2504,"nodeType":"Block","src":"13585:1111:11","statements":[{"assignments":[2396],"declarations":[{"constant":false,"id":2396,"mutability":"mutable","name":"prediction","nameLocation":"13619:10:11","nodeType":"VariableDeclaration","scope":2504,"src":"13595:34:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"},"typeName":{"id":2395,"nodeType":"UserDefinedTypeName","pathNode":{"id":2394,"name":"WorldPrediction","nameLocations":["13595:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":1411,"src":"13595:15:11"},"referencedDeclaration":1411,"src":"13595:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"}},"visibility":"internal"}],"id":2400,"initialValue":{"baseExpression":{"id":2397,"name":"predictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"13632:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WorldPrediction_$1411_storage_$","typeString":"mapping(uint256 => struct WorldPredictionMarket.WorldPrediction storage ref)"}},"id":2399,"indexExpression":{"id":2398,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"13644:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13632:26:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage","typeString":"struct WorldPredictionMarket.WorldPrediction storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13595:63:11"},{"assignments":[2403],"declarations":[{"constant":false,"id":2403,"mutability":"mutable","name":"vote","nameLocation":"13681:4:11","nodeType":"VariableDeclaration","scope":2504,"src":"13668:17:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage_ptr","typeString":"struct WorldPredictionMarket.Vote"},"typeName":{"id":2402,"nodeType":"UserDefinedTypeName","pathNode":{"id":2401,"name":"Vote","nameLocations":["13668:4:11"],"nodeType":"IdentifierPath","referencedDeclaration":1420,"src":"13668:4:11"},"referencedDeclaration":1420,"src":"13668:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage_ptr","typeString":"struct WorldPredictionMarket.Vote"}},"visibility":"internal"}],"id":2409,"initialValue":{"baseExpression":{"baseExpression":{"id":2404,"name":"votes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"13688:5:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Vote_$1420_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.Vote storage ref))"}},"id":2406,"indexExpression":{"id":2405,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"13694:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13688:20:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Vote_$1420_storage_$","typeString":"mapping(address => struct WorldPredictionMarket.Vote storage ref)"}},"id":2408,"indexExpression":{"id":2407,"name":"_voter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"13709:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13688:28:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage","typeString":"struct WorldPredictionMarket.Vote storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13668:48:11"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"13739:22:11","subExpression":{"expression":{"id":2410,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"13740:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2411,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13751:10:11","memberName":"isResolved","nodeType":"MemberAccess","referencedDeclaration":1402,"src":"13740:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"13765:14:11","subExpression":{"expression":{"id":2413,"name":"vote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"13766:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage_ptr","typeString":"struct WorldPredictionMarket.Vote storage pointer"}},"id":2414,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13771:8:11","memberName":"hasVoted","nodeType":"MemberAccess","referencedDeclaration":1413,"src":"13766:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13739:40:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"expression":{"id":2417,"name":"vote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"13783:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage_ptr","typeString":"struct WorldPredictionMarket.Vote storage pointer"}},"id":2418,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13788:13:11","memberName":"rewardClaimed","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"13783:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13739:62:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2423,"nodeType":"IfStatement","src":"13735:101:11","trueBody":{"id":2422,"nodeType":"Block","src":"13803:33:11","statements":[{"expression":{"hexValue":"30","id":2420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13824:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2393,"id":2421,"nodeType":"Return","src":"13817:8:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2424,"name":"vote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"13893:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage_ptr","typeString":"struct WorldPredictionMarket.Vote storage pointer"}},"id":2425,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13898:4:11","memberName":"vote","nodeType":"MemberAccess","referencedDeclaration":1415,"src":"13893:9:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2426,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"13906:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2427,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13917:7:11","memberName":"outcome","nodeType":"MemberAccess","referencedDeclaration":1404,"src":"13906:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13893:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2432,"nodeType":"IfStatement","src":"13889:70:11","trueBody":{"id":2431,"nodeType":"Block","src":"13926:33:11","statements":[{"expression":{"hexValue":"30","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13947:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2393,"id":2430,"nodeType":"Return","src":"13940:8:11"}]}},{"assignments":[2434],"declarations":[{"constant":false,"id":2434,"mutability":"mutable","name":"totalPot","nameLocation":"13977:8:11","nodeType":"VariableDeclaration","scope":2504,"src":"13969:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2433,"name":"uint256","nodeType":"ElementaryTypeName","src":"13969:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2440,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2435,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"13988:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2436,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13999:15:11","memberName":"totalVoterStake","nodeType":"MemberAccess","referencedDeclaration":1394,"src":"13988:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":2437,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"14017:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2438,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14028:15:11","memberName":"astrologerStake","nodeType":"MemberAccess","referencedDeclaration":1392,"src":"14017:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13988:55:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13969:74:11"},{"assignments":[2442],"declarations":[{"constant":false,"id":2442,"mutability":"mutable","name":"platformFee","nameLocation":"14061:11:11","nodeType":"VariableDeclaration","scope":2504,"src":"14053:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2441,"name":"uint256","nodeType":"ElementaryTypeName","src":"14053:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2449,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2443,"name":"totalPot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2434,"src":"14076:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2444,"name":"platformFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"14087:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14076:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2446,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14075:34:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":2447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14112:5:11","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"14075:42:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14053:64:11"},{"assignments":[2451],"declarations":[{"constant":false,"id":2451,"mutability":"mutable","name":"distributablePot","nameLocation":"14135:16:11","nodeType":"VariableDeclaration","scope":2504,"src":"14127:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2450,"name":"uint256","nodeType":"ElementaryTypeName","src":"14127:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2455,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2452,"name":"totalPot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2434,"src":"14154:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2453,"name":"platformFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"14165:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14154:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14127:49:11"},{"assignments":[2457],"declarations":[{"constant":false,"id":2457,"mutability":"mutable","name":"astrologerReward","nameLocation":"14203:16:11","nodeType":"VariableDeclaration","scope":2504,"src":"14195:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2456,"name":"uint256","nodeType":"ElementaryTypeName","src":"14195:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2459,"initialValue":{"hexValue":"30","id":2458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14222:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14195:28:11"},{"condition":{"expression":{"id":2460,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"14237:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2461,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14248:7:11","memberName":"outcome","nodeType":"MemberAccess","referencedDeclaration":1404,"src":"14237:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2472,"nodeType":"IfStatement","src":"14233:123:11","trueBody":{"id":2471,"nodeType":"Block","src":"14257:99:11","statements":[{"expression":{"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2462,"name":"astrologerReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"14271:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2463,"name":"distributablePot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"14291:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2464,"name":"astrologerRewardPercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"14310:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14291:45:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2466,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14290:47:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":2467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14340:5:11","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"14290:55:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14271:74:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2470,"nodeType":"ExpressionStatement","src":"14271:74:11"}]}},{"assignments":[2474],"declarations":[{"constant":false,"id":2474,"mutability":"mutable","name":"voterRewardPool","nameLocation":"14382:15:11","nodeType":"VariableDeclaration","scope":2504,"src":"14374:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2473,"name":"uint256","nodeType":"ElementaryTypeName","src":"14374:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2478,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2475,"name":"distributablePot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"14400:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2476,"name":"astrologerReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"14419:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14400:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14374:61:11"},{"assignments":[2480],"declarations":[{"constant":false,"id":2480,"mutability":"mutable","name":"winningStake","nameLocation":"14453:12:11","nodeType":"VariableDeclaration","scope":2504,"src":"14445:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2479,"name":"uint256","nodeType":"ElementaryTypeName","src":"14445:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2488,"initialValue":{"condition":{"expression":{"id":2481,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"14468:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2482,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14479:7:11","memberName":"outcome","nodeType":"MemberAccess","referencedDeclaration":1404,"src":"14468:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"id":2485,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"14516:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2486,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14527:12:11","memberName":"noVoterStake","nodeType":"MemberAccess","referencedDeclaration":1398,"src":"14516:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14468:71:11","trueExpression":{"expression":{"id":2483,"name":"prediction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"14489:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction storage pointer"}},"id":2484,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14500:13:11","memberName":"yesVoterStake","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"14489:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14445:94:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2489,"name":"winningStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"14562:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14577:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14562:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2501,"nodeType":"IfStatement","src":"14558:105:11","trueBody":{"id":2500,"nodeType":"Block","src":"14580:83:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2492,"name":"vote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"14602:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage_ptr","typeString":"struct WorldPredictionMarket.Vote storage pointer"}},"id":2493,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14607:11:11","memberName":"stakeAmount","nodeType":"MemberAccess","referencedDeclaration":1417,"src":"14602:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2494,"name":"voterRewardPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"14621:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14602:34:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2496,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14601:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2497,"name":"winningStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"14640:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14601:51:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2393,"id":2499,"nodeType":"Return","src":"14594:58:11"}]}},{"expression":{"hexValue":"30","id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14688:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2393,"id":2503,"nodeType":"Return","src":"14681:8:11"}]},"documentation":{"id":2385,"nodeType":"StructuredDocumentation","src":"13425:56:11","text":" @notice Calculate voter reward amount"},"functionSelector":"5aa76be0","id":2505,"implemented":true,"kind":"function","modifiers":[],"name":"calculateVoterReward","nameLocation":"13495:20:11","nodeType":"FunctionDefinition","parameters":{"id":2390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2387,"mutability":"mutable","name":"_predictionId","nameLocation":"13524:13:11","nodeType":"VariableDeclaration","scope":2505,"src":"13516:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2386,"name":"uint256","nodeType":"ElementaryTypeName","src":"13516:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2389,"mutability":"mutable","name":"_voter","nameLocation":"13547:6:11","nodeType":"VariableDeclaration","scope":2505,"src":"13539:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2388,"name":"address","nodeType":"ElementaryTypeName","src":"13539:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13515:39:11"},"returnParameters":{"id":2393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2505,"src":"13576:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2391,"name":"uint256","nodeType":"ElementaryTypeName","src":"13576:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13575:9:11"},"scope":2933,"src":"13486:1210:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2551,"nodeType":"Block","src":"14897:363:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2515,"name":"reputationScorer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"14911:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14939:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14931:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2516,"name":"address","nodeType":"ElementaryTypeName","src":"14931:7:11","typeDescriptions":{}}},"id":2519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14931:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14911:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2530,"nodeType":"IfStatement","src":"14907:158:11","trueBody":{"id":2529,"nodeType":"Block","src":"14943:122:11","statements":[{"expression":{"arguments":[{"id":2525,"name":"_astrologer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"15029:11:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2526,"name":"_wasCorrect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"15042:11:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[{"id":2522,"name":"reputationScorer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"14975:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2521,"name":"IReputationScorer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"14957:17:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IReputationScorer_$3075_$","typeString":"type(contract IReputationScorer)"}},"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14957:35:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IReputationScorer_$3075","typeString":"contract IReputationScorer"}},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14993:35:11","memberName":"updateReputationFromWorldPrediction","nodeType":"MemberAccess","referencedDeclaration":3040,"src":"14957:71:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool) external"}},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14957:97:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2528,"nodeType":"ExpressionStatement","src":"14957:97:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2531,"name":"astrologerManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"15087:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15116:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15108:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2532,"name":"address","nodeType":"ElementaryTypeName","src":"15108:7:11","typeDescriptions":{}}},"id":2535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15108:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15087:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2537,"name":"_astrologerId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"15122:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15138:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15122:17:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15087:52:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2550,"nodeType":"IfStatement","src":"15083:171:11","trueBody":{"id":2549,"nodeType":"Block","src":"15141:113:11","statements":[{"expression":{"arguments":[{"id":2545,"name":"_astrologerId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"15216:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2546,"name":"_wasCorrect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"15231:11:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[{"id":2542,"name":"astrologerManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"15174:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2541,"name":"IAstrologerManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"15155:18:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAstrologerManager_$3031_$","typeString":"type(contract IAstrologerManager)"}},"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15155:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAstrologerManager_$3031","typeString":"contract IAstrologerManager"}},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15193:22:11","memberName":"recordPredictionResult","nodeType":"MemberAccess","referencedDeclaration":3009,"src":"15155:60:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_bool_$returns$__$","typeString":"function (uint256,bool) external"}},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15155:88:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2548,"nodeType":"ExpressionStatement","src":"15155:88:11"}]}}]},"documentation":{"id":2506,"nodeType":"StructuredDocumentation","src":"14702:83:11","text":" @notice Update astrologer reputation based on prediction outcome"},"id":2552,"implemented":true,"kind":"function","modifiers":[],"name":"updateAstrologerReputation","nameLocation":"14799:26:11","nodeType":"FunctionDefinition","parameters":{"id":2513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2508,"mutability":"mutable","name":"_astrologer","nameLocation":"14834:11:11","nodeType":"VariableDeclaration","scope":2552,"src":"14826:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2507,"name":"address","nodeType":"ElementaryTypeName","src":"14826:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2510,"mutability":"mutable","name":"_astrologerId","nameLocation":"14855:13:11","nodeType":"VariableDeclaration","scope":2552,"src":"14847:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2509,"name":"uint256","nodeType":"ElementaryTypeName","src":"14847:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2512,"mutability":"mutable","name":"_wasCorrect","nameLocation":"14875:11:11","nodeType":"VariableDeclaration","scope":2552,"src":"14870:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2511,"name":"bool","nodeType":"ElementaryTypeName","src":"14870:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14825:62:11"},"returnParameters":{"id":2514,"nodeType":"ParameterList","parameters":[],"src":"14897:0:11"},"scope":2933,"src":"14790:470:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2589,"nodeType":"Block","src":"15400:308:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2560,"name":"astroChartNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"15414:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15439:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15431:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2561,"name":"address","nodeType":"ElementaryTypeName","src":"15431:7:11","typeDescriptions":{}}},"id":2564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15431:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15414:27:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2568,"nodeType":"IfStatement","src":"15410:44:11","trueBody":{"expression":{"hexValue":"74727565","id":2566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15450:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2559,"id":2567,"nodeType":"Return","src":"15443:11:11"}},{"clauses":[{"block":{"id":2582,"nodeType":"Block","src":"15615:43:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2578,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"15636:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15646:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15636:11:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2559,"id":2581,"nodeType":"Return","src":"15629:18:11"}]},"errorName":"","id":2583,"nodeType":"TryCatchClause","parameters":{"id":2577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2576,"mutability":"mutable","name":"balance","nameLocation":"15606:7:11","nodeType":"VariableDeclaration","scope":2583,"src":"15598:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2575,"name":"uint256","nodeType":"ElementaryTypeName","src":"15598:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15597:17:11"},"src":"15589:69:11"},{"block":{"id":2586,"nodeType":"Block","src":"15665:37:11","statements":[{"expression":{"hexValue":"66616c7365","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15686:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2559,"id":2585,"nodeType":"Return","src":"15679:12:11"}]},"errorName":"","id":2587,"nodeType":"TryCatchClause","src":"15659:43:11"}],"externalCall":{"arguments":[{"id":2573,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"15582:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":2570,"name":"astroChartNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"15557:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2569,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"15549:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2948_$","typeString":"type(contract IERC721)"}},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15549:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$2948","typeString":"contract IERC721"}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15572:9:11","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2940,"src":"15549:32:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15549:39:11","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2588,"nodeType":"TryStatement","src":"15545:157:11"}]},"documentation":{"id":2553,"nodeType":"StructuredDocumentation","src":"15266:59:11","text":" @notice Check if user has AstroChart NFT"},"id":2590,"implemented":true,"kind":"function","modifiers":[],"name":"hasAstroChartNFT","nameLocation":"15339:16:11","nodeType":"FunctionDefinition","parameters":{"id":2556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2555,"mutability":"mutable","name":"_user","nameLocation":"15364:5:11","nodeType":"VariableDeclaration","scope":2590,"src":"15356:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2554,"name":"address","nodeType":"ElementaryTypeName","src":"15356:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15355:15:11"},"returnParameters":{"id":2559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2590,"src":"15394:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2557,"name":"bool","nodeType":"ElementaryTypeName","src":"15394:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15393:6:11"},"scope":2933,"src":"15330:378:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2633,"nodeType":"Block","src":"15856:327:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2600,"name":"zodiacDAO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"15870:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15891:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2602,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15883:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2601,"name":"address","nodeType":"ElementaryTypeName","src":"15883:7:11","typeDescriptions":{}}},"id":2604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15883:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15870:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2612,"nodeType":"IfStatement","src":"15866:57:11","trueBody":{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2606,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"15902:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15906:6:11","memberName":"sender","nodeType":"MemberAccess","src":"15902:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2608,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"15916:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15916:7:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15902:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2599,"id":2611,"nodeType":"Return","src":"15895:28:11"}},{"clauses":[{"block":{"id":2626,"nodeType":"Block","src":"16087:46:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2622,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2620,"src":"16108:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2623,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"16117:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16108:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2599,"id":2625,"nodeType":"Return","src":"16101:21:11"}]},"errorName":"","id":2627,"nodeType":"TryCatchClause","parameters":{"id":2621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2620,"mutability":"mutable","name":"owner","nameLocation":"16080:5:11","nodeType":"VariableDeclaration","scope":2627,"src":"16072:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2619,"name":"address","nodeType":"ElementaryTypeName","src":"16072:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16071:15:11"},"src":"16063:70:11"},{"block":{"id":2630,"nodeType":"Block","src":"16140:37:11","statements":[{"expression":{"hexValue":"66616c7365","id":2628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16161:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2599,"id":2629,"nodeType":"Return","src":"16154:12:11"}]},"errorName":"","id":2631,"nodeType":"TryCatchClause","src":"16134:43:11"}],"externalCall":{"arguments":[{"id":2617,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"16053:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2614,"name":"zodiacDAO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"16034:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2613,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"16026:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2948_$","typeString":"type(contract IERC721)"}},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16026:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$2948","typeString":"contract IERC721"}},"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16045:7:11","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2947,"src":"16026:26:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16026:36:11","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2632,"nodeType":"TryStatement","src":"16022:155:11"}]},"documentation":{"id":2591,"nodeType":"StructuredDocumentation","src":"15714:54:11","text":" @notice Check if user is DAO member"},"id":2634,"implemented":true,"kind":"function","modifiers":[],"name":"isDAOMember","nameLocation":"15782:11:11","nodeType":"FunctionDefinition","parameters":{"id":2596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2593,"mutability":"mutable","name":"_user","nameLocation":"15802:5:11","nodeType":"VariableDeclaration","scope":2634,"src":"15794:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2592,"name":"address","nodeType":"ElementaryTypeName","src":"15794:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2595,"mutability":"mutable","name":"_tokenId","nameLocation":"15817:8:11","nodeType":"VariableDeclaration","scope":2634,"src":"15809:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2594,"name":"uint256","nodeType":"ElementaryTypeName","src":"15809:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15793:33:11"},"returnParameters":{"id":2599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2598,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2634,"src":"15850:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2597,"name":"bool","nodeType":"ElementaryTypeName","src":"15850:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15849:6:11"},"scope":2933,"src":"15773:410:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2659,"nodeType":"Block","src":"16304:156:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2643,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"16322:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16338:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16322:17:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2646,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"16343:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2647,"name":"_predictionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"16360:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":2648,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16375:7:11","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1191,"src":"16360:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1179_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1179_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16360:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16343:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16322:62:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642070726564696374696f6e204944","id":2652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16386:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_aa200ea2f36f3d7ec238a38cbd1984d2d2df09c69ef58fb1cf5e7b214b9d8a1e","typeString":"literal_string \"Invalid prediction ID\""},"value":"Invalid prediction ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aa200ea2f36f3d7ec238a38cbd1984d2d2df09c69ef58fb1cf5e7b214b9d8a1e","typeString":"literal_string \"Invalid prediction ID\""}],"id":2642,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16314:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16314:96:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2654,"nodeType":"ExpressionStatement","src":"16314:96:11"},{"expression":{"baseExpression":{"id":2655,"name":"predictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"16427:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WorldPrediction_$1411_storage_$","typeString":"mapping(uint256 => struct WorldPredictionMarket.WorldPrediction storage ref)"}},"id":2657,"indexExpression":{"id":2656,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"16439:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16427:26:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage","typeString":"struct WorldPredictionMarket.WorldPrediction storage ref"}},"functionReturnParameters":2641,"id":2658,"nodeType":"Return","src":"16420:33:11"}]},"functionSelector":"fe83bece","id":2660,"implemented":true,"kind":"function","modifiers":[],"name":"getPrediction","nameLocation":"16220:13:11","nodeType":"FunctionDefinition","parameters":{"id":2637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2636,"mutability":"mutable","name":"_predictionId","nameLocation":"16242:13:11","nodeType":"VariableDeclaration","scope":2660,"src":"16234:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2635,"name":"uint256","nodeType":"ElementaryTypeName","src":"16234:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16233:23:11"},"returnParameters":{"id":2641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2640,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2660,"src":"16280:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_memory_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"},"typeName":{"id":2639,"nodeType":"UserDefinedTypeName","pathNode":{"id":2638,"name":"WorldPrediction","nameLocations":["16280:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":1411,"src":"16280:15:11"},"referencedDeclaration":1411,"src":"16280:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage_ptr","typeString":"struct WorldPredictionMarket.WorldPrediction"}},"visibility":"internal"}],"src":"16279:24:11"},"scope":2933,"src":"16211:249:11","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2676,"nodeType":"Block","src":"16558:52:11","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":2670,"name":"votes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"16575:5:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Vote_$1420_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.Vote storage ref))"}},"id":2672,"indexExpression":{"id":2671,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"16581:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16575:20:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Vote_$1420_storage_$","typeString":"mapping(address => struct WorldPredictionMarket.Vote storage ref)"}},"id":2674,"indexExpression":{"id":2673,"name":"_voter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"16596:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16575:28:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage","typeString":"struct WorldPredictionMarket.Vote storage ref"}},"functionReturnParameters":2669,"id":2675,"nodeType":"Return","src":"16568:35:11"}]},"functionSelector":"bc3f931f","id":2677,"implemented":true,"kind":"function","modifiers":[],"name":"getVote","nameLocation":"16475:7:11","nodeType":"FunctionDefinition","parameters":{"id":2665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2662,"mutability":"mutable","name":"_predictionId","nameLocation":"16491:13:11","nodeType":"VariableDeclaration","scope":2677,"src":"16483:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2661,"name":"uint256","nodeType":"ElementaryTypeName","src":"16483:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2664,"mutability":"mutable","name":"_voter","nameLocation":"16514:6:11","nodeType":"VariableDeclaration","scope":2677,"src":"16506:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2663,"name":"address","nodeType":"ElementaryTypeName","src":"16506:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16482:39:11"},"returnParameters":{"id":2669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2677,"src":"16545:11:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_memory_ptr","typeString":"struct WorldPredictionMarket.Vote"},"typeName":{"id":2667,"nodeType":"UserDefinedTypeName","pathNode":{"id":2666,"name":"Vote","nameLocations":["16545:4:11"],"nodeType":"IdentifierPath","referencedDeclaration":1420,"src":"16545:4:11"},"referencedDeclaration":1420,"src":"16545:4:11","typeDescriptions":{"typeIdentifier":"t_struct$_Vote_$1420_storage_ptr","typeString":"struct WorldPredictionMarket.Vote"}},"visibility":"internal"}],"src":"16544:13:11"},"scope":2933,"src":"16466:144:11","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2693,"nodeType":"Block","src":"16714:55:11","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":2687,"name":"daoVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"16731:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_DAOVote_$1427_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.DAOVote storage ref))"}},"id":2689,"indexExpression":{"id":2688,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"16740:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16731:23:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_DAOVote_$1427_storage_$","typeString":"mapping(address => struct WorldPredictionMarket.DAOVote storage ref)"}},"id":2691,"indexExpression":{"id":2690,"name":"_voter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"16755:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16731:31:11","typeDescriptions":{"typeIdentifier":"t_struct$_DAOVote_$1427_storage","typeString":"struct WorldPredictionMarket.DAOVote storage ref"}},"functionReturnParameters":2686,"id":2692,"nodeType":"Return","src":"16724:38:11"}]},"functionSelector":"444a50c2","id":2694,"implemented":true,"kind":"function","modifiers":[],"name":"getDAOVote","nameLocation":"16625:10:11","nodeType":"FunctionDefinition","parameters":{"id":2682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2679,"mutability":"mutable","name":"_predictionId","nameLocation":"16644:13:11","nodeType":"VariableDeclaration","scope":2694,"src":"16636:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2678,"name":"uint256","nodeType":"ElementaryTypeName","src":"16636:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2681,"mutability":"mutable","name":"_voter","nameLocation":"16667:6:11","nodeType":"VariableDeclaration","scope":2694,"src":"16659:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2680,"name":"address","nodeType":"ElementaryTypeName","src":"16659:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16635:39:11"},"returnParameters":{"id":2686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2685,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2694,"src":"16698:14:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DAOVote_$1427_memory_ptr","typeString":"struct WorldPredictionMarket.DAOVote"},"typeName":{"id":2684,"nodeType":"UserDefinedTypeName","pathNode":{"id":2683,"name":"DAOVote","nameLocations":["16698:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":1427,"src":"16698:7:11"},"referencedDeclaration":1427,"src":"16698:7:11","typeDescriptions":{"typeIdentifier":"t_struct$_DAOVote_$1427_storage_ptr","typeString":"struct WorldPredictionMarket.DAOVote"}},"visibility":"internal"}],"src":"16697:16:11"},"scope":2933,"src":"16616:153:11","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2706,"nodeType":"Block","src":"16871:58:11","statements":[{"expression":{"baseExpression":{"id":2702,"name":"astrologerPredictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"16888:21:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":2704,"indexExpression":{"id":2703,"name":"_astrologer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2696,"src":"16910:11:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16888:34:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"functionReturnParameters":2701,"id":2705,"nodeType":"Return","src":"16881:41:11"}]},"functionSelector":"bc858185","id":2707,"implemented":true,"kind":"function","modifiers":[],"name":"getAstrologerPredictions","nameLocation":"16784:24:11","nodeType":"FunctionDefinition","parameters":{"id":2697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2696,"mutability":"mutable","name":"_astrologer","nameLocation":"16817:11:11","nodeType":"VariableDeclaration","scope":2707,"src":"16809:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2695,"name":"address","nodeType":"ElementaryTypeName","src":"16809:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16808:21:11"},"returnParameters":{"id":2701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2700,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2707,"src":"16853:16:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2698,"name":"uint256","nodeType":"ElementaryTypeName","src":"16853:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2699,"nodeType":"ArrayTypeName","src":"16853:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"16852:18:11"},"scope":2933,"src":"16775:154:11","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2719,"nodeType":"Block","src":"17013:40:11","statements":[{"expression":{"baseExpression":{"id":2715,"name":"userVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"17030:9:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":2717,"indexExpression":{"id":2716,"name":"_user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"17040:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17030:16:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"functionReturnParameters":2714,"id":2718,"nodeType":"Return","src":"17023:23:11"}]},"functionSelector":"950c7822","id":2720,"implemented":true,"kind":"function","modifiers":[],"name":"getUserVotes","nameLocation":"16944:12:11","nodeType":"FunctionDefinition","parameters":{"id":2710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2709,"mutability":"mutable","name":"_user","nameLocation":"16965:5:11","nodeType":"VariableDeclaration","scope":2720,"src":"16957:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2708,"name":"address","nodeType":"ElementaryTypeName","src":"16957:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16956:15:11"},"returnParameters":{"id":2714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2720,"src":"16995:16:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2711,"name":"uint256","nodeType":"ElementaryTypeName","src":"16995:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2712,"nodeType":"ArrayTypeName","src":"16995:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"16994:18:11"},"scope":2933,"src":"16935:118:11","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2774,"nodeType":"Block","src":"17132:364:11","statements":[{"assignments":[2730],"declarations":[{"constant":false,"id":2730,"mutability":"mutable","name":"activeIds","nameLocation":"17159:9:11","nodeType":"VariableDeclaration","scope":2774,"src":"17142:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2728,"name":"uint256","nodeType":"ElementaryTypeName","src":"17142:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2729,"nodeType":"ArrayTypeName","src":"17142:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":2737,"initialValue":{"arguments":[{"expression":{"id":2734,"name":"predictionStats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"17185:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_PredictionStats_$1436_storage","typeString":"struct WorldPredictionMarket.PredictionStats storage ref"}},"id":2735,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17201:17:11","memberName":"activePredictions","nodeType":"MemberAccess","referencedDeclaration":1431,"src":"17185:33:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"17171:13:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":2731,"name":"uint256","nodeType":"ElementaryTypeName","src":"17175:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2732,"nodeType":"ArrayTypeName","src":"17175:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17171:48:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"17142:77:11"},{"assignments":[2739],"declarations":[{"constant":false,"id":2739,"mutability":"mutable","name":"count","nameLocation":"17237:5:11","nodeType":"VariableDeclaration","scope":2774,"src":"17229:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2738,"name":"uint256","nodeType":"ElementaryTypeName","src":"17229:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2741,"initialValue":{"hexValue":"30","id":2740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17245:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17229:17:11"},{"body":{"id":2770,"nodeType":"Block","src":"17321:134:11","statements":[{"condition":{"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"17339:26:11","subExpression":{"expression":{"baseExpression":{"id":2754,"name":"predictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"17340:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_WorldPrediction_$1411_storage_$","typeString":"mapping(uint256 => struct WorldPredictionMarket.WorldPrediction storage ref)"}},"id":2756,"indexExpression":{"id":2755,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"17352:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17340:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_WorldPrediction_$1411_storage","typeString":"struct WorldPredictionMarket.WorldPrediction storage ref"}},"id":2757,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17355:10:11","memberName":"isResolved","nodeType":"MemberAccess","referencedDeclaration":1402,"src":"17340:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2769,"nodeType":"IfStatement","src":"17335:110:11","trueBody":{"id":2768,"nodeType":"Block","src":"17367:78:11","statements":[{"expression":{"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2759,"name":"activeIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"17385:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2761,"indexExpression":{"id":2760,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"17395:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17385:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2762,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"17404:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17385:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2764,"nodeType":"ExpressionStatement","src":"17385:20:11"},{"expression":{"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17423:7:11","subExpression":{"id":2765,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"17423:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2767,"nodeType":"ExpressionStatement","src":"17423:7:11"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2746,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"17285:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2747,"name":"_predictionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"17290:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1179_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":2748,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17305:7:11","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1191,"src":"17290:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1179_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1179_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17290:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17285:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2771,"initializationExpression":{"assignments":[2743],"declarations":[{"constant":false,"id":2743,"mutability":"mutable","name":"i","nameLocation":"17278:1:11","nodeType":"VariableDeclaration","scope":2771,"src":"17270:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2742,"name":"uint256","nodeType":"ElementaryTypeName","src":"17270:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2745,"initialValue":{"hexValue":"31","id":2744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17282:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"17270:13:11"},"loopExpression":{"expression":{"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17316:3:11","subExpression":{"id":2751,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"17316:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2753,"nodeType":"ExpressionStatement","src":"17316:3:11"},"nodeType":"ForStatement","src":"17265:190:11"},{"expression":{"id":2772,"name":"activeIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"17480:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":2725,"id":2773,"nodeType":"Return","src":"17473:16:11"}]},"functionSelector":"a9d6921b","id":2775,"implemented":true,"kind":"function","modifiers":[],"name":"getActivePredictions","nameLocation":"17068:20:11","nodeType":"FunctionDefinition","parameters":{"id":2721,"nodeType":"ParameterList","parameters":[],"src":"17088:2:11"},"returnParameters":{"id":2725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2775,"src":"17114:16:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2722,"name":"uint256","nodeType":"ElementaryTypeName","src":"17114:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2723,"nodeType":"ArrayTypeName","src":"17114:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"17113:18:11"},"scope":2933,"src":"17059:437:11","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2792,"nodeType":"Block","src":"17609:79:11","statements":[{"expression":{"components":[{"baseExpression":{"id":2784,"name":"daoYesVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"17627:11:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2786,"indexExpression":{"id":2785,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2777,"src":"17639:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17627:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2787,"name":"daoNoVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"17655:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2789,"indexExpression":{"id":2788,"name":"_predictionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2777,"src":"17666:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17655:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2790,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17626:55:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":2783,"id":2791,"nodeType":"Return","src":"17619:62:11"}]},"functionSelector":"9dcf0b7a","id":2793,"implemented":true,"kind":"function","modifiers":[],"name":"getDAOVoteCounts","nameLocation":"17511:16:11","nodeType":"FunctionDefinition","parameters":{"id":2778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2777,"mutability":"mutable","name":"_predictionId","nameLocation":"17536:13:11","nodeType":"VariableDeclaration","scope":2793,"src":"17528:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2776,"name":"uint256","nodeType":"ElementaryTypeName","src":"17528:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17527:23:11"},"returnParameters":{"id":2783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2780,"mutability":"mutable","name":"yesVotes","nameLocation":"17582:8:11","nodeType":"VariableDeclaration","scope":2793,"src":"17574:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2779,"name":"uint256","nodeType":"ElementaryTypeName","src":"17574:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2782,"mutability":"mutable","name":"noVotes","nameLocation":"17600:7:11","nodeType":"VariableDeclaration","scope":2793,"src":"17592:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2781,"name":"uint256","nodeType":"ElementaryTypeName","src":"17592:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17573:35:11"},"scope":2933,"src":"17502:186:11","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2804,"nodeType":"Block","src":"17794:55:11","statements":[{"expression":{"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2800,"name":"astrologerManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"17804:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2801,"name":"_astrologerManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2795,"src":"17824:18:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17804:38:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2803,"nodeType":"ExpressionStatement","src":"17804:38:11"}]},"functionSelector":"44cda485","id":2805,"implemented":true,"kind":"function","modifiers":[{"id":2798,"kind":"modifierInvocation","modifierName":{"id":2797,"name":"onlyOwner","nameLocations":["17784:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"17784:9:11"},"nodeType":"ModifierInvocation","src":"17784:9:11"}],"name":"setAstrologerManager","nameLocation":"17726:20:11","nodeType":"FunctionDefinition","parameters":{"id":2796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2795,"mutability":"mutable","name":"_astrologerManager","nameLocation":"17755:18:11","nodeType":"VariableDeclaration","scope":2805,"src":"17747:26:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2794,"name":"address","nodeType":"ElementaryTypeName","src":"17747:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17746:28:11"},"returnParameters":{"id":2799,"nodeType":"ParameterList","parameters":[],"src":"17794:0:11"},"scope":2933,"src":"17717:132:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2816,"nodeType":"Block","src":"17924:47:11","statements":[{"expression":{"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2812,"name":"astroChartNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"17934:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2813,"name":"_astroChartNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"17950:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17934:30:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2815,"nodeType":"ExpressionStatement","src":"17934:30:11"}]},"functionSelector":"ce083d73","id":2817,"implemented":true,"kind":"function","modifiers":[{"id":2810,"kind":"modifierInvocation","modifierName":{"id":2809,"name":"onlyOwner","nameLocations":["17914:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"17914:9:11"},"nodeType":"ModifierInvocation","src":"17914:9:11"}],"name":"setAstroChartNFT","nameLocation":"17864:16:11","nodeType":"FunctionDefinition","parameters":{"id":2808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2807,"mutability":"mutable","name":"_astroChartNFT","nameLocation":"17889:14:11","nodeType":"VariableDeclaration","scope":2817,"src":"17881:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2806,"name":"address","nodeType":"ElementaryTypeName","src":"17881:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17880:24:11"},"returnParameters":{"id":2811,"nodeType":"ParameterList","parameters":[],"src":"17924:0:11"},"scope":2933,"src":"17855:116:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2828,"nodeType":"Block","src":"18038:39:11","statements":[{"expression":{"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2824,"name":"zodiacDAO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"18048:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2825,"name":"_zodiacDAO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"18060:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18048:22:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2827,"nodeType":"ExpressionStatement","src":"18048:22:11"}]},"functionSelector":"65af67bd","id":2829,"implemented":true,"kind":"function","modifiers":[{"id":2822,"kind":"modifierInvocation","modifierName":{"id":2821,"name":"onlyOwner","nameLocations":["18028:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"18028:9:11"},"nodeType":"ModifierInvocation","src":"18028:9:11"}],"name":"setZodiacDAO","nameLocation":"17986:12:11","nodeType":"FunctionDefinition","parameters":{"id":2820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2819,"mutability":"mutable","name":"_zodiacDAO","nameLocation":"18007:10:11","nodeType":"VariableDeclaration","scope":2829,"src":"17999:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2818,"name":"address","nodeType":"ElementaryTypeName","src":"17999:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17998:20:11"},"returnParameters":{"id":2823,"nodeType":"ParameterList","parameters":[],"src":"18038:0:11"},"scope":2933,"src":"17977:100:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2840,"nodeType":"Block","src":"18158:53:11","statements":[{"expression":{"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2836,"name":"reputationScorer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"18168:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2837,"name":"_reputationScorer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"18187:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18168:36:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2839,"nodeType":"ExpressionStatement","src":"18168:36:11"}]},"functionSelector":"e9725c21","id":2841,"implemented":true,"kind":"function","modifiers":[{"id":2834,"kind":"modifierInvocation","modifierName":{"id":2833,"name":"onlyOwner","nameLocations":["18148:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"18148:9:11"},"nodeType":"ModifierInvocation","src":"18148:9:11"}],"name":"setReputationScorer","nameLocation":"18092:19:11","nodeType":"FunctionDefinition","parameters":{"id":2832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2831,"mutability":"mutable","name":"_reputationScorer","nameLocation":"18120:17:11","nodeType":"VariableDeclaration","scope":2841,"src":"18112:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2830,"name":"address","nodeType":"ElementaryTypeName","src":"18112:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18111:27:11"},"returnParameters":{"id":2835,"nodeType":"ParameterList","parameters":[],"src":"18158:0:11"},"scope":2933,"src":"18083:128:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2864,"nodeType":"Block","src":"18337:137:11","statements":[{"expression":{"id":2854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2852,"name":"minAstrologerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"18347:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2853,"name":"_minAstrologerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"18368:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18347:40:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2855,"nodeType":"ExpressionStatement","src":"18347:40:11"},{"expression":{"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2856,"name":"minVoterStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"18397:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2857,"name":"_minVoterStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"18413:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18397:30:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2859,"nodeType":"ExpressionStatement","src":"18397:30:11"},{"expression":{"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2860,"name":"maxVoterStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"18437:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2861,"name":"_maxVoterStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"18453:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18437:30:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2863,"nodeType":"ExpressionStatement","src":"18437:30:11"}]},"functionSelector":"c8ab686a","id":2865,"implemented":true,"kind":"function","modifiers":[{"id":2850,"kind":"modifierInvocation","modifierName":{"id":2849,"name":"onlyOwner","nameLocations":["18327:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"18327:9:11"},"nodeType":"ModifierInvocation","src":"18327:9:11"}],"name":"setStakeLimits","nameLocation":"18226:14:11","nodeType":"FunctionDefinition","parameters":{"id":2848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2843,"mutability":"mutable","name":"_minAstrologerStake","nameLocation":"18249:19:11","nodeType":"VariableDeclaration","scope":2865,"src":"18241:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2842,"name":"uint256","nodeType":"ElementaryTypeName","src":"18241:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2845,"mutability":"mutable","name":"_minVoterStake","nameLocation":"18278:14:11","nodeType":"VariableDeclaration","scope":2865,"src":"18270:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2844,"name":"uint256","nodeType":"ElementaryTypeName","src":"18270:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2847,"mutability":"mutable","name":"_maxVoterStake","nameLocation":"18302:14:11","nodeType":"VariableDeclaration","scope":2865,"src":"18294:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2846,"name":"uint256","nodeType":"ElementaryTypeName","src":"18294:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18240:77:11"},"returnParameters":{"id":2851,"nodeType":"ParameterList","parameters":[],"src":"18337:0:11"},"scope":2933,"src":"18217:257:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2876,"nodeType":"Block","src":"18548:46:11","statements":[{"expression":{"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2872,"name":"daoVotingDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"18558:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2873,"name":"_duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2867,"src":"18578:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18558:29:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2875,"nodeType":"ExpressionStatement","src":"18558:29:11"}]},"functionSelector":"34954999","id":2877,"implemented":true,"kind":"function","modifiers":[{"id":2870,"kind":"modifierInvocation","modifierName":{"id":2869,"name":"onlyOwner","nameLocations":["18538:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"18538:9:11"},"nodeType":"ModifierInvocation","src":"18538:9:11"}],"name":"setDAOVotingDuration","nameLocation":"18489:20:11","nodeType":"FunctionDefinition","parameters":{"id":2868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2867,"mutability":"mutable","name":"_duration","nameLocation":"18518:9:11","nodeType":"VariableDeclaration","scope":2877,"src":"18510:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2866,"name":"uint256","nodeType":"ElementaryTypeName","src":"18510:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18509:19:11"},"returnParameters":{"id":2871,"nodeType":"ParameterList","parameters":[],"src":"18548:0:11"},"scope":2933,"src":"18480:114:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2903,"nodeType":"Block","src":"18718:247:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2887,"name":"_astrologerRewardPercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"18736:27:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2888,"name":"_platformFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"18766:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18736:52:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"31303030","id":2890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18792:4:11","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"src":"18736:60:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f74616c2070657263656e74616765732063616e6e6f742065786365656420313025","id":2892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18798:37:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e1c99d0d9e673c79f68bdfc4edab67f5db0ec96e0958f57a342d69cc25c1448","typeString":"literal_string \"Total percentages cannot exceed 10%\""},"value":"Total percentages cannot exceed 10%"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7e1c99d0d9e673c79f68bdfc4edab67f5db0ec96e0958f57a342d69cc25c1448","typeString":"literal_string \"Total percentages cannot exceed 10%\""}],"id":2886,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18728:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18728:108:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2894,"nodeType":"ExpressionStatement","src":"18728:108:11"},{"expression":{"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2895,"name":"astrologerRewardPercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"18846:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2896,"name":"_astrologerRewardPercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"18875:27:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18846:56:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2898,"nodeType":"ExpressionStatement","src":"18846:56:11"},{"expression":{"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2899,"name":"platformFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"18912:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2900,"name":"_platformFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"18936:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18912:46:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2902,"nodeType":"ExpressionStatement","src":"18912:46:11"}]},"functionSelector":"6f502056","id":2904,"implemented":true,"kind":"function","modifiers":[{"id":2884,"kind":"modifierInvocation","modifierName":{"id":2883,"name":"onlyOwner","nameLocations":["18708:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"18708:9:11"},"nodeType":"ModifierInvocation","src":"18708:9:11"}],"name":"setRewardPercentages","nameLocation":"18609:20:11","nodeType":"FunctionDefinition","parameters":{"id":2882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2879,"mutability":"mutable","name":"_astrologerRewardPercentage","nameLocation":"18638:27:11","nodeType":"VariableDeclaration","scope":2904,"src":"18630:35:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2878,"name":"uint256","nodeType":"ElementaryTypeName","src":"18630:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2881,"mutability":"mutable","name":"_platformFeePercentage","nameLocation":"18675:22:11","nodeType":"VariableDeclaration","scope":2904,"src":"18667:30:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2880,"name":"uint256","nodeType":"ElementaryTypeName","src":"18667:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18629:69:11"},"returnParameters":{"id":2885,"nodeType":"ParameterList","parameters":[],"src":"18718:0:11"},"scope":2933,"src":"18600:365:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2922,"nodeType":"Block","src":"19010:65:11","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2917,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"19054:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_WorldPredictionMarket_$2933","typeString":"contract WorldPredictionMarket"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_WorldPredictionMarket_$2933","typeString":"contract WorldPredictionMarket"}],"id":2916,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19046:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2915,"name":"address","nodeType":"ElementaryTypeName","src":"19046:7:11","typeDescriptions":{}}},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19046:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19060:7:11","memberName":"balance","nodeType":"MemberAccess","src":"19046:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2911,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"19028:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19028:7:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2910,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19020:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2909,"name":"address","nodeType":"ElementaryTypeName","src":"19020:8:11","stateMutability":"payable","typeDescriptions":{}}},"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19020:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19037:8:11","memberName":"transfer","nodeType":"MemberAccess","src":"19020:25:11","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19020:48:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2921,"nodeType":"ExpressionStatement","src":"19020:48:11"}]},"functionSelector":"3ccfd60b","id":2923,"implemented":true,"kind":"function","modifiers":[{"id":2907,"kind":"modifierInvocation","modifierName":{"id":2906,"name":"onlyOwner","nameLocations":["19000:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"19000:9:11"},"nodeType":"ModifierInvocation","src":"19000:9:11"}],"name":"withdraw","nameLocation":"18980:8:11","nodeType":"FunctionDefinition","parameters":{"id":2905,"nodeType":"ParameterList","parameters":[],"src":"18988:2:11"},"returnParameters":{"id":2908,"nodeType":"ParameterList","parameters":[],"src":"19010:0:11"},"scope":2933,"src":"18971:104:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[795],"body":{"id":2931,"nodeType":"Block","src":"19163:2:11","statements":[]},"id":2932,"implemented":true,"kind":"function","modifiers":[{"id":2929,"kind":"modifierInvocation","modifierName":{"id":2928,"name":"onlyOwner","nameLocations":["19153:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"19153:9:11"},"nodeType":"ModifierInvocation","src":"19153:9:11"}],"name":"_authorizeUpgrade","nameLocation":"19090:17:11","nodeType":"FunctionDefinition","overrides":{"id":2927,"nodeType":"OverrideSpecifier","overrides":[],"src":"19144:8:11"},"parameters":{"id":2926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2925,"mutability":"mutable","name":"newImplementation","nameLocation":"19116:17:11","nodeType":"VariableDeclaration","scope":2932,"src":"19108:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2924,"name":"address","nodeType":"ElementaryTypeName","src":"19108:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19107:27:11"},"returnParameters":{"id":2930,"nodeType":"ParameterList","parameters":[],"src":"19163:0:11"},"scope":2933,"src":"19081:84:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2949,"src":"455:18712:11","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2948,"linearizedBaseContracts":[2948],"name":"IERC721","nameLocation":"19220:7:11","nodeType":"ContractDefinition","nodes":[{"functionSelector":"70a08231","id":2940,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"19243:9:11","nodeType":"FunctionDefinition","parameters":{"id":2936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2935,"mutability":"mutable","name":"owner","nameLocation":"19261:5:11","nodeType":"VariableDeclaration","scope":2940,"src":"19253:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2934,"name":"address","nodeType":"ElementaryTypeName","src":"19253:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19252:15:11"},"returnParameters":{"id":2939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2938,"mutability":"mutable","name":"balance","nameLocation":"19299:7:11","nodeType":"VariableDeclaration","scope":2940,"src":"19291:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2937,"name":"uint256","nodeType":"ElementaryTypeName","src":"19291:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19290:17:11"},"scope":2948,"src":"19234:74:11","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6352211e","id":2947,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"19322:7:11","nodeType":"FunctionDefinition","parameters":{"id":2943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2942,"mutability":"mutable","name":"tokenId","nameLocation":"19338:7:11","nodeType":"VariableDeclaration","scope":2947,"src":"19330:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2941,"name":"uint256","nodeType":"ElementaryTypeName","src":"19330:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19329:17:11"},"returnParameters":{"id":2946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2945,"mutability":"mutable","name":"owner","nameLocation":"19378:5:11","nodeType":"VariableDeclaration","scope":2947,"src":"19370:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2944,"name":"address","nodeType":"ElementaryTypeName","src":"19370:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19369:15:11"},"scope":2948,"src":"19313:72:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2949,"src":"19210:177:11","usedErrors":[]}],"src":"32:19356:11"},"id":11},"contracts/interfaces/IAstrologerManager.sol":{"ast":{"absolutePath":"contracts/interfaces/IAstrologerManager.sol","exportedSymbols":{"IAstrologerManager":[3031]},"id":3032,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2950,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IAstrologerManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3031,"linearizedBaseContracts":[3031],"name":"IAstrologerManager","nameLocation":"67:18:12","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IAstrologerManager.Astrologer","id":2979,"members":[{"constant":false,"id":2952,"mutability":"mutable","name":"id","nameLocation":"128:2:12","nodeType":"VariableDeclaration","scope":2979,"src":"120:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2951,"name":"uint256","nodeType":"ElementaryTypeName","src":"120:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2954,"mutability":"mutable","name":"wallet","nameLocation":"148:6:12","nodeType":"VariableDeclaration","scope":2979,"src":"140:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2953,"name":"address","nodeType":"ElementaryTypeName","src":"140:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2956,"mutability":"mutable","name":"name","nameLocation":"171:4:12","nodeType":"VariableDeclaration","scope":2979,"src":"164:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2955,"name":"string","nodeType":"ElementaryTypeName","src":"164:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2958,"mutability":"mutable","name":"description","nameLocation":"192:11:12","nodeType":"VariableDeclaration","scope":2979,"src":"185:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2957,"name":"string","nodeType":"ElementaryTypeName","src":"185:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2960,"mutability":"mutable","name":"specialty","nameLocation":"220:9:12","nodeType":"VariableDeclaration","scope":2979,"src":"213:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2959,"name":"string","nodeType":"ElementaryTypeName","src":"213:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2962,"mutability":"mutable","name":"experience","nameLocation":"247:10:12","nodeType":"VariableDeclaration","scope":2979,"src":"239:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2961,"name":"uint256","nodeType":"ElementaryTypeName","src":"239:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2964,"mutability":"mutable","name":"reputation","nameLocation":"275:10:12","nodeType":"VariableDeclaration","scope":2979,"src":"267:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2963,"name":"uint256","nodeType":"ElementaryTypeName","src":"267:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2966,"mutability":"mutable","name":"totalPredictions","nameLocation":"303:16:12","nodeType":"VariableDeclaration","scope":2979,"src":"295:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2965,"name":"uint256","nodeType":"ElementaryTypeName","src":"295:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2968,"mutability":"mutable","name":"accuratePredictions","nameLocation":"337:19:12","nodeType":"VariableDeclaration","scope":2979,"src":"329:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2967,"name":"uint256","nodeType":"ElementaryTypeName","src":"329:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2970,"mutability":"mutable","name":"tokenContract","nameLocation":"374:13:12","nodeType":"VariableDeclaration","scope":2979,"src":"366:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2969,"name":"uint256","nodeType":"ElementaryTypeName","src":"366:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2972,"mutability":"mutable","name":"isVerified","nameLocation":"402:10:12","nodeType":"VariableDeclaration","scope":2979,"src":"397:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2971,"name":"bool","nodeType":"ElementaryTypeName","src":"397:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2974,"mutability":"mutable","name":"isActive","nameLocation":"427:8:12","nodeType":"VariableDeclaration","scope":2979,"src":"422:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2973,"name":"bool","nodeType":"ElementaryTypeName","src":"422:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2976,"mutability":"mutable","name":"registeredAt","nameLocation":"453:12:12","nodeType":"VariableDeclaration","scope":2979,"src":"445:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2975,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2978,"mutability":"mutable","name":"lastActive","nameLocation":"483:10:12","nodeType":"VariableDeclaration","scope":2979,"src":"475:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2977,"name":"uint256","nodeType":"ElementaryTypeName","src":"475:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Astrologer","nameLocation":"99:10:12","nodeType":"StructDefinition","scope":3031,"src":"92:408:12","visibility":"public"},{"functionSelector":"61cb82ba","id":2987,"implemented":false,"kind":"function","modifiers":[],"name":"getAstrologerByWallet","nameLocation":"515:21:12","nodeType":"FunctionDefinition","parameters":{"id":2982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2981,"mutability":"mutable","name":"wallet","nameLocation":"545:6:12","nodeType":"VariableDeclaration","scope":2987,"src":"537:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2980,"name":"address","nodeType":"ElementaryTypeName","src":"537:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"536:16:12"},"returnParameters":{"id":2986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2985,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2987,"src":"576:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Astrologer_$2979_memory_ptr","typeString":"struct IAstrologerManager.Astrologer"},"typeName":{"id":2984,"nodeType":"UserDefinedTypeName","pathNode":{"id":2983,"name":"Astrologer","nameLocations":["576:10:12"],"nodeType":"IdentifierPath","referencedDeclaration":2979,"src":"576:10:12"},"referencedDeclaration":2979,"src":"576:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Astrologer_$2979_storage_ptr","typeString":"struct IAstrologerManager.Astrologer"}},"visibility":"internal"}],"src":"575:19:12"},"scope":3031,"src":"506:89:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"b56faf11","id":2995,"implemented":false,"kind":"function","modifiers":[],"name":"getAstrologer","nameLocation":"609:13:12","nodeType":"FunctionDefinition","parameters":{"id":2990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2989,"mutability":"mutable","name":"astrologerId","nameLocation":"631:12:12","nodeType":"VariableDeclaration","scope":2995,"src":"623:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2988,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"622:22:12"},"returnParameters":{"id":2994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2993,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2995,"src":"668:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Astrologer_$2979_memory_ptr","typeString":"struct IAstrologerManager.Astrologer"},"typeName":{"id":2992,"nodeType":"UserDefinedTypeName","pathNode":{"id":2991,"name":"Astrologer","nameLocations":["668:10:12"],"nodeType":"IdentifierPath","referencedDeclaration":2979,"src":"668:10:12"},"referencedDeclaration":2979,"src":"668:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Astrologer_$2979_storage_ptr","typeString":"struct IAstrologerManager.Astrologer"}},"visibility":"internal"}],"src":"667:19:12"},"scope":3031,"src":"600:87:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0675f763","id":3002,"implemented":false,"kind":"function","modifiers":[],"name":"updateReputation","nameLocation":"701:16:12","nodeType":"FunctionDefinition","parameters":{"id":3000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2997,"mutability":"mutable","name":"astrologerId","nameLocation":"726:12:12","nodeType":"VariableDeclaration","scope":3002,"src":"718:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2996,"name":"uint256","nodeType":"ElementaryTypeName","src":"718:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2999,"mutability":"mutable","name":"newReputation","nameLocation":"748:13:12","nodeType":"VariableDeclaration","scope":3002,"src":"740:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2998,"name":"uint256","nodeType":"ElementaryTypeName","src":"740:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"717:45:12"},"returnParameters":{"id":3001,"nodeType":"ParameterList","parameters":[],"src":"771:0:12"},"scope":3031,"src":"692:80:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e47ef5a8","id":3009,"implemented":false,"kind":"function","modifiers":[],"name":"recordPredictionResult","nameLocation":"786:22:12","nodeType":"FunctionDefinition","parameters":{"id":3007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3004,"mutability":"mutable","name":"astrologerId","nameLocation":"817:12:12","nodeType":"VariableDeclaration","scope":3009,"src":"809:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3003,"name":"uint256","nodeType":"ElementaryTypeName","src":"809:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3006,"mutability":"mutable","name":"wasAccurate","nameLocation":"836:11:12","nodeType":"VariableDeclaration","scope":3009,"src":"831:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3005,"name":"bool","nodeType":"ElementaryTypeName","src":"831:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"808:40:12"},"returnParameters":{"id":3008,"nodeType":"ParameterList","parameters":[],"src":"857:0:12"},"scope":3031,"src":"777:81:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"5273496a","id":3016,"implemented":false,"kind":"function","modifiers":[],"name":"setTokenContract","nameLocation":"872:16:12","nodeType":"FunctionDefinition","parameters":{"id":3014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3011,"mutability":"mutable","name":"astrologerId","nameLocation":"897:12:12","nodeType":"VariableDeclaration","scope":3016,"src":"889:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3010,"name":"uint256","nodeType":"ElementaryTypeName","src":"889:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3013,"mutability":"mutable","name":"tokenContract","nameLocation":"919:13:12","nodeType":"VariableDeclaration","scope":3016,"src":"911:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3012,"name":"uint256","nodeType":"ElementaryTypeName","src":"911:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"888:45:12"},"returnParameters":{"id":3015,"nodeType":"ParameterList","parameters":[],"src":"942:0:12"},"scope":3031,"src":"863:80:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"30a7d32a","id":3023,"implemented":false,"kind":"function","modifiers":[],"name":"isAstrologerVerified","nameLocation":"957:20:12","nodeType":"FunctionDefinition","parameters":{"id":3019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3018,"mutability":"mutable","name":"wallet","nameLocation":"986:6:12","nodeType":"VariableDeclaration","scope":3023,"src":"978:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3017,"name":"address","nodeType":"ElementaryTypeName","src":"978:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"977:16:12"},"returnParameters":{"id":3022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3021,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3023,"src":"1017:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3020,"name":"bool","nodeType":"ElementaryTypeName","src":"1017:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1016:6:12"},"scope":3031,"src":"948:75:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"656d0c39","id":3030,"implemented":false,"kind":"function","modifiers":[],"name":"getAstrologerId","nameLocation":"1037:15:12","nodeType":"FunctionDefinition","parameters":{"id":3026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3025,"mutability":"mutable","name":"wallet","nameLocation":"1061:6:12","nodeType":"VariableDeclaration","scope":3030,"src":"1053:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3024,"name":"address","nodeType":"ElementaryTypeName","src":"1053:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1052:16:12"},"returnParameters":{"id":3029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3028,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3030,"src":"1092:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3027,"name":"uint256","nodeType":"ElementaryTypeName","src":"1092:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1091:9:12"},"scope":3031,"src":"1028:73:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3032,"src":"57:1046:12","usedErrors":[]}],"src":"32:1072:12"},"id":12},"contracts/interfaces/IReputationScorer.sol":{"ast":{"absolutePath":"contracts/interfaces/IReputationScorer.sol","exportedSymbols":{"IReputationScorer":[3075]},"id":3076,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3033,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IReputationScorer","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3075,"linearizedBaseContracts":[3075],"name":"IReputationScorer","nameLocation":"67:17:13","nodeType":"ContractDefinition","nodes":[{"functionSelector":"9f7c4688","id":3040,"implemented":false,"kind":"function","modifiers":[],"name":"updateReputationFromWorldPrediction","nameLocation":"100:35:13","nodeType":"FunctionDefinition","parameters":{"id":3038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3035,"mutability":"mutable","name":"_astrologer","nameLocation":"153:11:13","nodeType":"VariableDeclaration","scope":3040,"src":"145:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3034,"name":"address","nodeType":"ElementaryTypeName","src":"145:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3037,"mutability":"mutable","name":"_wasCorrect","nameLocation":"179:11:13","nodeType":"VariableDeclaration","scope":3040,"src":"174:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3036,"name":"bool","nodeType":"ElementaryTypeName","src":"174:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"135:61:13"},"returnParameters":{"id":3039,"nodeType":"ParameterList","parameters":[],"src":"205:0:13"},"scope":3075,"src":"91:115:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"b107e88c","id":3047,"implemented":false,"kind":"function","modifiers":[],"name":"getReputationMultiplier","nameLocation":"221:23:13","nodeType":"FunctionDefinition","parameters":{"id":3043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3042,"mutability":"mutable","name":"_astrologer","nameLocation":"253:11:13","nodeType":"VariableDeclaration","scope":3047,"src":"245:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3041,"name":"address","nodeType":"ElementaryTypeName","src":"245:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"244:21:13"},"returnParameters":{"id":3046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3045,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3047,"src":"289:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3044,"name":"uint256","nodeType":"ElementaryTypeName","src":"289:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"288:9:13"},"scope":3075,"src":"212:86:13","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"75a67d5c","id":3074,"implemented":false,"kind":"function","modifiers":[],"name":"getReputationScore","nameLocation":"317:18:13","nodeType":"FunctionDefinition","parameters":{"id":3050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3049,"mutability":"mutable","name":"_astrologer","nameLocation":"344:11:13","nodeType":"VariableDeclaration","scope":3074,"src":"336:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3048,"name":"address","nodeType":"ElementaryTypeName","src":"336:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"335:21:13"},"returnParameters":{"id":3073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3052,"mutability":"mutable","name":"id","nameLocation":"397:2:13","nodeType":"VariableDeclaration","scope":3074,"src":"389:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3051,"name":"uint256","nodeType":"ElementaryTypeName","src":"389:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3054,"mutability":"mutable","name":"astrologer","nameLocation":"417:10:13","nodeType":"VariableDeclaration","scope":3074,"src":"409:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3053,"name":"address","nodeType":"ElementaryTypeName","src":"409:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3056,"mutability":"mutable","name":"totalPredictions","nameLocation":"445:16:13","nodeType":"VariableDeclaration","scope":3074,"src":"437:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3055,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3058,"mutability":"mutable","name":"accuratePredictions","nameLocation":"479:19:13","nodeType":"VariableDeclaration","scope":3074,"src":"471:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3057,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3060,"mutability":"mutable","name":"accuracyPercentage","nameLocation":"516:18:13","nodeType":"VariableDeclaration","scope":3074,"src":"508:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3059,"name":"uint256","nodeType":"ElementaryTypeName","src":"508:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3062,"mutability":"mutable","name":"reputationMultiplier","nameLocation":"552:20:13","nodeType":"VariableDeclaration","scope":3074,"src":"544:28:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3061,"name":"uint256","nodeType":"ElementaryTypeName","src":"544:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3064,"mutability":"mutable","name":"marketPredictions","nameLocation":"590:17:13","nodeType":"VariableDeclaration","scope":3074,"src":"582:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3063,"name":"uint256","nodeType":"ElementaryTypeName","src":"582:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3066,"mutability":"mutable","name":"dailyPredictions","nameLocation":"625:16:13","nodeType":"VariableDeclaration","scope":3074,"src":"617:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3065,"name":"uint256","nodeType":"ElementaryTypeName","src":"617:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3068,"mutability":"mutable","name":"oneToOnePredictions","nameLocation":"659:19:13","nodeType":"VariableDeclaration","scope":3074,"src":"651:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3067,"name":"uint256","nodeType":"ElementaryTypeName","src":"651:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3070,"mutability":"mutable","name":"lastUpdated","nameLocation":"696:11:13","nodeType":"VariableDeclaration","scope":3074,"src":"688:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3069,"name":"uint256","nodeType":"ElementaryTypeName","src":"688:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3072,"mutability":"mutable","name":"isActive","nameLocation":"722:8:13","nodeType":"VariableDeclaration","scope":3074,"src":"717:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3071,"name":"bool","nodeType":"ElementaryTypeName","src":"717:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"379:357:13"},"scope":3075,"src":"308:429:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3076,"src":"57:682:13","usedErrors":[]}],"src":"32:708:13"},"id":13}},"contracts":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":503,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":506,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1172,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"IERC1967Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":\"IERC1967Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"IERC1822ProxiableUpgradeable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ERC1967UpgradeUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":503,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":506,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":485,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"IBeaconUpgradeable":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":503,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":506,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":503,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":506,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":485,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":800,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220b1e3be4c5b3b88c3c0cf80d5016514a1a8cec2d1065e8003ff831c61f49c62db64736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 0xE3 0xBE 0x4C JUMPDEST EXTCODESIZE DUP9 0xC3 0xC0 0xCF DUP1 0xD5 ADD PUSH6 0x14A1A8CEC2D1 MOD 0x5E DUP1 SUB SELFDESTRUCT DUP4 SHR PUSH2 0xF49C PUSH3 0xDB6473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"194:9180:7:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220b1e3be4c5b3b88c3c0cf80d5016514a1a8cec2d1065e8003ff831c61f49c62db64736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 0xE3 0xBE 0x4C JUMPDEST EXTCODESIZE DUP9 0xC3 0xC0 0xCF DUP1 0xD5 ADD PUSH6 0x14A1A8CEC2D1 MOD 0x5E DUP1 SUB SELFDESTRUCT DUP4 SHR PUSH2 0xF49C PUSH3 0xDB6473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"194:9180:7:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":503,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":506,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1172,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"CountersUpgradeable":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220fc37d900abddb73c46c379b2a2664b71775298d45c4841409270186ba604ffda64736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC CALLDATACOPY 0xD9 STOP 0xAB 0xDD 0xB7 EXTCODECOPY CHAINID 0xC3 PUSH26 0xB2A2664B71775298D45C4841409270186BA604FFDA64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"424:982:9:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220fc37d900abddb73c46c379b2a2664b71775298d45c4841409270186ba604ffda64736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC CALLDATACOPY 0xD9 STOP 0xAB 0xDD 0xB7 EXTCODECOPY CHAINID 0xC3 PUSH26 0xB2A2664B71775298D45C4841409270186BA604FFDA64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"424:982:9:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"current(struct CountersUpgradeable.Counter storage pointer)":"infinite","decrement(struct CountersUpgradeable.Counter storage pointer)":"infinite","increment(struct CountersUpgradeable.Counter storage pointer)":"infinite","reset(struct CountersUpgradeable.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":\"CountersUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"StorageSlotUpgradeable":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220d5316a15c9aedf1238b60ad56577f4a69cfc811a6b1f01726800648dfd510cb364736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 BALANCE PUSH11 0x15C9AEDF1238B60AD56577 DELEGATECALL 0xA6 SWAP13 0xFC DUP2 BYTE PUSH12 0x1F01726800648DFD510CB364 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"1420:2696:10:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220d5316a15c9aedf1238b60ad56577f4a69cfc811a6b1f01726800648dfd510cb364736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 BALANCE PUSH11 0x15C9AEDF1238B60AD56577 DELEGATECALL 0xA6 SWAP13 0xFC DUP2 BYTE PUSH12 0x1F01726800648DFD510CB364 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"1420:2696:10:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/WorldPredictionMarket.sol":{"IERC721":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address)":"70a08231","ownerOf(uint256)":"6352211e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WorldPredictionMarket.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"contracts/WorldPredictionMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"./interfaces/IAstrologerManager.sol\\\";\\nimport \\\"./interfaces/IReputationScorer.sol\\\";\\n\\ncontract WorldPredictionMarket is \\n    Initializable, \\n    OwnableUpgradeable, \\n    UUPSUpgradeable \\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    CountersUpgradeable.Counter private _predictionIds;\\n    \\n    struct WorldPrediction {\\n        uint256 id;\\n        address astrologer;\\n        uint256 astrologerId;\\n        string title;\\n        string description;\\n        uint256 deadline;\\n        uint256 astrologerStake;\\n        uint256 totalVoterStake;\\n        uint256 yesVoterStake;\\n        uint256 noVoterStake;\\n        uint256 totalVoters;\\n        bool isResolved;\\n        bool outcome;\\n        bool daoVotingActive;\\n        uint256 createdAt;\\n        uint256 resolvedAt;\\n    }\\n\\n    struct Vote {\\n        bool hasVoted;\\n        bool vote; // true = YES, false = NO\\n        uint256 stakeAmount;\\n        bool rewardClaimed;\\n    }\\n\\n    struct DAOVote {\\n        bool hasVoted;\\n        bool vote; // true = YES (correct), false = NO (incorrect)\\n        uint256 tokenId;\\n    }\\n\\n    struct PredictionStats {\\n        uint256 totalPredictions;\\n        uint256 activePredictions;\\n        uint256 resolvedPredictions;\\n        uint256 totalVolume;\\n    }\\n\\n    mapping(uint256 => WorldPrediction) public predictions;\\n    mapping(uint256 => mapping(address => Vote)) public votes;\\n    mapping(uint256 => mapping(address => DAOVote)) public daoVotes;\\n    mapping(uint256 => uint256) public daoYesVotes;\\n    mapping(uint256 => uint256) public daoNoVotes;\\n    mapping(address => uint256[]) public astrologerPredictions;\\n    mapping(address => uint256[]) public userVotes;\\n    \\n    address public astrologerManager;\\n    address public astroChartNFT;\\n    address public zodiacDAO;\\n    address public reputationScorer;\\n    \\n    uint256 public minAstrologerStake;\\n    uint256 public minVoterStake;\\n    uint256 public maxVoterStake;\\n    uint256 public daoVotingDuration;\\n    uint256 public astrologerRewardPercentage; // 500 = 5%\\n    uint256 public platformFeePercentage; // 200 = 2%\\n    \\n    PredictionStats public predictionStats;\\n    \\n    event PredictionCreated(\\n        uint256 indexed predictionId,\\n        address indexed astrologer,\\n        string title,\\n        uint256 deadline,\\n        uint256 astrologerStake\\n    );\\n\\n    event VoteCast(\\n        uint256 indexed predictionId,\\n        address indexed voter,\\n        bool vote,\\n        uint256 stakeAmount\\n    );\\n\\n    event DAOVoteCast(\\n        uint256 indexed predictionId,\\n        address indexed daoMember,\\n        bool vote,\\n        uint256 tokenId\\n    );\\n\\n    event PredictionResolved(\\n        uint256 indexed predictionId,\\n        bool outcome,\\n        uint256 totalStake,\\n        uint256 astrologerReward\\n    );\\n\\n    event RewardClaimed(\\n        uint256 indexed predictionId,\\n        address indexed claimer,\\n        uint256 rewardAmount\\n    );\\n\\n    event DAOVotingStarted(\\n        uint256 indexed predictionId,\\n        uint256 endTime\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _astrologerManager,\\n        address _astroChartNFT,\\n        address _zodiacDAO,\\n        address _reputationScorer,\\n        uint256 _minAstrologerStake,\\n        uint256 _minVoterStake,\\n        uint256 _maxVoterStake\\n    ) public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        \\n        astrologerManager = _astrologerManager;\\n        astroChartNFT = _astroChartNFT;\\n        zodiacDAO = _zodiacDAO;\\n        reputationScorer = _reputationScorer;\\n        minAstrologerStake = _minAstrologerStake;\\n        minVoterStake = _minVoterStake;\\n        maxVoterStake = _maxVoterStake;\\n        daoVotingDuration = 2 minutes; // Reduced for testing\\n        astrologerRewardPercentage = 500; // 5%\\n        platformFeePercentage = 200; // 2%\\n    }\\n\\n    /**\\n     * @notice Create a world prediction by staking FLOW\\n     * @param _title The title of the prediction\\n     * @param _description The detailed description\\n     * @param _deadline The deadline for the prediction\\n     */\\n    function createPrediction(\\n        string memory _title,\\n        string memory _description,\\n        uint256 _deadline\\n    ) external payable returns (uint256) {\\n        require(msg.value >= minAstrologerStake, \\\"Insufficient astrologer stake\\\");\\n        require(bytes(_title).length > 0, \\\"Title cannot be empty\\\");\\n        require(bytes(_description).length > 0, \\\"Description cannot be empty\\\");\\n        require(_deadline > block.timestamp, \\\"Deadline must be in the future\\\");\\n\\n        // Verify astrologer is registered\\n        if (astrologerManager != address(0)) {\\n            require(IAstrologerManager(astrologerManager).isAstrologerVerified(msg.sender), \\\"Astrologer not verified\\\");\\n        }\\n\\n        _predictionIds.increment();\\n        uint256 predictionId = _predictionIds.current();\\n\\n        predictions[predictionId] = WorldPrediction({\\n            id: predictionId,\\n            astrologer: msg.sender,\\n            astrologerId: IAstrologerManager(astrologerManager).getAstrologerId(msg.sender),\\n            title: _title,\\n            description: _description,\\n            deadline: _deadline,\\n            astrologerStake: msg.value,\\n            totalVoterStake: 0,\\n            yesVoterStake: 0,\\n            noVoterStake: 0,\\n            totalVoters: 0,\\n            isResolved: false,\\n            outcome: false,\\n            daoVotingActive: false,\\n            createdAt: block.timestamp,\\n            resolvedAt: 0\\n        });\\n\\n        astrologerPredictions[msg.sender].push(predictionId);\\n        predictionStats.totalPredictions++;\\n        predictionStats.activePredictions++;\\n\\n        emit PredictionCreated(predictionId, msg.sender, _title, _deadline, msg.value);\\n        return predictionId;\\n    }\\n\\n    /**\\n     * @notice Vote on a prediction (requires AstroChart NFT)\\n     * @param _predictionId The prediction ID\\n     * @param _vote True for YES, false for NO\\n     */\\n    function voteOnPrediction(uint256 _predictionId, bool _vote) external payable {\\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \\\"Invalid prediction ID\\\");\\n        require(msg.value >= minVoterStake, \\\"Insufficient voter stake\\\");\\n        require(msg.value <= maxVoterStake, \\\"Stake amount too high\\\");\\n        \\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        require(!prediction.isResolved, \\\"Prediction already resolved\\\");\\n        require(block.timestamp < prediction.deadline, \\\"Voting period ended\\\");\\n        require(!votes[_predictionId][msg.sender].hasVoted, \\\"Already voted\\\");\\n        \\n        // Verify voter has minted AstroChart NFT\\n        require(hasAstroChartNFT(msg.sender), \\\"Must own AstroChart NFT to vote\\\");\\n        \\n        // Verify voter stake is >= astrologer stake\\n        require(msg.value >= prediction.astrologerStake, \\\"Voter stake must be >= astrologer stake\\\");\\n\\n        votes[_predictionId][msg.sender] = Vote({\\n            hasVoted: true,\\n            vote: _vote,\\n            stakeAmount: msg.value,\\n            rewardClaimed: false\\n        });\\n\\n        prediction.totalVoterStake += msg.value;\\n        prediction.totalVoters++;\\n        \\n        if (_vote) {\\n            prediction.yesVoterStake += msg.value;\\n        } else {\\n            prediction.noVoterStake += msg.value;\\n        }\\n        \\n        userVotes[msg.sender].push(_predictionId);\\n        predictionStats.totalVolume += msg.value;\\n\\n        emit VoteCast(_predictionId, msg.sender, _vote, msg.value);\\n    }\\n\\n    /**\\n     * @notice Start DAO voting after prediction deadline\\n     * @param _predictionId The prediction ID\\n     */\\n    function startDAOVoting(uint256 _predictionId) external {\\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \\\"Invalid prediction ID\\\");\\n        \\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        require(!prediction.isResolved, \\\"Prediction already resolved\\\");\\n        require(block.timestamp >= prediction.deadline, \\\"Prediction deadline not reached\\\");\\n        require(!prediction.daoVotingActive, \\\"DAO voting already active\\\");\\n\\n        prediction.daoVotingActive = true;\\n        \\n        emit DAOVotingStarted(_predictionId, block.timestamp + daoVotingDuration);\\n    }\\n\\n    /**\\n     * @notice DAO members vote on prediction outcome\\n     * @param _predictionId The prediction ID\\n     * @param _outcome True if prediction was correct, false if incorrect\\n     * @param _tokenId The DAO token ID for voting\\n     */\\n    function castDAOVote(uint256 _predictionId, bool _outcome, uint256 _tokenId) external {\\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \\\"Invalid prediction ID\\\");\\n        \\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        require(!prediction.isResolved, \\\"Prediction already resolved\\\");\\n        require(prediction.daoVotingActive, \\\"DAO voting not active\\\");\\n        require(!daoVotes[_predictionId][msg.sender].hasVoted, \\\"Already voted\\\");\\n        \\n        // Verify DAO membership by checking AstroChart NFT ownership\\n        require(hasAstroChartNFT(msg.sender), \\\"Not a DAO member\\\");\\n\\n        daoVotes[_predictionId][msg.sender] = DAOVote({\\n            hasVoted: true,\\n            vote: _outcome,\\n            tokenId: _tokenId\\n        });\\n\\n        if (_outcome) {\\n            daoYesVotes[_predictionId]++;\\n        } else {\\n            daoNoVotes[_predictionId]++;\\n        }\\n\\n        emit DAOVoteCast(_predictionId, msg.sender, _outcome, _tokenId);\\n    }\\n\\n    /**\\n     * @notice Resolve prediction based on DAO votes\\n     * @param _predictionId The prediction ID\\n     */\\n    function resolvePrediction(uint256 _predictionId) external {\\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \\\"Invalid prediction ID\\\");\\n        \\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        require(!prediction.isResolved, \\\"Prediction already resolved\\\");\\n        require(prediction.daoVotingActive, \\\"DAO voting not started\\\");\\n        require(block.timestamp >= prediction.deadline + daoVotingDuration, \\\"DAO voting period not ended\\\");\\n\\n        // Determine outcome based on DAO votes\\n        uint256 totalDAOVotes = daoYesVotes[_predictionId] + daoNoVotes[_predictionId];\\n        require(totalDAOVotes > 0, \\\"No DAO votes cast\\\");\\n        \\n        bool outcome = daoYesVotes[_predictionId] > daoNoVotes[_predictionId];\\n        \\n        prediction.isResolved = true;\\n        prediction.outcome = outcome;\\n        prediction.resolvedAt = block.timestamp;\\n        \\n        predictionStats.activePredictions--;\\n        predictionStats.resolvedPredictions++;\\n\\n        // Calculate and distribute rewards\\n        uint256 astrologerReward = distributeRewards(_predictionId, outcome);\\n        \\n        // Update reputation\\n        updateAstrologerReputation(prediction.astrologer, prediction.astrologerId, outcome);\\n\\n        emit PredictionResolved(_predictionId, outcome, prediction.totalVoterStake + prediction.astrologerStake, astrologerReward);\\n    }\\n\\n    /**\\n     * @notice Claim rewards for correct predictions\\n     * @param _predictionId The prediction ID\\n     */\\n    function claimReward(uint256 _predictionId) external {\\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \\\"Invalid prediction ID\\\");\\n        \\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        require(prediction.isResolved, \\\"Prediction not resolved\\\");\\n        \\n        Vote storage vote = votes[_predictionId][msg.sender];\\n        require(vote.hasVoted, \\\"No vote found\\\");\\n        require(!vote.rewardClaimed, \\\"Reward already claimed\\\");\\n\\n        uint256 rewardAmount = calculateVoterReward(_predictionId, msg.sender);\\n        if (rewardAmount > 0) {\\n            vote.rewardClaimed = true;\\n            payable(msg.sender).transfer(rewardAmount);\\n            emit RewardClaimed(_predictionId, msg.sender, rewardAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Distribute rewards after prediction resolution\\n     */\\n    function distributeRewards(uint256 _predictionId, bool outcome) internal returns (uint256) {\\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        \\n        uint256 totalPot = prediction.totalVoterStake + prediction.astrologerStake;\\n        uint256 platformFee = (totalPot * platformFeePercentage) / 10000;\\n        uint256 distributablePot = totalPot - platformFee;\\n        \\n        uint256 astrologerReward = 0;\\n        \\n        if (outcome) {\\n            // Astrologer was correct - gets 5% of total pot\\n            astrologerReward = (distributablePot * astrologerRewardPercentage) / 10000;\\n            payable(prediction.astrologer).transfer(astrologerReward);\\n        } else {\\n            // Astrologer was wrong - stake is redistributed to winning voters\\n            // Reputation will be penalized by updateAstrologerReputation\\n        }\\n        \\n        return astrologerReward;\\n    }\\n\\n    /**\\n     * @notice Calculate voter reward amount\\n     */\\n    function calculateVoterReward(uint256 _predictionId, address _voter) public view returns (uint256) {\\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        Vote storage vote = votes[_predictionId][_voter];\\n        \\n        if (!prediction.isResolved || !vote.hasVoted || vote.rewardClaimed) {\\n            return 0;\\n        }\\n\\n        // Only winning voters get rewards\\n        if (vote.vote != prediction.outcome) {\\n            return 0;\\n        }\\n\\n        uint256 totalPot = prediction.totalVoterStake + prediction.astrologerStake;\\n        uint256 platformFee = (totalPot * platformFeePercentage) / 10000;\\n        uint256 distributablePot = totalPot - platformFee;\\n        \\n        uint256 astrologerReward = 0;\\n        if (prediction.outcome) {\\n            astrologerReward = (distributablePot * astrologerRewardPercentage) / 10000;\\n        }\\n        \\n        uint256 voterRewardPool = distributablePot - astrologerReward;\\n        uint256 winningStake = prediction.outcome ? prediction.yesVoterStake : prediction.noVoterStake;\\n        \\n        if (winningStake > 0) {\\n            return (vote.stakeAmount * voterRewardPool) / winningStake;\\n        }\\n        \\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Update astrologer reputation based on prediction outcome\\n     */\\n    function updateAstrologerReputation(address _astrologer, uint256 _astrologerId, bool _wasCorrect) internal {\\n        if (reputationScorer != address(0)) {\\n            IReputationScorer(reputationScorer).updateReputationFromWorldPrediction(_astrologer, _wasCorrect);\\n        }\\n        \\n        if (astrologerManager != address(0) && _astrologerId > 0) {\\n            IAstrologerManager(astrologerManager).recordPredictionResult(_astrologerId, _wasCorrect);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if user has AstroChart NFT\\n     */\\n    function hasAstroChartNFT(address _user) internal view returns (bool) {\\n        if (astroChartNFT == address(0)) return true; // For testing\\n        \\n        // Check if user has at least one AstroChart NFT\\n        try IERC721(astroChartNFT).balanceOf(_user) returns (uint256 balance) {\\n            return balance > 0;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if user is DAO member\\n     */\\n    function isDAOMember(address _user, uint256 _tokenId) internal view returns (bool) {\\n        if (zodiacDAO == address(0)) return msg.sender == owner(); // For testing, only owner can vote\\n        \\n        // Check if user owns the DAO token\\n        try IERC721(zodiacDAO).ownerOf(_tokenId) returns (address owner) {\\n            return owner == _user;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    // View functions\\n    function getPrediction(uint256 _predictionId) external view returns (WorldPrediction memory) {\\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \\\"Invalid prediction ID\\\");\\n        return predictions[_predictionId];\\n    }\\n\\n    function getVote(uint256 _predictionId, address _voter) external view returns (Vote memory) {\\n        return votes[_predictionId][_voter];\\n    }\\n\\n    function getDAOVote(uint256 _predictionId, address _voter) external view returns (DAOVote memory) {\\n        return daoVotes[_predictionId][_voter];\\n    }\\n\\n    function getAstrologerPredictions(address _astrologer) external view returns (uint256[] memory) {\\n        return astrologerPredictions[_astrologer];\\n    }\\n\\n    function getUserVotes(address _user) external view returns (uint256[] memory) {\\n        return userVotes[_user];\\n    }\\n\\n    function getActivePredictions() external view returns (uint256[] memory) {\\n        uint256[] memory activeIds = new uint256[](predictionStats.activePredictions);\\n        uint256 count = 0;\\n        \\n        for (uint256 i = 1; i <= _predictionIds.current(); i++) {\\n            if (!predictions[i].isResolved) {\\n                activeIds[count] = i;\\n                count++;\\n            }\\n        }\\n        \\n        return activeIds;\\n    }\\n\\n    function getDAOVoteCounts(uint256 _predictionId) external view returns (uint256 yesVotes, uint256 noVotes) {\\n        return (daoYesVotes[_predictionId], daoNoVotes[_predictionId]);\\n    }\\n\\n    // Admin functions\\n    function setAstrologerManager(address _astrologerManager) external onlyOwner {\\n        astrologerManager = _astrologerManager;\\n    }\\n\\n    function setAstroChartNFT(address _astroChartNFT) external onlyOwner {\\n        astroChartNFT = _astroChartNFT;\\n    }\\n\\n    function setZodiacDAO(address _zodiacDAO) external onlyOwner {\\n        zodiacDAO = _zodiacDAO;\\n    }\\n\\n    function setReputationScorer(address _reputationScorer) external onlyOwner {\\n        reputationScorer = _reputationScorer;\\n    }\\n\\n    function setStakeLimits(uint256 _minAstrologerStake, uint256 _minVoterStake, uint256 _maxVoterStake) external onlyOwner {\\n        minAstrologerStake = _minAstrologerStake;\\n        minVoterStake = _minVoterStake;\\n        maxVoterStake = _maxVoterStake;\\n    }\\n\\n    function setDAOVotingDuration(uint256 _duration) external onlyOwner {\\n        daoVotingDuration = _duration;\\n    }\\n\\n    function setRewardPercentages(uint256 _astrologerRewardPercentage, uint256 _platformFeePercentage) external onlyOwner {\\n        require(_astrologerRewardPercentage + _platformFeePercentage <= 1000, \\\"Total percentages cannot exceed 10%\\\");\\n        astrologerRewardPercentage = _astrologerRewardPercentage;\\n        platformFeePercentage = _platformFeePercentage;\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n}\\n\\n// Interface for ERC721 (for NFT checks)\\ninterface IERC721 {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n} \",\"keccak256\":\"0x508baba9d76de202836b1716317248eb1f945e0db965598835a1926d8e27be9d\",\"license\":\"MIT\"},\"contracts/interfaces/IAstrologerManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAstrologerManager {\\n    struct Astrologer {\\n        uint256 id;\\n        address wallet;\\n        string name;\\n        string description;\\n        string specialty;\\n        uint256 experience;\\n        uint256 reputation;\\n        uint256 totalPredictions;\\n        uint256 accuratePredictions;\\n        uint256 tokenContract;\\n        bool isVerified;\\n        bool isActive;\\n        uint256 registeredAt;\\n        uint256 lastActive;\\n    }\\n\\n    function getAstrologerByWallet(address wallet) external view returns (Astrologer memory);\\n    function getAstrologer(uint256 astrologerId) external view returns (Astrologer memory);\\n    function updateReputation(uint256 astrologerId, uint256 newReputation) external;\\n    function recordPredictionResult(uint256 astrologerId, bool wasAccurate) external;\\n    function setTokenContract(uint256 astrologerId, uint256 tokenContract) external;\\n    function isAstrologerVerified(address wallet) external view returns (bool);\\n    function getAstrologerId(address wallet) external view returns (uint256);\\n} \",\"keccak256\":\"0x11ca9cb820c6a6cec9a66342e9d644365a1c256aff7fc4cca46964dbcdae6e64\",\"license\":\"MIT\"},\"contracts/interfaces/IReputationScorer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReputationScorer {\\n    function updateReputationFromWorldPrediction(\\n        address _astrologer,\\n        bool _wasCorrect\\n    ) external;\\n\\n    function getReputationMultiplier(address _astrologer) external view returns (uint256);\\n    \\n    function getReputationScore(address _astrologer) external view returns (\\n        uint256 id,\\n        address astrologer,\\n        uint256 totalPredictions,\\n        uint256 accuratePredictions,\\n        uint256 accuracyPercentage,\\n        uint256 reputationMultiplier,\\n        uint256 marketPredictions,\\n        uint256 dailyPredictions,\\n        uint256 oneToOnePredictions,\\n        uint256 lastUpdated,\\n        bool isActive\\n    );\\n} \",\"keccak256\":\"0x703180fb5f26749d16b00844cc9f4ff63a31eeb43e1fa2303a2c8bd5a7bb2b82\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"WorldPredictionMarket":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"predictionId","type":"uint256"},{"indexed":true,"internalType":"address","name":"daoMember","type":"address"},{"indexed":false,"internalType":"bool","name":"vote","type":"bool"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"DAOVoteCast","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"predictionId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"DAOVotingStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"predictionId","type":"uint256"},{"indexed":true,"internalType":"address","name":"astrologer","type":"address"},{"indexed":false,"internalType":"string","name":"title","type":"string"},{"indexed":false,"internalType":"uint256","name":"deadline","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"astrologerStake","type":"uint256"}],"name":"PredictionCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"predictionId","type":"uint256"},{"indexed":false,"internalType":"bool","name":"outcome","type":"bool"},{"indexed":false,"internalType":"uint256","name":"totalStake","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"astrologerReward","type":"uint256"}],"name":"PredictionResolved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"predictionId","type":"uint256"},{"indexed":true,"internalType":"address","name":"claimer","type":"address"},{"indexed":false,"internalType":"uint256","name":"rewardAmount","type":"uint256"}],"name":"RewardClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"predictionId","type":"uint256"},{"indexed":true,"internalType":"address","name":"voter","type":"address"},{"indexed":false,"internalType":"bool","name":"vote","type":"bool"},{"indexed":false,"internalType":"uint256","name":"stakeAmount","type":"uint256"}],"name":"VoteCast","type":"event"},{"inputs":[],"name":"astroChartNFT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"astrologerManager","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"astrologerPredictions","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"astrologerRewardPercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_predictionId","type":"uint256"},{"internalType":"address","name":"_voter","type":"address"}],"name":"calculateVoterReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_predictionId","type":"uint256"},{"internalType":"bool","name":"_outcome","type":"bool"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"castDAOVote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_predictionId","type":"uint256"}],"name":"claimReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_title","type":"string"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"uint256","name":"_deadline","type":"uint256"}],"name":"createPrediction","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"daoNoVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"daoVotes","outputs":[{"internalType":"bool","name":"hasVoted","type":"bool"},{"internalType":"bool","name":"vote","type":"bool"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"daoVotingDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"daoYesVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getActivePredictions","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_astrologer","type":"address"}],"name":"getAstrologerPredictions","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_predictionId","type":"uint256"},{"internalType":"address","name":"_voter","type":"address"}],"name":"getDAOVote","outputs":[{"components":[{"internalType":"bool","name":"hasVoted","type":"bool"},{"internalType":"bool","name":"vote","type":"bool"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct WorldPredictionMarket.DAOVote","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_predictionId","type":"uint256"}],"name":"getDAOVoteCounts","outputs":[{"internalType":"uint256","name":"yesVotes","type":"uint256"},{"internalType":"uint256","name":"noVotes","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_predictionId","type":"uint256"}],"name":"getPrediction","outputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"astrologer","type":"address"},{"internalType":"uint256","name":"astrologerId","type":"uint256"},{"internalType":"string","name":"title","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"astrologerStake","type":"uint256"},{"internalType":"uint256","name":"totalVoterStake","type":"uint256"},{"internalType":"uint256","name":"yesVoterStake","type":"uint256"},{"internalType":"uint256","name":"noVoterStake","type":"uint256"},{"internalType":"uint256","name":"totalVoters","type":"uint256"},{"internalType":"bool","name":"isResolved","type":"bool"},{"internalType":"bool","name":"outcome","type":"bool"},{"internalType":"bool","name":"daoVotingActive","type":"bool"},{"internalType":"uint256","name":"createdAt","type":"uint256"},{"internalType":"uint256","name":"resolvedAt","type":"uint256"}],"internalType":"struct WorldPredictionMarket.WorldPrediction","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getUserVotes","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_predictionId","type":"uint256"},{"internalType":"address","name":"_voter","type":"address"}],"name":"getVote","outputs":[{"components":[{"internalType":"bool","name":"hasVoted","type":"bool"},{"internalType":"bool","name":"vote","type":"bool"},{"internalType":"uint256","name":"stakeAmount","type":"uint256"},{"internalType":"bool","name":"rewardClaimed","type":"bool"}],"internalType":"struct WorldPredictionMarket.Vote","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_astrologerManager","type":"address"},{"internalType":"address","name":"_astroChartNFT","type":"address"},{"internalType":"address","name":"_zodiacDAO","type":"address"},{"internalType":"address","name":"_reputationScorer","type":"address"},{"internalType":"uint256","name":"_minAstrologerStake","type":"uint256"},{"internalType":"uint256","name":"_minVoterStake","type":"uint256"},{"internalType":"uint256","name":"_maxVoterStake","type":"uint256"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"maxVoterStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minAstrologerStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minVoterStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"platformFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"predictionStats","outputs":[{"internalType":"uint256","name":"totalPredictions","type":"uint256"},{"internalType":"uint256","name":"activePredictions","type":"uint256"},{"internalType":"uint256","name":"resolvedPredictions","type":"uint256"},{"internalType":"uint256","name":"totalVolume","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"predictions","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"astrologer","type":"address"},{"internalType":"uint256","name":"astrologerId","type":"uint256"},{"internalType":"string","name":"title","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"astrologerStake","type":"uint256"},{"internalType":"uint256","name":"totalVoterStake","type":"uint256"},{"internalType":"uint256","name":"yesVoterStake","type":"uint256"},{"internalType":"uint256","name":"noVoterStake","type":"uint256"},{"internalType":"uint256","name":"totalVoters","type":"uint256"},{"internalType":"bool","name":"isResolved","type":"bool"},{"internalType":"bool","name":"outcome","type":"bool"},{"internalType":"bool","name":"daoVotingActive","type":"bool"},{"internalType":"uint256","name":"createdAt","type":"uint256"},{"internalType":"uint256","name":"resolvedAt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"reputationScorer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_predictionId","type":"uint256"}],"name":"resolvePrediction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_astroChartNFT","type":"address"}],"name":"setAstroChartNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_astrologerManager","type":"address"}],"name":"setAstrologerManager","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_duration","type":"uint256"}],"name":"setDAOVotingDuration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_reputationScorer","type":"address"}],"name":"setReputationScorer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_astrologerRewardPercentage","type":"uint256"},{"internalType":"uint256","name":"_platformFeePercentage","type":"uint256"}],"name":"setRewardPercentages","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_minAstrologerStake","type":"uint256"},{"internalType":"uint256","name":"_minVoterStake","type":"uint256"},{"internalType":"uint256","name":"_maxVoterStake","type":"uint256"}],"name":"setStakeLimits","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_zodiacDAO","type":"address"}],"name":"setZodiacDAO","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_predictionId","type":"uint256"}],"name":"startDAOVoting","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"userVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_predictionId","type":"uint256"},{"internalType":"bool","name":"_vote","type":"bool"}],"name":"voteOnPrediction","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"votes","outputs":[{"internalType":"bool","name":"hasVoted","type":"bool"},{"internalType":"bool","name":"vote","type":"bool"},{"internalType":"uint256","name":"stakeAmount","type":"uint256"},{"internalType":"bool","name":"rewardClaimed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"zodiacDAO","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"castDAOVote(uint256,bool,uint256)":{"params":{"_outcome":"True if prediction was correct, false if incorrect","_predictionId":"The prediction ID","_tokenId":"The DAO token ID for voting"}},"claimReward(uint256)":{"params":{"_predictionId":"The prediction ID"}},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"createPrediction(string,string,uint256)":{"params":{"_deadline":"The deadline for the prediction","_description":"The detailed description","_title":"The title of the prediction"}},"owner()":{"details":"Returns the address of the current owner."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"resolvePrediction(uint256)":{"params":{"_predictionId":"The prediction ID"}},"startDAOVoting(uint256)":{"params":{"_predictionId":"The prediction ID"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"voteOnPrediction(uint256,bool)":{"params":{"_predictionId":"The prediction ID","_vote":"True for YES, false for NO"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60a08060405234620000e157306080526000549060ff8260081c166200008f575060ff8082160362000053575b6040516133bf9081620000e7823960805181818161216d0152818161226d01526126850152f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a1386200002c565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c80624fbbb01461296d5780630e8c47f21461294f578063256c52d31461292557806334954999146129025780633659cfe61461266057806337562b29146126185780633ccfd60b146125c8578063444a50c21461252d57806344cda485146124ed5780634f1ef2861461221e57806352d1902d1461215a578063533a12a5146121305780635aa76be01461210157806363ab68ef146120e357806365af67bd146120a35780636f502056146120175780636fd31a4114611fee578063700c836714611cae578063715018a614611c5157806372f022c214611c3357806373c84d2114611c0a5780637864066814611ba957806384ebaae1146119b2578063886dbdf9146118785780638b3511f7146118225780638da5cb5b146117f9578063950c7822146117865780639dcf0b7a1461174e578063a9d6921b14611689578063ab76c9ed14611660578063ae169a50146114ac578063b488202d14611483578063b6bb17541461144c578063bc3f931f14611390578063bc8581851461130d578063c8ab686a146112de578063cdd78cfc146112c0578063ce083d7314611280578063d23254b41461120e578063d472a57014610b20578063d75ebce514610b02578063e69fe3dc1461074b578063e77fc7a414610576578063e9725c2114610536578063f2fde38b146104a5578063f7333e33146104875763fe83bece1461022157600080fd5b3461048457602036600319011261048457806040916101e0835161024481612b0c565b8281528260208201528285820152606080820152606060808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201528261016082015282610180820152826101a0820152826101c0820152015260043580151580610478575b6102b9906130a7565b815260ca60205220600d604051916102d083612b0c565b8054835260018101546001600160a01b03166020840152600281015460408401526102fd60038201612b5c565b606084015261030e60048201612b5c565b6080840152600581015460a0840152600681015460c0840152600781015460e084015260088101546101008401526009810154610120840152600a81015461014084015260ff600b8201548181161515610160860152818160081c16151561018086015260101c1615156101a0840152600c8101546101c084015201546101e08201526040518091602082528051602083015260018060a01b036020820151166040830152604081015160608301526101e06103f46103de60608401516102006080870152610220860190612c02565b6080840151858203601f190160a0870152612c02565b9160a081015160c085015260c081015160e085015260e0810151610100850152610100810151610120850152610120810151610140850152610140810151610160850152610160810151151561018085015261018081015115156101a08501526101a081015115156101c08501526101c08101518285015201516102008301520390f35b5060c9548111156102b0565b80fd5b5034610484578060031936011261048457602060d654604051908152f35b5034610484576020366003190112610484576104bf612c42565b6104c7612d56565b6001600160a01b038116156104e2576104df90612dae565b80f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461048457602036600319011261048457610550612c42565b610558612d56565b60018060a01b03166001600160601b0360a01b60d454161760d45580f35b50346104845760e036600319011261048457610590612c42565b610598612c58565b906001600160a01b0390604435828116919082900361074657606435918383168093036107465785549360ff8560081c161594858096610739575b8015610722575b156106c65760ff1981166001178855856106b5575b5061060960ff885460081c1661060481612fe6565b612fe6565b61061233612dae565b86549561062460ff8860081c16612fe6565b816001600160601b0360a01b94168460d154161760d155168260d254161760d2558160d354161760d35560d454161760d45560843560d55560a43560d65560c43560d755607860d8556101f460d95560c860da55610680575080f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b61ffff1916610101178755386105ef565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156105da5750600160ff8216146105da565b50600160ff8216106105d3565b600080fd5b503461048457602080600319360112610afe576004359081151580610af2575b610774906130a7565b81835260ca815260408320600b810180549061079360ff8316156130eb565b60ff8260101c1615610ab4576107b0600584015460d85490613173565b4210610a6f5784865260cd84526107d4604087205460ce8652604088205490613173565b15610a365784865260cd845260408087205460ce86529087205461ffff199093169210600881901b61ff00169290921760011790559042600d82015560dc548015610a22576000190160dc5561082b60dd54613082565b60dd5583855260ca835260408520908561084e6007840154600685015490613173565b610869612710918261086260da5483613180565b0490613193565b828615610a185750828092610882829360d95490613180565b60019097015496049586906001600160a01b0316828215610a0f575bf115610a04575b6001810154600282015460d45488926001600160a01b0391908216908216806109a1575b505060d154169081151580610998575b61092e575b505050907f1ee447de28c6ff53bc0403bdbc8f4114866f73b12fc451b0605fc923b02b65bf9361091b836006600760609796015491015490613173565b906040519384528301526040820152a280f35b813b15610994578291604483926040519485938492631c8fdeb560e31b845260048401528a60248401525af180156109895761096b575b806108de565b6109789094939294612b28565b6109855790918538610965565b8580fd5b6040513d84823e3d90fd5b8280fd5b508015156108d9565b80949293943b15610994576044839260405194859384926313ef88d160e31b845260048401528b60248401525af180156109f9576109e4575b90818993926108c9565b6109f19098919298612b28565b9690386109da565b6040513d8b823e3d90fd5b6040513d87823e3d90fd5b506108fc61089e565b94505050506108a5565b634e487b7160e01b86526011600452602486fd5b60405162461bcd60e51b8152600481018590526011602482015270139bc8111053c81d9bdd195cc818d85cdd607a1b6044820152606490fd5b60405162461bcd60e51b815260048101859052601b60248201527f44414f20766f74696e6720706572696f64206e6f7420656e64656400000000006044820152606490fd5b60405162461bcd60e51b8152600481018590526016602482015275111053c81d9bdd1a5b99c81b9bdd081cdd185c9d195960521b6044820152606490fd5b5060c95482111561076b565b5080fd5b5034610484578060031936011261048457602060d954604051908152f35b506060366003190112610484576004356001600160401b038111610afe57610b4c903690600401612d38565b6024356001600160401b03811161099457610b6b903690600401612d38565b9060d55434106111c95780511561118c57815115611147574260443511156111025760d1546001600160a01b03169182611054575b6024906020600160c95401948560c9556040519384809263656d0c3960e01b82523360048301525afa918215610a0457859261101c575b5060405191610be583612b0c565b8483523360208401526040830152826060830152608082015260443560a08201523460c08201528360e08201528361010082015283610120820152836101408201528361016082015283610180820152836101a0820152426101c0820152836101e082015282845260ca6020526040842090805182556001820160018060a01b036020830151166001600160601b0360a01b8254161790556040810151600283015560608101518051906001600160401b038211610f43578190610cac6003860154612a86565b601f8111610fcc575b50602090601f8311600114610f62578892610f57575b50508160011b916000199060031b1c19161760038301555b60808101518051906001600160401b038211610f4357610d066004850154612a86565b601f8111610eff575b50918693918693602098508890601f8311600114610e845786938360409694600d946101e094610e0a9b92610e79575b50508160011b916000199060031b1c19161760048501555b60a0810151600585015560c0810151600685015560e0810151600785015561010081015160088501556101208101516009850155610140810151600a850155600b8401610db76101608301511515829060ff801983541691151516179055565b610180820151815461ff00191690151560081b61ff00161781556101a0820151815462ff0000191690151560101b62ff0000161790556101c0810151600c850155015191015533815260cf875220613046565b610e1560db54613082565b60db55610e2360dc54613082565b60dc55817f37f3edf7ed237f91fd6999d49411c7e10b3602f2e561a5adf21934775659c61a610e5d60405193606085526060850190612c02565b92604435868201523460408201528033940390a3604051908152f35b015190503880610d3f565b9060048501875289872091875b601f1985168110610ee5575093600184600d946101e094610e0a9b9860409a98601f19811610610ecc575b505050811b016004850155610d57565b015160001960f88460031b161c19169055388080610ebc565b8183015184558a9750600190930192918b01918b01610e91565b60048501885260208820601f840160051c810160208510610f3c575b601f830160051c82018110610f31575050610d0f565b898155600101610f1b565b5080610f1b565b634e487b7160e01b87526041600452602487fd5b015190503880610ccb565b600386018952602089209250601f198416895b818110610fb45750908460019594939210610f9b575b505050811b016003830155610ce3565b015160001960f88460031b161c19169055388080610f8b565b92936020600181928786015181550195019301610f75565b90915060038501885260208820601f840160051c810160208510611015575b90849392915b601f830160051c82018110611007575050610cb5565b8a8155859450600101610ff1565b5080610feb565b9091506020813d60201161104c575b8161103860209383612b3b565b8101031261104857519038610bd7565b8480fd5b3d915061102b565b604051631853e99560e11b8152336004820152602081602481875afa908115610a045785916110c8575b50610ba05760405162461bcd60e51b815260206004820152601760248201527f417374726f6c6f676572206e6f742076657269666965640000000000000000006044820152606490fd5b90506020813d82116110fa575b816110e260209383612b3b565b8101031261104857518015158103611048573861107e565b3d91506110d5565b60405162461bcd60e51b815260206004820152601e60248201527f446561646c696e65206d75737420626520696e207468652066757475726500006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f4465736372697074696f6e2063616e6e6f7420626520656d70747900000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260156024820152745469746c652063616e6e6f7420626520656d70747960581b6044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420617374726f6c6f676572207374616b650000006044820152606490fd5b503461048457604036600319011261048457604060809161122d612c58565b600435825260cb6020528282209060018060a01b031682526020522080549060ff60026001830154920154169060ff604051938181161515855260081c1615156020840152604083015215156060820152f35b50346104845760203660031901126104845761129a612c42565b6112a2612d56565b60018060a01b03166001600160601b0360a01b60d254161760d25580f35b5034610484578060031936011261048457602060da54604051908152f35b5034610484576060366003190112610484576112f8612d56565b60043560d55560243560d65560443560d75580f35b503461048457602080600319360112610afe576001600160a01b03611330612c42565b16825260cf815260408220916040518092808554928381520194835280832092905b828210611379576113758561136981890382612b3b565b60405191829182612cfd565b0390f35b835486529485019460019384019390910190611352565b50346104845760403660031901126104845760406080916113af612c58565b81606084516113bd81612af1565b82815282602082015282868201520152600435825260cb6020528282209060018060a01b03168252602052206040516113f581612af1565b81549160ff831615159283835260ff602084019160081c1615158152606060ff6002600185015494604087019586520154169301921515835260405193845251151560208401525160408301525115156060820152f35b5034610484578060031936011261048457608060db5460dc5460dd5460de5491604051938452602084015260408301526060820152f35b503461048457806003193601126104845760d2546040516001600160a01b039091168152602090f35b503461048457602080600319360112610afe5760043580151580611654575b6114d4906130a7565b80835260ca825260ff600b604085200154161561160f5780835260cb82526040832033845282526040832060ff815416156115da5760020191825460ff811661159c57849061152333856131a0565b948515918215611531578380f35b60ff1916600117905581908590611592575b8280929181923390f115611587577f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb7906040519384523393a3388080838180808380f35b6040513d85823e3d90fd5b6108fc9150611543565b60405162461bcd60e51b815260048101839052601660248201527514995dd85c9908185b1c9958591e4818db185a5b595960521b6044820152606490fd5b60405162461bcd60e51b815260048101849052600d60248201526c139bc81d9bdd1948199bdd5b99609a1b6044820152606490fd5b60405162461bcd60e51b815260048101839052601760248201527f50726564696374696f6e206e6f74207265736f6c7665640000000000000000006044820152606490fd5b5060c9548111156114cb565b503461048457806003193601126104845760d3546040516001600160a01b039091168152602090f35b503461048457806003193601126104845760dc546116a681613352565b906116b46040519283612b3b565b8082526116c3601f1991613352565b0191602092368484013760c95490928360015b838111156116ec57604051806113758782612cfd565b80825260ca835260ff600b6040842001541615611712575b61170d90613082565b6116d6565b94845181101561173a5761173281878561170d9460051b89010152613082565b959050611704565b634e487b7160e01b82526032600452602482fd5b503461048457602036600319011261048457604090600435815260cd60205281808220549160ce602052205482519182526020820152f35b503461048457602080600319360112610afe576001600160a01b036117a9612c42565b16825260d0815260408220916040518092808554928381520194835280832092905b8282106117e2576113758561136981890382612b3b565b8354865294850194600193840193909101906117cb565b50346104845780600319360112610484576033546040516001600160a01b039091168152602090f35b50346104845760403660031901126104845761183c612c42565b6001600160a01b0316815260d0602052604081208054602435929083101561048457602061186a8484612c6e565b90546040519160031b1c8152f35b503461048457602036600319011261048457600435801515806119a6575b61189f906130a7565b80825260ca60205260408220600b81019060058254916118c260ff8416156130eb565b015442106119615760ff8160101c1661191c57620100009062ff000019161790557fc83104e48f44c8c7b89a4dec1259a93bffcef18013dc1ac5891a260de98a50e5602061191260d85442613173565b604051908152a280f35b60405162461bcd60e51b815260206004820152601960248201527f44414f20766f74696e6720616c726561647920616374697665000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f50726564696374696f6e20646561646c696e65206e6f742072656163686564006044820152606490fd5b5060c954811115611896565b5034610484576060366003190112610484576004356119cf612cee565b9060443581151580611b9d575b6119e5906130a7565b818452602060ca815260ff600b604087200154611a04828216156130eb565b60101c1615611b615782855260cc8152604085203386528152611a2e60ff60408720541615613137565b611a37336132c9565b15611b2a577ff34f077f143d412407a903c03d8d2132b5dd9c006763fdf1fc57f5133610e64f91611b0891604051611a6e81612ac0565b6001815260018282018815158152611acb6040840191868352898c5260cc865260408c20338d528652611ab460408d2095511515869060ff801983541691151516179055565b51845461ff00191690151560081b61ff0016178455565b519101558515611b0e5760cd908588525260408620611aea8154613082565b90555b60408051951515865260208601919091523394918291820190565b0390a380f35b60ce908588525260408620611b238154613082565b9055611aed565b6064906040519062461bcd60e51b82526004820152601060248201526f2737ba1030902220a79036b2b6b132b960811b6044820152fd5b6064906040519062461bcd60e51b82526004820152601560248201527444414f20766f74696e67206e6f742061637469766560581b6044820152fd5b5060c9548211156119dc565b5034610484576040366003190112610484576040606091611bc8612c58565b600435825260cc6020528282209060018060a01b03168252602052206001815491015460ff604051928181161515845260081c16151560208301526040820152f35b503461048457806003193601126104845760d4546040516001600160a01b039091168152602090f35b5034610484578060031936011261048457602060d854604051908152f35b5034610484578060031936011261048457611c6a612d56565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50604036600319011261048457600435611cc6612cee565b9080151580611fe2575b611cd9906130a7565b60d6543410611f9d5760d7543411611f6057808352602060ca815260408420611d0960ff600b83015416156130eb565b6005810154421015611f255782855260cb8252604085203386528252611d3660ff60408720541615613137565b611d3f336132c9565b15611ee05760068101543410611e8b579060d091611de2604051611d6281612af1565b600181526002888583018915158152611dc66040850191348352611daf604060608801958087528d815260cb8c528181203382528c522096511515879060ff801983541691151516179055565b51855461ff00191690151560081b61ff0016178555565b51600184015551151591019060ff801983541691151516179055565b60078101611df1348254613173565b9055600a8101611e018154613082565b90558415611e7657600801611e17348254613173565b90555b33855252611e2b8160408520613046565b611e373460de54613173565b60de5560408051921515835234602084015233927fcbdf6214089cba887ecbf35a0b6a734589959c9763342c756bb2a80ca2bc9f6e9181908101611b08565b600901611e84348254613173565b9055611e1a565b60405162461bcd60e51b815260048101839052602760248201527f566f746572207374616b65206d757374206265203e3d20617374726f6c6f676560448201526672207374616b6560c81b6064820152608490fd5b60405162461bcd60e51b815260048101839052601f60248201527f4d757374206f776e20417374726f4368617274204e465420746f20766f7465006044820152606490fd5b60405162461bcd60e51b8152600481018390526013602482015272159bdd1a5b99c81c195c9a5bd908195b991959606a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260156024820152740a6e8c2d6ca40c2dadeeadce840e8dede40d0d2ced605b1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e7420766f746572207374616b6500000000000000006044820152606490fd5b5060c954811115611cd0565b503461048457806003193601126104845760d1546040516001600160a01b039091168152602090f35b503461048457604036600319011261048457602435600435612037612d56565b6103e86120448383613173565b116120525760d95560da5580f35b60405162461bcd60e51b815260206004820152602360248201527f546f74616c2070657263656e74616765732063616e6e6f74206578636565642060448201526231302560e81b6064820152608490fd5b5034610484576020366003190112610484576120bd612c42565b6120c5612d56565b60018060a01b03166001600160601b0360a01b60d354161760d35580f35b5034610484578060031936011261048457602060d554604051908152f35b5034610484576040366003190112610484576020612128612120612c58565b6004356131a0565b604051908152f35b5034610484576020366003190112610484576040602091600435815260cd83522054604051908152f35b50346104845780600319360112610484577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036121b357602060405160008051602061336a8339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b50604036600319011261048457612233612c42565b6024356001600160401b038111610994573660238201121561099457612263903690602481600401359101612cb7565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692919061229d30851415612df7565b6122ba60008051602061336a833981519152948286541614612e58565b6122c2612d56565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156122f85750506104df9150612eb9565b8216604051936352d1902d60e01b85526020948581600481865afa8791816124ba575b5061237c5760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b94929394036124635761238e84612eb9565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8580a281511580159061245b575b6123c8575b50505080f35b612449928480604051946123db86612ac0565b602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c85870152660819985a5b195960ca1b60408701528481519101845af4903d15612452573d61242d81612c9c565b9061243b6040519283612b3b565b81528681943d92013e612f49565b503880806123c2565b60609250612f49565b5060016123bd565b60405162461bcd60e51b815260048101839052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508681813d83116124e6575b6124d28183612b3b565b810103126124e25751903861231b565b8780fd5b503d6124c8565b503461048457602036600319011261048457612507612c42565b61250f612d56565b60018060a01b03166001600160601b0360a01b60d154161760d15580f35b503461048457604036600319011261048457604060609161254c612c58565b8183805161255981612ac0565b8281528260208201520152600435825260cc6020528282209060018060a01b031682526020522060405161258c81612ac0565b81546040600160ff831615159485855260ff602086019460081c1615158452015492019182526040519283525115156020830152516040820152f35b50346104845780600319360112610484576125e1612d56565b8080808060018060a01b0360335416479082821561260f575bf1156126035780f35b604051903d90823e3d90fd5b506108fc6125fa565b503461048457604036600319011261048457612632612c42565b6001600160a01b0316815260cf602052604081208054602435929083101561048457602061186a8484612c6e565b503461048457602080600319360112610afe5761267b612c42565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166126b230821415612df7565b6126cf60008051602061336a833981519152918383541614612e58565b6126d7612d56565b60405190848201928284106001600160401b03851117610f43578360405286835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143541660001461273257505050506104df9150612eb9565b8492939416906040516352d1902d60e01b81528681600481865afa8891816128cf575b506127b65760405162461bcd60e51b815260048101889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9593949503612878576127c882612eb9565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8680a284835115801590612871575b612805575b505050505080f35b80612866956040519561281787612ac0565b602787527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c86880152660819985a5b195960ca1b60408801525190845af4903d15612452573d61242d81612c9c565b5038808080846127fd565b50806127f8565b60405162461bcd60e51b815260048101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508781813d83116128fb575b6128e78183612b3b565b810103126128f757519038612755565b8880fd5b503d6128dd565b50346104845760203660031901126104845761291c612d56565b60043560d85580f35b5034610484576020366003190112610484576040602091600435815260ce83522054604051908152f35b5034610484578060031936011261048457602060d754604051908152f35b503461048457602036600319011261048457600435815260ca602052604090208054600182015460028301546001600160a01b0390911692906129b260038301612b5c565b916129bf60048201612b5c565b9260058201549360068301546007840154600885015490600986015492600a87015494600b88015496600c89015498600d0154996040519d8e809e81526020015260408d01528b6102006060819201528c01612a1a91612c02565b8b810360808d0152612a2b91612c02565b9860a08b015260c08a015260e089015261010088015261012087015261014086015260ff811615156101608601528060081c60ff16151561018086015260101c60ff1615156101a08501526101c08401526101e08301520390f35b90600182811c92168015612ab6575b6020831014612aa057565b634e487b7160e01b600052602260045260246000fd5b91607f1691612a95565b606081019081106001600160401b03821117612adb57604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b03821117612adb57604052565b61020081019081106001600160401b03821117612adb57604052565b6001600160401b038111612adb57604052565b90601f801991011681019081106001600160401b03821117612adb57604052565b9060405191826000825492612b7084612a86565b908184526001948581169081600014612bdf5750600114612b9c575b5050612b9a92500383612b3b565b565b9093915060005260209081600020936000915b818310612bc7575050612b9a93508201013880612b8c565b85548884018501529485019487945091830191612baf565b915050612b9a94506020925060ff191682840152151560051b8201013880612b8c565b919082519283825260005b848110612c2e575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201612c0d565b600435906001600160a01b038216820361074657565b602435906001600160a01b038216820361074657565b8054821015612c865760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6001600160401b038111612adb57601f01601f191660200190565b929192612cc382612c9c565b91612cd16040519384612b3b565b829481845281830111610746578281602093846000960137010152565b60243590811515820361074657565b6020908160408183019282815285518094520193019160005b828110612d24575050505090565b835185529381019392810192600101612d16565b9080601f8301121561074657816020612d5393359101612cb7565b90565b6033546001600160a01b03163303612d6a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b15612dfe57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15612e5f57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b803b15612eee5760008051602061336a83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b91929015612fab5750815115612f5d575090565b3b15612f665790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015612fbe5750805190602001fd5b60405162461bcd60e51b815260206004820152908190612fe2906024830190612c02565b0390fd5b15612fed57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b805468010000000000000000811015612adb5761306891600182018155612c6e565b819291549060031b600019811b9283911b16911916179055565b60001981146130915760010190565b634e487b7160e01b600052601160045260246000fd5b156130ae57565b60405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c1c99591a58dd1a5bdb881251605a1b6044820152606490fd5b156130f257565b60405162461bcd60e51b815260206004820152601b60248201527f50726564696374696f6e20616c7265616479207265736f6c76656400000000006044820152606490fd5b1561313e57565b60405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b9190820180921161309157565b8181029291811591840414171561309157565b9190820391821161309157565b600090815260ca602052604081209160cb602052604082209060018060a01b031682526020526040812091600b8101549060ff82161580156132bd575b80156132af575b6132a85760ff84549260081c169160ff8315159160081c161515036132a85761323c8261321a6007840154600685015490613173565b61322e612710918261086260da5483613180565b908692613291575b50613193565b91156132875760080154905b811590811561325957505050905090565b6001613269929493950154613180565b9161327357500490565b634e487b7160e01b81526012600452602490fd5b6009015490613248565b9091506132a060d95483613180565b049038613236565b5050905090565b5060ff6002850154166131e4565b5060ff845416156131dd565b60d2546001600160a01b039081169190821561334a57602460209260405194859384926370a0823160e01b84521660048301525afa60009181613317575b506133125750600090565b151590565b90916020823d8211613342575b8161333160209383612b3b565b810103126104845750519038613307565b3d9150613324565b505050600190565b6001600160401b038111612adb5760051b6020019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220d71107118490e872f156994dc33d3bf3a3f4ad2907b297fafdc09cab7acf719c64736f6c63430008110033","opcodes":"PUSH1 0xA0 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0xE1 JUMPI ADDRESS PUSH1 0x80 MSTORE PUSH1 0x0 SLOAD SWAP1 PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND PUSH3 0x8F JUMPI POP PUSH1 0xFF DUP1 DUP3 AND SUB PUSH3 0x53 JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x33BF SWAP1 DUP2 PUSH3 0xE7 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x216D ADD MSTORE DUP2 DUP2 PUSH2 0x226D ADD MSTORE PUSH2 0x2685 ADD MSTORE RETURN JUMPDEST PUSH1 0xFF SWAP1 DUP2 NOT AND OR PUSH1 0x0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0xFF DUP2 MSTORE LOG1 CODESIZE PUSH3 0x2C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x4FBBB0 EQ PUSH2 0x296D JUMPI DUP1 PUSH4 0xE8C47F2 EQ PUSH2 0x294F JUMPI DUP1 PUSH4 0x256C52D3 EQ PUSH2 0x2925 JUMPI DUP1 PUSH4 0x34954999 EQ PUSH2 0x2902 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x2660 JUMPI DUP1 PUSH4 0x37562B29 EQ PUSH2 0x2618 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x25C8 JUMPI DUP1 PUSH4 0x444A50C2 EQ PUSH2 0x252D JUMPI DUP1 PUSH4 0x44CDA485 EQ PUSH2 0x24ED JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x221E JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x215A JUMPI DUP1 PUSH4 0x533A12A5 EQ PUSH2 0x2130 JUMPI DUP1 PUSH4 0x5AA76BE0 EQ PUSH2 0x2101 JUMPI DUP1 PUSH4 0x63AB68EF EQ PUSH2 0x20E3 JUMPI DUP1 PUSH4 0x65AF67BD EQ PUSH2 0x20A3 JUMPI DUP1 PUSH4 0x6F502056 EQ PUSH2 0x2017 JUMPI DUP1 PUSH4 0x6FD31A41 EQ PUSH2 0x1FEE JUMPI DUP1 PUSH4 0x700C8367 EQ PUSH2 0x1CAE JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1C51 JUMPI DUP1 PUSH4 0x72F022C2 EQ PUSH2 0x1C33 JUMPI DUP1 PUSH4 0x73C84D21 EQ PUSH2 0x1C0A JUMPI DUP1 PUSH4 0x78640668 EQ PUSH2 0x1BA9 JUMPI DUP1 PUSH4 0x84EBAAE1 EQ PUSH2 0x19B2 JUMPI DUP1 PUSH4 0x886DBDF9 EQ PUSH2 0x1878 JUMPI DUP1 PUSH4 0x8B3511F7 EQ PUSH2 0x1822 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x17F9 JUMPI DUP1 PUSH4 0x950C7822 EQ PUSH2 0x1786 JUMPI DUP1 PUSH4 0x9DCF0B7A EQ PUSH2 0x174E JUMPI DUP1 PUSH4 0xA9D6921B EQ PUSH2 0x1689 JUMPI DUP1 PUSH4 0xAB76C9ED EQ PUSH2 0x1660 JUMPI DUP1 PUSH4 0xAE169A50 EQ PUSH2 0x14AC JUMPI DUP1 PUSH4 0xB488202D EQ PUSH2 0x1483 JUMPI DUP1 PUSH4 0xB6BB1754 EQ PUSH2 0x144C JUMPI DUP1 PUSH4 0xBC3F931F EQ PUSH2 0x1390 JUMPI DUP1 PUSH4 0xBC858185 EQ PUSH2 0x130D JUMPI DUP1 PUSH4 0xC8AB686A EQ PUSH2 0x12DE JUMPI DUP1 PUSH4 0xCDD78CFC EQ PUSH2 0x12C0 JUMPI DUP1 PUSH4 0xCE083D73 EQ PUSH2 0x1280 JUMPI DUP1 PUSH4 0xD23254B4 EQ PUSH2 0x120E JUMPI DUP1 PUSH4 0xD472A570 EQ PUSH2 0xB20 JUMPI DUP1 PUSH4 0xD75EBCE5 EQ PUSH2 0xB02 JUMPI DUP1 PUSH4 0xE69FE3DC EQ PUSH2 0x74B JUMPI DUP1 PUSH4 0xE77FC7A4 EQ PUSH2 0x576 JUMPI DUP1 PUSH4 0xE9725C21 EQ PUSH2 0x536 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4A5 JUMPI DUP1 PUSH4 0xF7333E33 EQ PUSH2 0x487 JUMPI PUSH4 0xFE83BECE EQ PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI DUP1 PUSH1 0x40 SWAP2 PUSH2 0x1E0 DUP4 MLOAD PUSH2 0x244 DUP2 PUSH2 0x2B0C JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP6 DUP3 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE DUP3 PUSH1 0xE0 DUP3 ADD MSTORE DUP3 PUSH2 0x100 DUP3 ADD MSTORE DUP3 PUSH2 0x120 DUP3 ADD MSTORE DUP3 PUSH2 0x140 DUP3 ADD MSTORE DUP3 PUSH2 0x160 DUP3 ADD MSTORE DUP3 PUSH2 0x180 DUP3 ADD MSTORE DUP3 PUSH2 0x1A0 DUP3 ADD MSTORE DUP3 PUSH2 0x1C0 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 PUSH2 0x478 JUMPI JUMPDEST PUSH2 0x2B9 SWAP1 PUSH2 0x30A7 JUMP JUMPDEST DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 MSTORE KECCAK256 PUSH1 0xD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2D0 DUP4 PUSH2 0x2B0C JUMP JUMPDEST DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2FD PUSH1 0x3 DUP3 ADD PUSH2 0x2B5C JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x30E PUSH1 0x4 DUP3 ADD PUSH2 0x2B5C JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 DUP2 ADD SLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x7 DUP2 ADD SLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 DUP2 ADD SLOAD PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 DUP2 ADD SLOAD PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA DUP2 ADD SLOAD PUSH2 0x140 DUP5 ADD MSTORE PUSH1 0xFF PUSH1 0xB DUP3 ADD SLOAD DUP2 DUP2 AND ISZERO ISZERO PUSH2 0x160 DUP7 ADD MSTORE DUP2 DUP2 PUSH1 0x8 SHR AND ISZERO ISZERO PUSH2 0x180 DUP7 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO PUSH2 0x1A0 DUP5 ADD MSTORE PUSH1 0xC DUP2 ADD SLOAD PUSH2 0x1C0 DUP5 ADD MSTORE ADD SLOAD PUSH2 0x1E0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD DUP1 SWAP2 PUSH1 0x20 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1E0 PUSH2 0x3F4 PUSH2 0x3DE PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x200 PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x220 DUP7 ADD SWAP1 PUSH2 0x2C02 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD DUP6 DUP3 SUB PUSH1 0x1F NOT ADD PUSH1 0xA0 DUP8 ADD MSTORE PUSH2 0x2C02 JUMP JUMPDEST SWAP2 PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x100 DUP6 ADD MSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x120 DUP2 ADD MLOAD PUSH2 0x140 DUP6 ADD MSTORE PUSH2 0x140 DUP2 ADD MLOAD PUSH2 0x160 DUP6 ADD MSTORE PUSH2 0x160 DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x180 DUP6 ADD MSTORE PUSH2 0x180 DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x1A0 DUP6 ADD MSTORE PUSH2 0x1A0 DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x1C0 DUP6 ADD MSTORE PUSH2 0x1C0 DUP2 ADD MLOAD DUP3 DUP6 ADD MSTORE ADD MLOAD PUSH2 0x200 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST POP PUSH1 0xC9 SLOAD DUP2 GT ISZERO PUSH2 0x2B0 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH1 0xD6 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x4BF PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0x4C7 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x4E2 JUMPI PUSH2 0x4DF SWAP1 PUSH2 0x2DAE JUMP JUMPDEST DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x550 PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0x558 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xD4 SLOAD AND OR PUSH1 0xD4 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x590 PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0x598 PUSH2 0x2C58 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x44 CALLDATALOAD DUP3 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x746 JUMPI PUSH1 0x64 CALLDATALOAD SWAP2 DUP4 DUP4 AND DUP1 SWAP4 SUB PUSH2 0x746 JUMPI DUP6 SLOAD SWAP4 PUSH1 0xFF DUP6 PUSH1 0x8 SHR AND ISZERO SWAP5 DUP6 DUP1 SWAP7 PUSH2 0x739 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x722 JUMPI JUMPDEST ISZERO PUSH2 0x6C6 JUMPI PUSH1 0xFF NOT DUP2 AND PUSH1 0x1 OR DUP9 SSTORE DUP6 PUSH2 0x6B5 JUMPI JUMPDEST POP PUSH2 0x609 PUSH1 0xFF DUP9 SLOAD PUSH1 0x8 SHR AND PUSH2 0x604 DUP2 PUSH2 0x2FE6 JUMP JUMPDEST PUSH2 0x2FE6 JUMP JUMPDEST PUSH2 0x612 CALLER PUSH2 0x2DAE JUMP JUMPDEST DUP7 SLOAD SWAP6 PUSH2 0x624 PUSH1 0xFF DUP9 PUSH1 0x8 SHR AND PUSH2 0x2FE6 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP5 AND DUP5 PUSH1 0xD1 SLOAD AND OR PUSH1 0xD1 SSTORE AND DUP3 PUSH1 0xD2 SLOAD AND OR PUSH1 0xD2 SSTORE DUP2 PUSH1 0xD3 SLOAD AND OR PUSH1 0xD3 SSTORE PUSH1 0xD4 SLOAD AND OR PUSH1 0xD4 SSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0xD5 SSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0xD6 SSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0xD7 SSTORE PUSH1 0x78 PUSH1 0xD8 SSTORE PUSH2 0x1F4 PUSH1 0xD9 SSTORE PUSH1 0xC8 PUSH1 0xDA SSTORE PUSH2 0x680 JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0xFF00 NOT AND DUP2 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR DUP8 SSTORE CODESIZE PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5DA JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP3 AND EQ PUSH2 0x5DA JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP3 AND LT PUSH2 0x5D3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAFE JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP1 PUSH2 0xAF2 JUMPI JUMPDEST PUSH2 0x774 SWAP1 PUSH2 0x30A7 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0xCA DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xB DUP2 ADD DUP1 SLOAD SWAP1 PUSH2 0x793 PUSH1 0xFF DUP4 AND ISZERO PUSH2 0x30EB JUMP JUMPDEST PUSH1 0xFF DUP3 PUSH1 0x10 SHR AND ISZERO PUSH2 0xAB4 JUMPI PUSH2 0x7B0 PUSH1 0x5 DUP5 ADD SLOAD PUSH1 0xD8 SLOAD SWAP1 PUSH2 0x3173 JUMP JUMPDEST TIMESTAMP LT PUSH2 0xA6F JUMPI DUP5 DUP7 MSTORE PUSH1 0xCD DUP5 MSTORE PUSH2 0x7D4 PUSH1 0x40 DUP8 KECCAK256 SLOAD PUSH1 0xCE DUP7 MSTORE PUSH1 0x40 DUP9 KECCAK256 SLOAD SWAP1 PUSH2 0x3173 JUMP JUMPDEST ISZERO PUSH2 0xA36 JUMPI DUP5 DUP7 MSTORE PUSH1 0xCD DUP5 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 SLOAD PUSH1 0xCE DUP7 MSTORE SWAP1 DUP8 KECCAK256 SLOAD PUSH2 0xFFFF NOT SWAP1 SWAP4 AND SWAP3 LT PUSH1 0x8 DUP2 SWAP1 SHL PUSH2 0xFF00 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0x1 OR SWAP1 SSTORE SWAP1 TIMESTAMP PUSH1 0xD DUP3 ADD SSTORE PUSH1 0xDC SLOAD DUP1 ISZERO PUSH2 0xA22 JUMPI PUSH1 0x0 NOT ADD PUSH1 0xDC SSTORE PUSH2 0x82B PUSH1 0xDD SLOAD PUSH2 0x3082 JUMP JUMPDEST PUSH1 0xDD SSTORE DUP4 DUP6 MSTORE PUSH1 0xCA DUP4 MSTORE PUSH1 0x40 DUP6 KECCAK256 SWAP1 DUP6 PUSH2 0x84E PUSH1 0x7 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD SWAP1 PUSH2 0x3173 JUMP JUMPDEST PUSH2 0x869 PUSH2 0x2710 SWAP2 DUP3 PUSH2 0x862 PUSH1 0xDA SLOAD DUP4 PUSH2 0x3180 JUMP JUMPDEST DIV SWAP1 PUSH2 0x3193 JUMP JUMPDEST DUP3 DUP7 ISZERO PUSH2 0xA18 JUMPI POP DUP3 DUP1 SWAP3 PUSH2 0x882 DUP3 SWAP4 PUSH1 0xD9 SLOAD SWAP1 PUSH2 0x3180 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP8 ADD SLOAD SWAP7 DIV SWAP6 DUP7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 DUP3 ISZERO PUSH2 0xA0F JUMPI JUMPDEST CALL ISZERO PUSH2 0xA04 JUMPI JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0xD4 SLOAD DUP9 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 DUP3 AND SWAP1 DUP3 AND DUP1 PUSH2 0x9A1 JUMPI JUMPDEST POP POP PUSH1 0xD1 SLOAD AND SWAP1 DUP2 ISZERO ISZERO DUP1 PUSH2 0x998 JUMPI JUMPDEST PUSH2 0x92E JUMPI JUMPDEST POP POP POP SWAP1 PUSH32 0x1EE447DE28C6FF53BC0403BDBC8F4114866F73B12FC451B0605FC923B02B65BF SWAP4 PUSH2 0x91B DUP4 PUSH1 0x6 PUSH1 0x7 PUSH1 0x60 SWAP8 SWAP7 ADD SLOAD SWAP2 ADD SLOAD SWAP1 PUSH2 0x3173 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE LOG2 DUP1 RETURN JUMPDEST DUP2 EXTCODESIZE ISZERO PUSH2 0x994 JUMPI DUP3 SWAP2 PUSH1 0x44 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH4 0x1C8FDEB5 PUSH1 0xE3 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE DUP11 PUSH1 0x24 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x989 JUMPI PUSH2 0x96B JUMPI JUMPDEST DUP1 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0x978 SWAP1 SWAP5 SWAP4 SWAP3 SWAP5 PUSH2 0x2B28 JUMP JUMPDEST PUSH2 0x985 JUMPI SWAP1 SWAP2 DUP6 CODESIZE PUSH2 0x965 JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 ISZERO ISZERO PUSH2 0x8D9 JUMP JUMPDEST DUP1 SWAP5 SWAP3 SWAP4 SWAP5 EXTCODESIZE ISZERO PUSH2 0x994 JUMPI PUSH1 0x44 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH4 0x13EF88D1 PUSH1 0xE3 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE DUP12 PUSH1 0x24 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x9F9 JUMPI PUSH2 0x9E4 JUMPI JUMPDEST SWAP1 DUP2 DUP10 SWAP4 SWAP3 PUSH2 0x8C9 JUMP JUMPDEST PUSH2 0x9F1 SWAP1 SWAP9 SWAP2 SWAP3 SWAP9 PUSH2 0x2B28 JUMP JUMPDEST SWAP7 SWAP1 CODESIZE PUSH2 0x9DA JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH2 0x89E JUMP JUMPDEST SWAP5 POP POP POP POP PUSH2 0x8A5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x139BC8111053C81D9BDD195CC818D85CDD PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44414F20766F74696E6720706572696F64206E6F7420656E6465640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x111053C81D9BDD1A5B99C81B9BDD081CDD185C9D1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD DUP3 GT ISZERO PUSH2 0x76B JUMP JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH1 0xD9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAFE JUMPI PUSH2 0xB4C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2D38 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x994 JUMPI PUSH2 0xB6B SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2D38 JUMP JUMPDEST SWAP1 PUSH1 0xD5 SLOAD CALLVALUE LT PUSH2 0x11C9 JUMPI DUP1 MLOAD ISZERO PUSH2 0x118C JUMPI DUP2 MLOAD ISZERO PUSH2 0x1147 JUMPI TIMESTAMP PUSH1 0x44 CALLDATALOAD GT ISZERO PUSH2 0x1102 JUMPI PUSH1 0xD1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 PUSH2 0x1054 JUMPI JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x20 PUSH1 0x1 PUSH1 0xC9 SLOAD ADD SWAP5 DUP6 PUSH1 0xC9 SSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x656D0C39 PUSH1 0xE0 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0xA04 JUMPI DUP6 SWAP3 PUSH2 0x101C JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 PUSH2 0xBE5 DUP4 PUSH2 0x2B0C JUMP JUMPDEST DUP5 DUP4 MSTORE CALLER PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE DUP3 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE CALLVALUE PUSH1 0xC0 DUP3 ADD MSTORE DUP4 PUSH1 0xE0 DUP3 ADD MSTORE DUP4 PUSH2 0x100 DUP3 ADD MSTORE DUP4 PUSH2 0x120 DUP3 ADD MSTORE DUP4 PUSH2 0x140 DUP3 ADD MSTORE DUP4 PUSH2 0x160 DUP3 ADD MSTORE DUP4 PUSH2 0x180 DUP3 ADD MSTORE DUP4 PUSH2 0x1A0 DUP3 ADD MSTORE TIMESTAMP PUSH2 0x1C0 DUP3 ADD MSTORE DUP4 PUSH2 0x1E0 DUP3 ADD MSTORE DUP3 DUP5 MSTORE PUSH1 0xCA PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 SWAP1 DUP1 MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xF43 JUMPI DUP2 SWAP1 PUSH2 0xCAC PUSH1 0x3 DUP7 ADD SLOAD PUSH2 0x2A86 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xFCC JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xF62 JUMPI DUP9 SWAP3 PUSH2 0xF57 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 DUP4 ADD SSTORE JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xF43 JUMPI PUSH2 0xD06 PUSH1 0x4 DUP6 ADD SLOAD PUSH2 0x2A86 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xEFF JUMPI JUMPDEST POP SWAP2 DUP7 SWAP4 SWAP2 DUP7 SWAP4 PUSH1 0x20 SWAP9 POP DUP9 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xE84 JUMPI DUP7 SWAP4 DUP4 PUSH1 0x40 SWAP7 SWAP5 PUSH1 0xD SWAP5 PUSH2 0x1E0 SWAP5 PUSH2 0xE0A SWAP12 SWAP3 PUSH2 0xE79 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x4 DUP6 ADD SSTORE JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x5 DUP6 ADD SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 DUP6 ADD SSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0x7 DUP6 ADD SSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH1 0x8 DUP6 ADD SSTORE PUSH2 0x120 DUP2 ADD MLOAD PUSH1 0x9 DUP6 ADD SSTORE PUSH2 0x140 DUP2 ADD MLOAD PUSH1 0xA DUP6 ADD SSTORE PUSH1 0xB DUP5 ADD PUSH2 0xDB7 PUSH2 0x160 DUP4 ADD MLOAD ISZERO ISZERO DUP3 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x180 DUP3 ADD MLOAD DUP2 SLOAD PUSH2 0xFF00 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x8 SHL PUSH2 0xFF00 AND OR DUP2 SSTORE PUSH2 0x1A0 DUP3 ADD MLOAD DUP2 SLOAD PUSH3 0xFF0000 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x10 SHL PUSH3 0xFF0000 AND OR SWAP1 SSTORE PUSH2 0x1C0 DUP2 ADD MLOAD PUSH1 0xC DUP6 ADD SSTORE ADD MLOAD SWAP2 ADD SSTORE CALLER DUP2 MSTORE PUSH1 0xCF DUP8 MSTORE KECCAK256 PUSH2 0x3046 JUMP JUMPDEST PUSH2 0xE15 PUSH1 0xDB SLOAD PUSH2 0x3082 JUMP JUMPDEST PUSH1 0xDB SSTORE PUSH2 0xE23 PUSH1 0xDC SLOAD PUSH2 0x3082 JUMP JUMPDEST PUSH1 0xDC SSTORE DUP2 PUSH32 0x37F3EDF7ED237F91FD6999D49411C7E10B3602F2E561A5ADF21934775659C61A PUSH2 0xE5D PUSH1 0x40 MLOAD SWAP4 PUSH1 0x60 DUP6 MSTORE PUSH1 0x60 DUP6 ADD SWAP1 PUSH2 0x2C02 JUMP JUMPDEST SWAP3 PUSH1 0x44 CALLDATALOAD DUP7 DUP3 ADD MSTORE CALLVALUE PUSH1 0x40 DUP3 ADD MSTORE DUP1 CALLER SWAP5 SUB SWAP1 LOG3 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0xD3F JUMP JUMPDEST SWAP1 PUSH1 0x4 DUP6 ADD DUP8 MSTORE DUP10 DUP8 KECCAK256 SWAP2 DUP8 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0xEE5 JUMPI POP SWAP4 PUSH1 0x1 DUP5 PUSH1 0xD SWAP5 PUSH2 0x1E0 SWAP5 PUSH2 0xE0A SWAP12 SWAP9 PUSH1 0x40 SWAP11 SWAP9 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xECC JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x4 DUP6 ADD SSTORE PUSH2 0xD57 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xEBC JUMP JUMPDEST DUP2 DUP4 ADD MLOAD DUP5 SSTORE DUP11 SWAP8 POP PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP12 ADD SWAP2 DUP12 ADD PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x4 DUP6 ADD DUP9 MSTORE PUSH1 0x20 DUP9 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0xF3C JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0xF31 JUMPI POP POP PUSH2 0xD0F JUMP JUMPDEST DUP10 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xF1B JUMP JUMPDEST POP DUP1 PUSH2 0xF1B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0xCCB JUMP JUMPDEST PUSH1 0x3 DUP7 ADD DUP10 MSTORE PUSH1 0x20 DUP10 KECCAK256 SWAP3 POP PUSH1 0x1F NOT DUP5 AND DUP10 JUMPDEST DUP2 DUP2 LT PUSH2 0xFB4 JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0xF9B JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 DUP4 ADD SSTORE PUSH2 0xCE3 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xF8B JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0xF75 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x3 DUP6 ADD DUP9 MSTORE PUSH1 0x20 DUP9 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0x1015 JUMPI JUMPDEST SWAP1 DUP5 SWAP4 SWAP3 SWAP2 JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x1007 JUMPI POP POP PUSH2 0xCB5 JUMP JUMPDEST DUP11 DUP2 SSTORE DUP6 SWAP5 POP PUSH1 0x1 ADD PUSH2 0xFF1 JUMP JUMPDEST POP DUP1 PUSH2 0xFEB JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x104C JUMPI JUMPDEST DUP2 PUSH2 0x1038 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1048 JUMPI MLOAD SWAP1 CODESIZE PUSH2 0xBD7 JUMP JUMPDEST DUP5 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x102B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1853E995 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 DUP8 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA04 JUMPI DUP6 SWAP2 PUSH2 0x10C8 JUMPI JUMPDEST POP PUSH2 0xBA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x417374726F6C6F676572206E6F74207665726966696564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x10FA JUMPI JUMPDEST DUP2 PUSH2 0x10E2 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1048 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x1048 JUMPI CODESIZE PUSH2 0x107E JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x10D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446561646C696E65206D75737420626520696E20746865206675747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4465736372697074696F6E2063616E6E6F7420626520656D7074790000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x5469746C652063616E6E6F7420626520656D707479 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420617374726F6C6F676572207374616B65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 PUSH1 0x80 SWAP2 PUSH2 0x122D PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0xCB PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0xFF PUSH1 0x2 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 ADD SLOAD AND SWAP1 PUSH1 0xFF PUSH1 0x40 MLOAD SWAP4 DUP2 DUP2 AND ISZERO ISZERO DUP6 MSTORE PUSH1 0x8 SHR AND ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x129A PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0x12A2 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xD2 SLOAD AND OR PUSH1 0xD2 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH1 0xDA SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x12F8 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0xD5 SSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0xD6 SSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0xD7 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAFE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1330 PUSH2 0x2C42 JUMP JUMPDEST AND DUP3 MSTORE PUSH1 0xCF DUP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP2 PUSH1 0x40 MLOAD DUP1 SWAP3 DUP1 DUP6 SLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP5 DUP4 MSTORE DUP1 DUP4 KECCAK256 SWAP3 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x1379 JUMPI PUSH2 0x1375 DUP6 PUSH2 0x1369 DUP2 DUP10 SUB DUP3 PUSH2 0x2B3B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2CFD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP4 SLOAD DUP7 MSTORE SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1352 JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 PUSH1 0x80 SWAP2 PUSH2 0x13AF PUSH2 0x2C58 JUMP JUMPDEST DUP2 PUSH1 0x60 DUP5 MLOAD PUSH2 0x13BD DUP2 PUSH2 0x2AF1 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP7 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0xCB PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x13F5 DUP2 PUSH2 0x2AF1 JUMP JUMPDEST DUP2 SLOAD SWAP2 PUSH1 0xFF DUP4 AND ISZERO ISZERO SWAP3 DUP4 DUP4 MSTORE PUSH1 0xFF PUSH1 0x20 DUP5 ADD SWAP2 PUSH1 0x8 SHR AND ISZERO ISZERO DUP2 MSTORE PUSH1 0x60 PUSH1 0xFF PUSH1 0x2 PUSH1 0x1 DUP6 ADD SLOAD SWAP5 PUSH1 0x40 DUP8 ADD SWAP6 DUP7 MSTORE ADD SLOAD AND SWAP4 ADD SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE MLOAD ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE MLOAD PUSH1 0x40 DUP4 ADD MSTORE MLOAD ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x80 PUSH1 0xDB SLOAD PUSH1 0xDC SLOAD PUSH1 0xDD SLOAD PUSH1 0xDE SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0xD2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAFE JUMPI PUSH1 0x4 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 PUSH2 0x1654 JUMPI JUMPDEST PUSH2 0x14D4 SWAP1 PUSH2 0x30A7 JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0xCA DUP3 MSTORE PUSH1 0xFF PUSH1 0xB PUSH1 0x40 DUP6 KECCAK256 ADD SLOAD AND ISZERO PUSH2 0x160F JUMPI DUP1 DUP4 MSTORE PUSH1 0xCB DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF DUP2 SLOAD AND ISZERO PUSH2 0x15DA JUMPI PUSH1 0x2 ADD SWAP2 DUP3 SLOAD PUSH1 0xFF DUP2 AND PUSH2 0x159C JUMPI DUP5 SWAP1 PUSH2 0x1523 CALLER DUP6 PUSH2 0x31A0 JUMP JUMPDEST SWAP5 DUP6 ISZERO SWAP2 DUP3 ISZERO PUSH2 0x1531 JUMPI DUP4 DUP1 RETURN JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 SWAP1 DUP6 SWAP1 PUSH2 0x1592 JUMPI JUMPDEST DUP3 DUP1 SWAP3 SWAP2 DUP2 SWAP3 CALLER SWAP1 CALL ISZERO PUSH2 0x1587 JUMPI PUSH32 0x24B5EFA61DD1CFC659205A97FB8ED868F3CB8C81922BAB2B96423E5DE1DE2CB7 SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE CALLER SWAP4 LOG3 CODESIZE DUP1 DUP1 DUP4 DUP2 DUP1 DUP1 DUP4 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x8FC SWAP2 POP PUSH2 0x1543 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14995DD85C9908185B1C9958591E4818DB185A5B5959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x139BC81D9BDD1948199BDD5B99 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726564696374696F6E206E6F74207265736F6C766564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD DUP2 GT ISZERO PUSH2 0x14CB JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0xD3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0xDC SLOAD PUSH2 0x16A6 DUP2 PUSH2 0x3352 JUMP JUMPDEST SWAP1 PUSH2 0x16B4 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH2 0x16C3 PUSH1 0x1F NOT SWAP2 PUSH2 0x3352 JUMP JUMPDEST ADD SWAP2 PUSH1 0x20 SWAP3 CALLDATASIZE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0xC9 SLOAD SWAP1 SWAP3 DUP4 PUSH1 0x1 JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x16EC JUMPI PUSH1 0x40 MLOAD DUP1 PUSH2 0x1375 DUP8 DUP3 PUSH2 0x2CFD JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0xCA DUP4 MSTORE PUSH1 0xFF PUSH1 0xB PUSH1 0x40 DUP5 KECCAK256 ADD SLOAD AND ISZERO PUSH2 0x1712 JUMPI JUMPDEST PUSH2 0x170D SWAP1 PUSH2 0x3082 JUMP JUMPDEST PUSH2 0x16D6 JUMP JUMPDEST SWAP5 DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x173A JUMPI PUSH2 0x1732 DUP2 DUP8 DUP6 PUSH2 0x170D SWAP5 PUSH1 0x5 SHL DUP10 ADD ADD MSTORE PUSH2 0x3082 JUMP JUMPDEST SWAP6 SWAP1 POP PUSH2 0x1704 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 SWAP1 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0xCD PUSH1 0x20 MSTORE DUP2 DUP1 DUP3 KECCAK256 SLOAD SWAP2 PUSH1 0xCE PUSH1 0x20 MSTORE KECCAK256 SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAFE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x17A9 PUSH2 0x2C42 JUMP JUMPDEST AND DUP3 MSTORE PUSH1 0xD0 DUP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP2 PUSH1 0x40 MLOAD DUP1 SWAP3 DUP1 DUP6 SLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP5 DUP4 MSTORE DUP1 DUP4 KECCAK256 SWAP3 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x17E2 JUMPI PUSH2 0x1375 DUP6 PUSH2 0x1369 DUP2 DUP10 SUB DUP3 PUSH2 0x2B3B JUMP JUMPDEST DUP4 SLOAD DUP7 MSTORE SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x17CB JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x183C PUSH2 0x2C42 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0xD0 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x24 CALLDATALOAD SWAP3 SWAP1 DUP4 LT ISZERO PUSH2 0x484 JUMPI PUSH1 0x20 PUSH2 0x186A DUP5 DUP5 PUSH2 0x2C6E JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH1 0x3 SHL SHR DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x4 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 PUSH2 0x19A6 JUMPI JUMPDEST PUSH2 0x189F SWAP1 PUSH2 0x30A7 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0xCA PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0xB DUP2 ADD SWAP1 PUSH1 0x5 DUP3 SLOAD SWAP2 PUSH2 0x18C2 PUSH1 0xFF DUP5 AND ISZERO PUSH2 0x30EB JUMP JUMPDEST ADD SLOAD TIMESTAMP LT PUSH2 0x1961 JUMPI PUSH1 0xFF DUP2 PUSH1 0x10 SHR AND PUSH2 0x191C JUMPI PUSH3 0x10000 SWAP1 PUSH3 0xFF0000 NOT AND OR SWAP1 SSTORE PUSH32 0xC83104E48F44C8C7B89A4DEC1259A93BFFCEF18013DC1AC5891A260DE98A50E5 PUSH1 0x20 PUSH2 0x1912 PUSH1 0xD8 SLOAD TIMESTAMP PUSH2 0x3173 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44414F20766F74696E6720616C72656164792061637469766500000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726564696374696F6E20646561646C696E65206E6F74207265616368656400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD DUP2 GT ISZERO PUSH2 0x1896 JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x19CF PUSH2 0x2CEE JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD DUP2 ISZERO ISZERO DUP1 PUSH2 0x1B9D JUMPI JUMPDEST PUSH2 0x19E5 SWAP1 PUSH2 0x30A7 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 PUSH1 0xCA DUP2 MSTORE PUSH1 0xFF PUSH1 0xB PUSH1 0x40 DUP8 KECCAK256 ADD SLOAD PUSH2 0x1A04 DUP3 DUP3 AND ISZERO PUSH2 0x30EB JUMP JUMPDEST PUSH1 0x10 SHR AND ISZERO PUSH2 0x1B61 JUMPI DUP3 DUP6 MSTORE PUSH1 0xCC DUP2 MSTORE PUSH1 0x40 DUP6 KECCAK256 CALLER DUP7 MSTORE DUP2 MSTORE PUSH2 0x1A2E PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD AND ISZERO PUSH2 0x3137 JUMP JUMPDEST PUSH2 0x1A37 CALLER PUSH2 0x32C9 JUMP JUMPDEST ISZERO PUSH2 0x1B2A JUMPI PUSH32 0xF34F077F143D412407A903C03D8D2132B5DD9C006763FDF1FC57F5133610E64F SWAP2 PUSH2 0x1B08 SWAP2 PUSH1 0x40 MLOAD PUSH2 0x1A6E DUP2 PUSH2 0x2AC0 JUMP JUMPDEST PUSH1 0x1 DUP2 MSTORE PUSH1 0x1 DUP3 DUP3 ADD DUP9 ISZERO ISZERO DUP2 MSTORE PUSH2 0x1ACB PUSH1 0x40 DUP5 ADD SWAP2 DUP7 DUP4 MSTORE DUP10 DUP13 MSTORE PUSH1 0xCC DUP7 MSTORE PUSH1 0x40 DUP13 KECCAK256 CALLER DUP14 MSTORE DUP7 MSTORE PUSH2 0x1AB4 PUSH1 0x40 DUP14 KECCAK256 SWAP6 MLOAD ISZERO ISZERO DUP7 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST MLOAD DUP5 SLOAD PUSH2 0xFF00 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x8 SHL PUSH2 0xFF00 AND OR DUP5 SSTORE JUMP JUMPDEST MLOAD SWAP2 ADD SSTORE DUP6 ISZERO PUSH2 0x1B0E JUMPI PUSH1 0xCD SWAP1 DUP6 DUP9 MSTORE MSTORE PUSH1 0x40 DUP7 KECCAK256 PUSH2 0x1AEA DUP2 SLOAD PUSH2 0x3082 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 ISZERO ISZERO DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER SWAP5 SWAP2 DUP3 SWAP2 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG3 DUP1 RETURN JUMPDEST PUSH1 0xCE SWAP1 DUP6 DUP9 MSTORE MSTORE PUSH1 0x40 DUP7 KECCAK256 PUSH2 0x1B23 DUP2 SLOAD PUSH2 0x3082 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x1AED JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x2737BA1030902220A79036B2B6B132B9 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x44414F20766F74696E67206E6F7420616374697665 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0xC9 SLOAD DUP3 GT ISZERO PUSH2 0x19DC JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 PUSH1 0x60 SWAP2 PUSH2 0x1BC8 PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0xCC PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 PUSH1 0x1 DUP2 SLOAD SWAP2 ADD SLOAD PUSH1 0xFF PUSH1 0x40 MLOAD SWAP3 DUP2 DUP2 AND ISZERO ISZERO DUP5 MSTORE PUSH1 0x8 SHR AND ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0xD4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH1 0xD8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH2 0x1C6A PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1CC6 PUSH2 0x2CEE JUMP JUMPDEST SWAP1 DUP1 ISZERO ISZERO DUP1 PUSH2 0x1FE2 JUMPI JUMPDEST PUSH2 0x1CD9 SWAP1 PUSH2 0x30A7 JUMP JUMPDEST PUSH1 0xD6 SLOAD CALLVALUE LT PUSH2 0x1F9D JUMPI PUSH1 0xD7 SLOAD CALLVALUE GT PUSH2 0x1F60 JUMPI DUP1 DUP4 MSTORE PUSH1 0x20 PUSH1 0xCA DUP2 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH2 0x1D09 PUSH1 0xFF PUSH1 0xB DUP4 ADD SLOAD AND ISZERO PUSH2 0x30EB JUMP JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 0x1F25 JUMPI DUP3 DUP6 MSTORE PUSH1 0xCB DUP3 MSTORE PUSH1 0x40 DUP6 KECCAK256 CALLER DUP7 MSTORE DUP3 MSTORE PUSH2 0x1D36 PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD AND ISZERO PUSH2 0x3137 JUMP JUMPDEST PUSH2 0x1D3F CALLER PUSH2 0x32C9 JUMP JUMPDEST ISZERO PUSH2 0x1EE0 JUMPI PUSH1 0x6 DUP2 ADD SLOAD CALLVALUE LT PUSH2 0x1E8B JUMPI SWAP1 PUSH1 0xD0 SWAP2 PUSH2 0x1DE2 PUSH1 0x40 MLOAD PUSH2 0x1D62 DUP2 PUSH2 0x2AF1 JUMP JUMPDEST PUSH1 0x1 DUP2 MSTORE PUSH1 0x2 DUP9 DUP6 DUP4 ADD DUP10 ISZERO ISZERO DUP2 MSTORE PUSH2 0x1DC6 PUSH1 0x40 DUP6 ADD SWAP2 CALLVALUE DUP4 MSTORE PUSH2 0x1DAF PUSH1 0x40 PUSH1 0x60 DUP9 ADD SWAP6 DUP1 DUP8 MSTORE DUP14 DUP2 MSTORE PUSH1 0xCB DUP13 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE DUP13 MSTORE KECCAK256 SWAP7 MLOAD ISZERO ISZERO DUP8 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST MLOAD DUP6 SLOAD PUSH2 0xFF00 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x8 SHL PUSH2 0xFF00 AND OR DUP6 SSTORE JUMP JUMPDEST MLOAD PUSH1 0x1 DUP5 ADD SSTORE MLOAD ISZERO ISZERO SWAP2 ADD SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x7 DUP2 ADD PUSH2 0x1DF1 CALLVALUE DUP3 SLOAD PUSH2 0x3173 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0xA DUP2 ADD PUSH2 0x1E01 DUP2 SLOAD PUSH2 0x3082 JUMP JUMPDEST SWAP1 SSTORE DUP5 ISZERO PUSH2 0x1E76 JUMPI PUSH1 0x8 ADD PUSH2 0x1E17 CALLVALUE DUP3 SLOAD PUSH2 0x3173 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST CALLER DUP6 MSTORE MSTORE PUSH2 0x1E2B DUP2 PUSH1 0x40 DUP6 KECCAK256 PUSH2 0x3046 JUMP JUMPDEST PUSH2 0x1E37 CALLVALUE PUSH1 0xDE SLOAD PUSH2 0x3173 JUMP JUMPDEST PUSH1 0xDE SSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE CALLVALUE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 PUSH32 0xCBDF6214089CBA887ECBF35A0B6A734589959C9763342C756BB2A80CA2BC9F6E SWAP2 DUP2 SWAP1 DUP2 ADD PUSH2 0x1B08 JUMP JUMPDEST PUSH1 0x9 ADD PUSH2 0x1E84 CALLVALUE DUP3 SLOAD PUSH2 0x3173 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x1E1A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x566F746572207374616B65206D757374206265203E3D20617374726F6C6F6765 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x72207374616B65 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374206F776E20417374726F4368617274204E465420746F20766F746500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x159BDD1A5B99C81C195C9A5BD908195B991959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0xA6E8C2D6CA40C2DADEEADCE840E8DEDE40D0D2CED PUSH1 0x5B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420766F746572207374616B650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD DUP2 GT ISZERO PUSH2 0x1CD0 JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0xD1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x2037 PUSH2 0x2D56 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x2044 DUP4 DUP4 PUSH2 0x3173 JUMP JUMPDEST GT PUSH2 0x2052 JUMPI PUSH1 0xD9 SSTORE PUSH1 0xDA SSTORE DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F74616C2070657263656E74616765732063616E6E6F742065786365656420 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x313025 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x20BD PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0x20C5 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xD3 SLOAD AND OR PUSH1 0xD3 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH1 0xD5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH2 0x2128 PUSH2 0x2120 PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x31A0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 PUSH1 0x20 SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0xCD DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x21B3 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x2233 PUSH2 0x2C42 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x994 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x994 JUMPI PUSH2 0x2263 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x2CB7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP3 SWAP2 SWAP1 PUSH2 0x229D ADDRESS DUP6 EQ ISZERO PUSH2 0x2DF7 JUMP JUMPDEST PUSH2 0x22BA PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP5 DUP3 DUP7 SLOAD AND EQ PUSH2 0x2E58 JUMP JUMPDEST PUSH2 0x22C2 PUSH2 0x2D56 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x22F8 JUMPI POP POP PUSH2 0x4DF SWAP2 POP PUSH2 0x2EB9 JUMP JUMPDEST DUP3 AND PUSH1 0x40 MLOAD SWAP4 PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL DUP8 SWAP2 DUP2 PUSH2 0x24BA JUMPI JUMPDEST POP PUSH2 0x237C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP5 SWAP3 SWAP4 SWAP5 SUB PUSH2 0x2463 JUMPI PUSH2 0x238E DUP5 PUSH2 0x2EB9 JUMP JUMPDEST PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B DUP6 DUP1 LOG2 DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x245B JUMPI JUMPDEST PUSH2 0x23C8 JUMPI JUMPDEST POP POP POP DUP1 RETURN JUMPDEST PUSH2 0x2449 SWAP3 DUP5 DUP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x23DB DUP7 PUSH2 0x2AC0 JUMP JUMPDEST PUSH1 0x27 DUP7 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP6 DUP8 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP8 ADD MSTORE DUP5 DUP2 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x2452 JUMPI RETURNDATASIZE PUSH2 0x242D DUP2 PUSH2 0x2C9C JUMP JUMPDEST SWAP1 PUSH2 0x243B PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP2 MSTORE DUP7 DUP2 SWAP5 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY PUSH2 0x2F49 JUMP JUMPDEST POP CODESIZE DUP1 DUP1 PUSH2 0x23C2 JUMP JUMPDEST PUSH1 0x60 SWAP3 POP PUSH2 0x2F49 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x23BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x24E6 JUMPI JUMPDEST PUSH2 0x24D2 DUP2 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x24E2 JUMPI MLOAD SWAP1 CODESIZE PUSH2 0x231B JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x24C8 JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x2507 PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0x250F PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xD1 SLOAD AND OR PUSH1 0xD1 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 PUSH1 0x60 SWAP2 PUSH2 0x254C PUSH2 0x2C58 JUMP JUMPDEST DUP2 DUP4 DUP1 MLOAD PUSH2 0x2559 DUP2 PUSH2 0x2AC0 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0xCC PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x258C DUP2 PUSH2 0x2AC0 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x40 PUSH1 0x1 PUSH1 0xFF DUP4 AND ISZERO ISZERO SWAP5 DUP6 DUP6 MSTORE PUSH1 0xFF PUSH1 0x20 DUP7 ADD SWAP5 PUSH1 0x8 SHR AND ISZERO ISZERO DUP5 MSTORE ADD SLOAD SWAP3 ADD SWAP2 DUP3 MSTORE PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE MLOAD ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE MLOAD PUSH1 0x40 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH2 0x25E1 PUSH2 0x2D56 JUMP JUMPDEST DUP1 DUP1 DUP1 DUP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x33 SLOAD AND SELFBALANCE SWAP1 DUP3 DUP3 ISZERO PUSH2 0x260F JUMPI JUMPDEST CALL ISZERO PUSH2 0x2603 JUMPI DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH2 0x25FA JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x2632 PUSH2 0x2C42 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0xCF PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x24 CALLDATALOAD SWAP3 SWAP1 DUP4 LT ISZERO PUSH2 0x484 JUMPI PUSH1 0x20 PUSH2 0x186A DUP5 DUP5 PUSH2 0x2C6E JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAFE JUMPI PUSH2 0x267B PUSH2 0x2C42 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH2 0x26B2 ADDRESS DUP3 EQ ISZERO PUSH2 0x2DF7 JUMP JUMPDEST PUSH2 0x26CF PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP4 DUP4 SLOAD AND EQ PUSH2 0x2E58 JUMP JUMPDEST PUSH2 0x26D7 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP5 DUP3 ADD SWAP3 DUP3 DUP5 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 GT OR PUSH2 0xF43 JUMPI DUP4 PUSH1 0x40 MSTORE DUP7 DUP4 MSTORE PUSH1 0xFF PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD AND PUSH1 0x0 EQ PUSH2 0x2732 JUMPI POP POP POP POP PUSH2 0x4DF SWAP2 POP PUSH2 0x2EB9 JUMP JUMPDEST DUP5 SWAP3 SWAP4 SWAP5 AND SWAP1 PUSH1 0x40 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE DUP7 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL DUP9 SWAP2 DUP2 PUSH2 0x28CF JUMPI JUMPDEST POP PUSH2 0x27B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP6 SWAP4 SWAP5 SWAP6 SUB PUSH2 0x2878 JUMPI PUSH2 0x27C8 DUP3 PUSH2 0x2EB9 JUMP JUMPDEST PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B DUP7 DUP1 LOG2 DUP5 DUP4 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2871 JUMPI JUMPDEST PUSH2 0x2805 JUMPI JUMPDEST POP POP POP POP POP DUP1 RETURN JUMPDEST DUP1 PUSH2 0x2866 SWAP6 PUSH1 0x40 MLOAD SWAP6 PUSH2 0x2817 DUP8 PUSH2 0x2AC0 JUMP JUMPDEST PUSH1 0x27 DUP8 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP7 DUP9 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP9 ADD MSTORE MLOAD SWAP1 DUP5 GAS DELEGATECALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x2452 JUMPI RETURNDATASIZE PUSH2 0x242D DUP2 PUSH2 0x2C9C JUMP JUMPDEST POP CODESIZE DUP1 DUP1 DUP1 DUP5 PUSH2 0x27FD JUMP JUMPDEST POP DUP1 PUSH2 0x27F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP DUP8 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x28FB JUMPI JUMPDEST PUSH2 0x28E7 DUP2 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x28F7 JUMPI MLOAD SWAP1 CODESIZE PUSH2 0x2755 JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x28DD JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x291C PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0xD8 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 PUSH1 0x20 SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0xCE DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH1 0xD7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 SWAP1 PUSH2 0x29B2 PUSH1 0x3 DUP4 ADD PUSH2 0x2B5C JUMP JUMPDEST SWAP2 PUSH2 0x29BF PUSH1 0x4 DUP3 ADD PUSH2 0x2B5C JUMP JUMPDEST SWAP3 PUSH1 0x5 DUP3 ADD SLOAD SWAP4 PUSH1 0x6 DUP4 ADD SLOAD PUSH1 0x7 DUP5 ADD SLOAD PUSH1 0x8 DUP6 ADD SLOAD SWAP1 PUSH1 0x9 DUP7 ADD SLOAD SWAP3 PUSH1 0xA DUP8 ADD SLOAD SWAP5 PUSH1 0xB DUP9 ADD SLOAD SWAP7 PUSH1 0xC DUP10 ADD SLOAD SWAP9 PUSH1 0xD ADD SLOAD SWAP10 PUSH1 0x40 MLOAD SWAP14 DUP15 DUP1 SWAP15 DUP2 MSTORE PUSH1 0x20 ADD MSTORE PUSH1 0x40 DUP14 ADD MSTORE DUP12 PUSH2 0x200 PUSH1 0x60 DUP2 SWAP3 ADD MSTORE DUP13 ADD PUSH2 0x2A1A SWAP2 PUSH2 0x2C02 JUMP JUMPDEST DUP12 DUP2 SUB PUSH1 0x80 DUP14 ADD MSTORE PUSH2 0x2A2B SWAP2 PUSH2 0x2C02 JUMP JUMPDEST SWAP9 PUSH1 0xA0 DUP12 ADD MSTORE PUSH1 0xC0 DUP11 ADD MSTORE PUSH1 0xE0 DUP10 ADD MSTORE PUSH2 0x100 DUP9 ADD MSTORE PUSH2 0x120 DUP8 ADD MSTORE PUSH2 0x140 DUP7 ADD MSTORE PUSH1 0xFF DUP2 AND ISZERO ISZERO PUSH2 0x160 DUP7 ADD MSTORE DUP1 PUSH1 0x8 SHR PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x180 DUP7 ADD MSTORE PUSH1 0x10 SHR PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x1A0 DUP6 ADD MSTORE PUSH2 0x1C0 DUP5 ADD MSTORE PUSH2 0x1E0 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x2AB6 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x2AA0 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x2A95 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2ADB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2ADB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x200 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2ADB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2ADB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2ADB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x2B70 DUP5 PUSH2 0x2A86 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x2BDF JUMPI POP PUSH1 0x1 EQ PUSH2 0x2B9C JUMPI JUMPDEST POP POP PUSH2 0x2B9A SWAP3 POP SUB DUP4 PUSH2 0x2B3B JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x2BC7 JUMPI POP POP PUSH2 0x2B9A SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x2B8C JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x2BAF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2B9A SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x2B8C JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x2C2E JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x746 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x746 JUMPI JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x2C86 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2ADB JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x2CC3 DUP3 PUSH2 0x2C9C JUMP JUMPDEST SWAP2 PUSH2 0x2CD1 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x2B3B JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x746 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x746 JUMPI JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x2D24 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x2D16 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x746 JUMPI DUP2 PUSH1 0x20 PUSH2 0x2D53 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2CB7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x2D6A JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP1 SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 JUMP JUMPDEST ISZERO PUSH2 0x2DFE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2E5F JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x2EEE JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x2FAB JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x2F5D JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x2F66 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x2FBE JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x2FE2 SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x2C02 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2FED JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x2ADB JUMPI PUSH2 0x3068 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x2C6E JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL PUSH1 0x0 NOT DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x3091 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x30AE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x125B9D985B1A59081C1C99591A58DD1A5BDB881251 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x30F2 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726564696374696F6E20616C7265616479207265736F6C7665640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x313E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x105B1C9958591E481D9BDD1959 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x3091 JUMPI JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x3091 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3091 JUMPI JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 PUSH1 0xCB PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 PUSH1 0xB DUP2 ADD SLOAD SWAP1 PUSH1 0xFF DUP3 AND ISZERO DUP1 ISZERO PUSH2 0x32BD JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x32AF JUMPI JUMPDEST PUSH2 0x32A8 JUMPI PUSH1 0xFF DUP5 SLOAD SWAP3 PUSH1 0x8 SHR AND SWAP2 PUSH1 0xFF DUP4 ISZERO ISZERO SWAP2 PUSH1 0x8 SHR AND ISZERO ISZERO SUB PUSH2 0x32A8 JUMPI PUSH2 0x323C DUP3 PUSH2 0x321A PUSH1 0x7 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD SWAP1 PUSH2 0x3173 JUMP JUMPDEST PUSH2 0x322E PUSH2 0x2710 SWAP2 DUP3 PUSH2 0x862 PUSH1 0xDA SLOAD DUP4 PUSH2 0x3180 JUMP JUMPDEST SWAP1 DUP7 SWAP3 PUSH2 0x3291 JUMPI JUMPDEST POP PUSH2 0x3193 JUMP JUMPDEST SWAP2 ISZERO PUSH2 0x3287 JUMPI PUSH1 0x8 ADD SLOAD SWAP1 JUMPDEST DUP2 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x3259 JUMPI POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x3269 SWAP3 SWAP5 SWAP4 SWAP6 ADD SLOAD PUSH2 0x3180 JUMP JUMPDEST SWAP2 PUSH2 0x3273 JUMPI POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x9 ADD SLOAD SWAP1 PUSH2 0x3248 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH2 0x32A0 PUSH1 0xD9 SLOAD DUP4 PUSH2 0x3180 JUMP JUMPDEST DIV SWAP1 CODESIZE PUSH2 0x3236 JUMP JUMPDEST POP POP SWAP1 POP SWAP1 JUMP JUMPDEST POP PUSH1 0xFF PUSH1 0x2 DUP6 ADD SLOAD AND PUSH2 0x31E4 JUMP JUMPDEST POP PUSH1 0xFF DUP5 SLOAD AND ISZERO PUSH2 0x31DD JUMP JUMPDEST PUSH1 0xD2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 SWAP1 DUP3 ISZERO PUSH2 0x334A JUMPI PUSH1 0x24 PUSH1 0x20 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP5 MSTORE AND PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x3317 JUMPI JUMPDEST POP PUSH2 0x3312 JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x3342 JUMPI JUMPDEST DUP2 PUSH2 0x3331 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x484 JUMPI POP MLOAD SWAP1 CODESIZE PUSH2 0x3307 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x3324 JUMP JUMPDEST POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2ADB JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA2646970667358221220D7 GT SMOD GT DUP5 SWAP1 0xE8 PUSH19 0xF156994DC33D3BF3A3F4AD2907B297FAFDC09C 0xAB PUSH27 0xCF719C64736F6C6343000811003300000000000000000000000000 ","sourceMap":"455:18712:11:-:0;;;;;;;1332:4:6;1324:13;;6007::5;455:18712:11;;;;;;;;;;;;;;6078:31:5;6074:139;;-1:-1:-1;455:18712:11;;;;;;;;1324:13:6;455:18712:11;;;;;;;;;;;;;;;;6074:139:5;455:18712:11;;;;;;6007:13:5;455:18712:11;6174:28:5;455:18712:11;;;;;;6174:28:5;6074:139;;;455:18712:11;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":11352,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_37830":{"entryPoint":11330,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_available_length_bytes":{"entryPoint":11447,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bool":{"entryPoint":11502,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_string":{"entryPoint":11576,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":11517,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bool_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string":{"entryPoint":11266,"id":null,"parameterSlots":2,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":13138,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":11420,"id":null,"parameterSlots":1,"returnSlots":1},"array_push_from_uint256_to_array_uint256_dyn_storage_ptr":{"entryPoint":12358,"id":null,"parameterSlots":2,"returnSlots":0},"checked_add_uint256":{"entryPoint":12659,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256":{"entryPoint":12672,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":12691,"id":null,"parameterSlots":2,"returnSlots":1},"copy_array_from_storage_to_memory_string":{"entryPoint":11100,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":10886,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":11067,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_37836":{"entryPoint":10944,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_37844":{"entryPoint":10993,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_37857":{"entryPoint":11020,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_37860":{"entryPoint":11048,"id":null,"parameterSlots":1,"returnSlots":0},"fun_calculateVoterReward":{"entryPoint":12704,"id":2505,"parameterSlots":2,"returnSlots":1},"fun_checkOwner":{"entryPoint":11606,"id":68,"parameterSlots":0,"returnSlots":0},"fun_hasAstroChartNFT":{"entryPoint":13001,"id":2590,"parameterSlots":1,"returnSlots":1},"fun_setImplementation":{"entryPoint":11961,"id":231,"parameterSlots":1,"returnSlots":0},"fun_transferOwnership":{"entryPoint":11694,"id":125,"parameterSlots":1,"returnSlots":0},"fun_verifyCallResultFromTarget":{"entryPoint":12105,"id":1086,"parameterSlots":4,"returnSlots":1},"increment_uint256":{"entryPoint":12418,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral_36e1":{"entryPoint":11767,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_512f":{"entryPoint":12599,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_52f1":{"entryPoint":11864,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_aa20":{"entryPoint":12455,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_d688":{"entryPoint":12262,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_e5c7":{"entryPoint":12523,"id":null,"parameterSlots":1,"returnSlots":0},"storage_array_index_access_uint256_dyn":{"entryPoint":11374,"id":null,"parameterSlots":2,"returnSlots":2},"update_storage_value_offset_0t_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"696":[{"length":32,"start":8557},{"length":32,"start":8813},{"length":32,"start":9861}]},"linkReferences":{},"object":"6080604052600436101561001257600080fd5b6000803560e01c80624fbbb01461296d5780630e8c47f21461294f578063256c52d31461292557806334954999146129025780633659cfe61461266057806337562b29146126185780633ccfd60b146125c8578063444a50c21461252d57806344cda485146124ed5780634f1ef2861461221e57806352d1902d1461215a578063533a12a5146121305780635aa76be01461210157806363ab68ef146120e357806365af67bd146120a35780636f502056146120175780636fd31a4114611fee578063700c836714611cae578063715018a614611c5157806372f022c214611c3357806373c84d2114611c0a5780637864066814611ba957806384ebaae1146119b2578063886dbdf9146118785780638b3511f7146118225780638da5cb5b146117f9578063950c7822146117865780639dcf0b7a1461174e578063a9d6921b14611689578063ab76c9ed14611660578063ae169a50146114ac578063b488202d14611483578063b6bb17541461144c578063bc3f931f14611390578063bc8581851461130d578063c8ab686a146112de578063cdd78cfc146112c0578063ce083d7314611280578063d23254b41461120e578063d472a57014610b20578063d75ebce514610b02578063e69fe3dc1461074b578063e77fc7a414610576578063e9725c2114610536578063f2fde38b146104a5578063f7333e33146104875763fe83bece1461022157600080fd5b3461048457602036600319011261048457806040916101e0835161024481612b0c565b8281528260208201528285820152606080820152606060808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201528261016082015282610180820152826101a0820152826101c0820152015260043580151580610478575b6102b9906130a7565b815260ca60205220600d604051916102d083612b0c565b8054835260018101546001600160a01b03166020840152600281015460408401526102fd60038201612b5c565b606084015261030e60048201612b5c565b6080840152600581015460a0840152600681015460c0840152600781015460e084015260088101546101008401526009810154610120840152600a81015461014084015260ff600b8201548181161515610160860152818160081c16151561018086015260101c1615156101a0840152600c8101546101c084015201546101e08201526040518091602082528051602083015260018060a01b036020820151166040830152604081015160608301526101e06103f46103de60608401516102006080870152610220860190612c02565b6080840151858203601f190160a0870152612c02565b9160a081015160c085015260c081015160e085015260e0810151610100850152610100810151610120850152610120810151610140850152610140810151610160850152610160810151151561018085015261018081015115156101a08501526101a081015115156101c08501526101c08101518285015201516102008301520390f35b5060c9548111156102b0565b80fd5b5034610484578060031936011261048457602060d654604051908152f35b5034610484576020366003190112610484576104bf612c42565b6104c7612d56565b6001600160a01b038116156104e2576104df90612dae565b80f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461048457602036600319011261048457610550612c42565b610558612d56565b60018060a01b03166001600160601b0360a01b60d454161760d45580f35b50346104845760e036600319011261048457610590612c42565b610598612c58565b906001600160a01b0390604435828116919082900361074657606435918383168093036107465785549360ff8560081c161594858096610739575b8015610722575b156106c65760ff1981166001178855856106b5575b5061060960ff885460081c1661060481612fe6565b612fe6565b61061233612dae565b86549561062460ff8860081c16612fe6565b816001600160601b0360a01b94168460d154161760d155168260d254161760d2558160d354161760d35560d454161760d45560843560d55560a43560d65560c43560d755607860d8556101f460d95560c860da55610680575080f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b61ffff1916610101178755386105ef565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156105da5750600160ff8216146105da565b50600160ff8216106105d3565b600080fd5b503461048457602080600319360112610afe576004359081151580610af2575b610774906130a7565b81835260ca815260408320600b810180549061079360ff8316156130eb565b60ff8260101c1615610ab4576107b0600584015460d85490613173565b4210610a6f5784865260cd84526107d4604087205460ce8652604088205490613173565b15610a365784865260cd845260408087205460ce86529087205461ffff199093169210600881901b61ff00169290921760011790559042600d82015560dc548015610a22576000190160dc5561082b60dd54613082565b60dd5583855260ca835260408520908561084e6007840154600685015490613173565b610869612710918261086260da5483613180565b0490613193565b828615610a185750828092610882829360d95490613180565b60019097015496049586906001600160a01b0316828215610a0f575bf115610a04575b6001810154600282015460d45488926001600160a01b0391908216908216806109a1575b505060d154169081151580610998575b61092e575b505050907f1ee447de28c6ff53bc0403bdbc8f4114866f73b12fc451b0605fc923b02b65bf9361091b836006600760609796015491015490613173565b906040519384528301526040820152a280f35b813b15610994578291604483926040519485938492631c8fdeb560e31b845260048401528a60248401525af180156109895761096b575b806108de565b6109789094939294612b28565b6109855790918538610965565b8580fd5b6040513d84823e3d90fd5b8280fd5b508015156108d9565b80949293943b15610994576044839260405194859384926313ef88d160e31b845260048401528b60248401525af180156109f9576109e4575b90818993926108c9565b6109f19098919298612b28565b9690386109da565b6040513d8b823e3d90fd5b6040513d87823e3d90fd5b506108fc61089e565b94505050506108a5565b634e487b7160e01b86526011600452602486fd5b60405162461bcd60e51b8152600481018590526011602482015270139bc8111053c81d9bdd195cc818d85cdd607a1b6044820152606490fd5b60405162461bcd60e51b815260048101859052601b60248201527f44414f20766f74696e6720706572696f64206e6f7420656e64656400000000006044820152606490fd5b60405162461bcd60e51b8152600481018590526016602482015275111053c81d9bdd1a5b99c81b9bdd081cdd185c9d195960521b6044820152606490fd5b5060c95482111561076b565b5080fd5b5034610484578060031936011261048457602060d954604051908152f35b506060366003190112610484576004356001600160401b038111610afe57610b4c903690600401612d38565b6024356001600160401b03811161099457610b6b903690600401612d38565b9060d55434106111c95780511561118c57815115611147574260443511156111025760d1546001600160a01b03169182611054575b6024906020600160c95401948560c9556040519384809263656d0c3960e01b82523360048301525afa918215610a0457859261101c575b5060405191610be583612b0c565b8483523360208401526040830152826060830152608082015260443560a08201523460c08201528360e08201528361010082015283610120820152836101408201528361016082015283610180820152836101a0820152426101c0820152836101e082015282845260ca6020526040842090805182556001820160018060a01b036020830151166001600160601b0360a01b8254161790556040810151600283015560608101518051906001600160401b038211610f43578190610cac6003860154612a86565b601f8111610fcc575b50602090601f8311600114610f62578892610f57575b50508160011b916000199060031b1c19161760038301555b60808101518051906001600160401b038211610f4357610d066004850154612a86565b601f8111610eff575b50918693918693602098508890601f8311600114610e845786938360409694600d946101e094610e0a9b92610e79575b50508160011b916000199060031b1c19161760048501555b60a0810151600585015560c0810151600685015560e0810151600785015561010081015160088501556101208101516009850155610140810151600a850155600b8401610db76101608301511515829060ff801983541691151516179055565b610180820151815461ff00191690151560081b61ff00161781556101a0820151815462ff0000191690151560101b62ff0000161790556101c0810151600c850155015191015533815260cf875220613046565b610e1560db54613082565b60db55610e2360dc54613082565b60dc55817f37f3edf7ed237f91fd6999d49411c7e10b3602f2e561a5adf21934775659c61a610e5d60405193606085526060850190612c02565b92604435868201523460408201528033940390a3604051908152f35b015190503880610d3f565b9060048501875289872091875b601f1985168110610ee5575093600184600d946101e094610e0a9b9860409a98601f19811610610ecc575b505050811b016004850155610d57565b015160001960f88460031b161c19169055388080610ebc565b8183015184558a9750600190930192918b01918b01610e91565b60048501885260208820601f840160051c810160208510610f3c575b601f830160051c82018110610f31575050610d0f565b898155600101610f1b565b5080610f1b565b634e487b7160e01b87526041600452602487fd5b015190503880610ccb565b600386018952602089209250601f198416895b818110610fb45750908460019594939210610f9b575b505050811b016003830155610ce3565b015160001960f88460031b161c19169055388080610f8b565b92936020600181928786015181550195019301610f75565b90915060038501885260208820601f840160051c810160208510611015575b90849392915b601f830160051c82018110611007575050610cb5565b8a8155859450600101610ff1565b5080610feb565b9091506020813d60201161104c575b8161103860209383612b3b565b8101031261104857519038610bd7565b8480fd5b3d915061102b565b604051631853e99560e11b8152336004820152602081602481875afa908115610a045785916110c8575b50610ba05760405162461bcd60e51b815260206004820152601760248201527f417374726f6c6f676572206e6f742076657269666965640000000000000000006044820152606490fd5b90506020813d82116110fa575b816110e260209383612b3b565b8101031261104857518015158103611048573861107e565b3d91506110d5565b60405162461bcd60e51b815260206004820152601e60248201527f446561646c696e65206d75737420626520696e207468652066757475726500006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f4465736372697074696f6e2063616e6e6f7420626520656d70747900000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260156024820152745469746c652063616e6e6f7420626520656d70747960581b6044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420617374726f6c6f676572207374616b650000006044820152606490fd5b503461048457604036600319011261048457604060809161122d612c58565b600435825260cb6020528282209060018060a01b031682526020522080549060ff60026001830154920154169060ff604051938181161515855260081c1615156020840152604083015215156060820152f35b50346104845760203660031901126104845761129a612c42565b6112a2612d56565b60018060a01b03166001600160601b0360a01b60d254161760d25580f35b5034610484578060031936011261048457602060da54604051908152f35b5034610484576060366003190112610484576112f8612d56565b60043560d55560243560d65560443560d75580f35b503461048457602080600319360112610afe576001600160a01b03611330612c42565b16825260cf815260408220916040518092808554928381520194835280832092905b828210611379576113758561136981890382612b3b565b60405191829182612cfd565b0390f35b835486529485019460019384019390910190611352565b50346104845760403660031901126104845760406080916113af612c58565b81606084516113bd81612af1565b82815282602082015282868201520152600435825260cb6020528282209060018060a01b03168252602052206040516113f581612af1565b81549160ff831615159283835260ff602084019160081c1615158152606060ff6002600185015494604087019586520154169301921515835260405193845251151560208401525160408301525115156060820152f35b5034610484578060031936011261048457608060db5460dc5460dd5460de5491604051938452602084015260408301526060820152f35b503461048457806003193601126104845760d2546040516001600160a01b039091168152602090f35b503461048457602080600319360112610afe5760043580151580611654575b6114d4906130a7565b80835260ca825260ff600b604085200154161561160f5780835260cb82526040832033845282526040832060ff815416156115da5760020191825460ff811661159c57849061152333856131a0565b948515918215611531578380f35b60ff1916600117905581908590611592575b8280929181923390f115611587577f24b5efa61dd1cfc659205a97fb8ed868f3cb8c81922bab2b96423e5de1de2cb7906040519384523393a3388080838180808380f35b6040513d85823e3d90fd5b6108fc9150611543565b60405162461bcd60e51b815260048101839052601660248201527514995dd85c9908185b1c9958591e4818db185a5b595960521b6044820152606490fd5b60405162461bcd60e51b815260048101849052600d60248201526c139bc81d9bdd1948199bdd5b99609a1b6044820152606490fd5b60405162461bcd60e51b815260048101839052601760248201527f50726564696374696f6e206e6f74207265736f6c7665640000000000000000006044820152606490fd5b5060c9548111156114cb565b503461048457806003193601126104845760d3546040516001600160a01b039091168152602090f35b503461048457806003193601126104845760dc546116a681613352565b906116b46040519283612b3b565b8082526116c3601f1991613352565b0191602092368484013760c95490928360015b838111156116ec57604051806113758782612cfd565b80825260ca835260ff600b6040842001541615611712575b61170d90613082565b6116d6565b94845181101561173a5761173281878561170d9460051b89010152613082565b959050611704565b634e487b7160e01b82526032600452602482fd5b503461048457602036600319011261048457604090600435815260cd60205281808220549160ce602052205482519182526020820152f35b503461048457602080600319360112610afe576001600160a01b036117a9612c42565b16825260d0815260408220916040518092808554928381520194835280832092905b8282106117e2576113758561136981890382612b3b565b8354865294850194600193840193909101906117cb565b50346104845780600319360112610484576033546040516001600160a01b039091168152602090f35b50346104845760403660031901126104845761183c612c42565b6001600160a01b0316815260d0602052604081208054602435929083101561048457602061186a8484612c6e565b90546040519160031b1c8152f35b503461048457602036600319011261048457600435801515806119a6575b61189f906130a7565b80825260ca60205260408220600b81019060058254916118c260ff8416156130eb565b015442106119615760ff8160101c1661191c57620100009062ff000019161790557fc83104e48f44c8c7b89a4dec1259a93bffcef18013dc1ac5891a260de98a50e5602061191260d85442613173565b604051908152a280f35b60405162461bcd60e51b815260206004820152601960248201527f44414f20766f74696e6720616c726561647920616374697665000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f50726564696374696f6e20646561646c696e65206e6f742072656163686564006044820152606490fd5b5060c954811115611896565b5034610484576060366003190112610484576004356119cf612cee565b9060443581151580611b9d575b6119e5906130a7565b818452602060ca815260ff600b604087200154611a04828216156130eb565b60101c1615611b615782855260cc8152604085203386528152611a2e60ff60408720541615613137565b611a37336132c9565b15611b2a577ff34f077f143d412407a903c03d8d2132b5dd9c006763fdf1fc57f5133610e64f91611b0891604051611a6e81612ac0565b6001815260018282018815158152611acb6040840191868352898c5260cc865260408c20338d528652611ab460408d2095511515869060ff801983541691151516179055565b51845461ff00191690151560081b61ff0016178455565b519101558515611b0e5760cd908588525260408620611aea8154613082565b90555b60408051951515865260208601919091523394918291820190565b0390a380f35b60ce908588525260408620611b238154613082565b9055611aed565b6064906040519062461bcd60e51b82526004820152601060248201526f2737ba1030902220a79036b2b6b132b960811b6044820152fd5b6064906040519062461bcd60e51b82526004820152601560248201527444414f20766f74696e67206e6f742061637469766560581b6044820152fd5b5060c9548211156119dc565b5034610484576040366003190112610484576040606091611bc8612c58565b600435825260cc6020528282209060018060a01b03168252602052206001815491015460ff604051928181161515845260081c16151560208301526040820152f35b503461048457806003193601126104845760d4546040516001600160a01b039091168152602090f35b5034610484578060031936011261048457602060d854604051908152f35b5034610484578060031936011261048457611c6a612d56565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50604036600319011261048457600435611cc6612cee565b9080151580611fe2575b611cd9906130a7565b60d6543410611f9d5760d7543411611f6057808352602060ca815260408420611d0960ff600b83015416156130eb565b6005810154421015611f255782855260cb8252604085203386528252611d3660ff60408720541615613137565b611d3f336132c9565b15611ee05760068101543410611e8b579060d091611de2604051611d6281612af1565b600181526002888583018915158152611dc66040850191348352611daf604060608801958087528d815260cb8c528181203382528c522096511515879060ff801983541691151516179055565b51855461ff00191690151560081b61ff0016178555565b51600184015551151591019060ff801983541691151516179055565b60078101611df1348254613173565b9055600a8101611e018154613082565b90558415611e7657600801611e17348254613173565b90555b33855252611e2b8160408520613046565b611e373460de54613173565b60de5560408051921515835234602084015233927fcbdf6214089cba887ecbf35a0b6a734589959c9763342c756bb2a80ca2bc9f6e9181908101611b08565b600901611e84348254613173565b9055611e1a565b60405162461bcd60e51b815260048101839052602760248201527f566f746572207374616b65206d757374206265203e3d20617374726f6c6f676560448201526672207374616b6560c81b6064820152608490fd5b60405162461bcd60e51b815260048101839052601f60248201527f4d757374206f776e20417374726f4368617274204e465420746f20766f7465006044820152606490fd5b60405162461bcd60e51b8152600481018390526013602482015272159bdd1a5b99c81c195c9a5bd908195b991959606a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260156024820152740a6e8c2d6ca40c2dadeeadce840e8dede40d0d2ced605b1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e7420766f746572207374616b6500000000000000006044820152606490fd5b5060c954811115611cd0565b503461048457806003193601126104845760d1546040516001600160a01b039091168152602090f35b503461048457604036600319011261048457602435600435612037612d56565b6103e86120448383613173565b116120525760d95560da5580f35b60405162461bcd60e51b815260206004820152602360248201527f546f74616c2070657263656e74616765732063616e6e6f74206578636565642060448201526231302560e81b6064820152608490fd5b5034610484576020366003190112610484576120bd612c42565b6120c5612d56565b60018060a01b03166001600160601b0360a01b60d354161760d35580f35b5034610484578060031936011261048457602060d554604051908152f35b5034610484576040366003190112610484576020612128612120612c58565b6004356131a0565b604051908152f35b5034610484576020366003190112610484576040602091600435815260cd83522054604051908152f35b50346104845780600319360112610484577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036121b357602060405160008051602061336a8339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b50604036600319011261048457612233612c42565b6024356001600160401b038111610994573660238201121561099457612263903690602481600401359101612cb7565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692919061229d30851415612df7565b6122ba60008051602061336a833981519152948286541614612e58565b6122c2612d56565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156122f85750506104df9150612eb9565b8216604051936352d1902d60e01b85526020948581600481865afa8791816124ba575b5061237c5760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b94929394036124635761238e84612eb9565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8580a281511580159061245b575b6123c8575b50505080f35b612449928480604051946123db86612ac0565b602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c85870152660819985a5b195960ca1b60408701528481519101845af4903d15612452573d61242d81612c9c565b9061243b6040519283612b3b565b81528681943d92013e612f49565b503880806123c2565b60609250612f49565b5060016123bd565b60405162461bcd60e51b815260048101839052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508681813d83116124e6575b6124d28183612b3b565b810103126124e25751903861231b565b8780fd5b503d6124c8565b503461048457602036600319011261048457612507612c42565b61250f612d56565b60018060a01b03166001600160601b0360a01b60d154161760d15580f35b503461048457604036600319011261048457604060609161254c612c58565b8183805161255981612ac0565b8281528260208201520152600435825260cc6020528282209060018060a01b031682526020522060405161258c81612ac0565b81546040600160ff831615159485855260ff602086019460081c1615158452015492019182526040519283525115156020830152516040820152f35b50346104845780600319360112610484576125e1612d56565b8080808060018060a01b0360335416479082821561260f575bf1156126035780f35b604051903d90823e3d90fd5b506108fc6125fa565b503461048457604036600319011261048457612632612c42565b6001600160a01b0316815260cf602052604081208054602435929083101561048457602061186a8484612c6e565b503461048457602080600319360112610afe5761267b612c42565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166126b230821415612df7565b6126cf60008051602061336a833981519152918383541614612e58565b6126d7612d56565b60405190848201928284106001600160401b03851117610f43578360405286835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143541660001461273257505050506104df9150612eb9565b8492939416906040516352d1902d60e01b81528681600481865afa8891816128cf575b506127b65760405162461bcd60e51b815260048101889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9593949503612878576127c882612eb9565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8680a284835115801590612871575b612805575b505050505080f35b80612866956040519561281787612ac0565b602787527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c86880152660819985a5b195960ca1b60408801525190845af4903d15612452573d61242d81612c9c565b5038808080846127fd565b50806127f8565b60405162461bcd60e51b815260048101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508781813d83116128fb575b6128e78183612b3b565b810103126128f757519038612755565b8880fd5b503d6128dd565b50346104845760203660031901126104845761291c612d56565b60043560d85580f35b5034610484576020366003190112610484576040602091600435815260ce83522054604051908152f35b5034610484578060031936011261048457602060d754604051908152f35b503461048457602036600319011261048457600435815260ca602052604090208054600182015460028301546001600160a01b0390911692906129b260038301612b5c565b916129bf60048201612b5c565b9260058201549360068301546007840154600885015490600986015492600a87015494600b88015496600c89015498600d0154996040519d8e809e81526020015260408d01528b6102006060819201528c01612a1a91612c02565b8b810360808d0152612a2b91612c02565b9860a08b015260c08a015260e089015261010088015261012087015261014086015260ff811615156101608601528060081c60ff16151561018086015260101c60ff1615156101a08501526101c08401526101e08301520390f35b90600182811c92168015612ab6575b6020831014612aa057565b634e487b7160e01b600052602260045260246000fd5b91607f1691612a95565b606081019081106001600160401b03821117612adb57604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b03821117612adb57604052565b61020081019081106001600160401b03821117612adb57604052565b6001600160401b038111612adb57604052565b90601f801991011681019081106001600160401b03821117612adb57604052565b9060405191826000825492612b7084612a86565b908184526001948581169081600014612bdf5750600114612b9c575b5050612b9a92500383612b3b565b565b9093915060005260209081600020936000915b818310612bc7575050612b9a93508201013880612b8c565b85548884018501529485019487945091830191612baf565b915050612b9a94506020925060ff191682840152151560051b8201013880612b8c565b919082519283825260005b848110612c2e575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201612c0d565b600435906001600160a01b038216820361074657565b602435906001600160a01b038216820361074657565b8054821015612c865760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6001600160401b038111612adb57601f01601f191660200190565b929192612cc382612c9c565b91612cd16040519384612b3b565b829481845281830111610746578281602093846000960137010152565b60243590811515820361074657565b6020908160408183019282815285518094520193019160005b828110612d24575050505090565b835185529381019392810192600101612d16565b9080601f8301121561074657816020612d5393359101612cb7565b90565b6033546001600160a01b03163303612d6a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b15612dfe57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15612e5f57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b803b15612eee5760008051602061336a83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b91929015612fab5750815115612f5d575090565b3b15612f665790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015612fbe5750805190602001fd5b60405162461bcd60e51b815260206004820152908190612fe2906024830190612c02565b0390fd5b15612fed57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b805468010000000000000000811015612adb5761306891600182018155612c6e565b819291549060031b600019811b9283911b16911916179055565b60001981146130915760010190565b634e487b7160e01b600052601160045260246000fd5b156130ae57565b60405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c1c99591a58dd1a5bdb881251605a1b6044820152606490fd5b156130f257565b60405162461bcd60e51b815260206004820152601b60248201527f50726564696374696f6e20616c7265616479207265736f6c76656400000000006044820152606490fd5b1561313e57565b60405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b9190820180921161309157565b8181029291811591840414171561309157565b9190820391821161309157565b600090815260ca602052604081209160cb602052604082209060018060a01b031682526020526040812091600b8101549060ff82161580156132bd575b80156132af575b6132a85760ff84549260081c169160ff8315159160081c161515036132a85761323c8261321a6007840154600685015490613173565b61322e612710918261086260da5483613180565b908692613291575b50613193565b91156132875760080154905b811590811561325957505050905090565b6001613269929493950154613180565b9161327357500490565b634e487b7160e01b81526012600452602490fd5b6009015490613248565b9091506132a060d95483613180565b049038613236565b5050905090565b5060ff6002850154166131e4565b5060ff845416156131dd565b60d2546001600160a01b039081169190821561334a57602460209260405194859384926370a0823160e01b84521660048301525afa60009181613317575b506133125750600090565b151590565b90916020823d8211613342575b8161333160209383612b3b565b810103126104845750519038613307565b3d9150613324565b505050600190565b6001600160401b038111612adb5760051b6020019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220d71107118490e872f156994dc33d3bf3a3f4ad2907b297fafdc09cab7acf719c64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x4FBBB0 EQ PUSH2 0x296D JUMPI DUP1 PUSH4 0xE8C47F2 EQ PUSH2 0x294F JUMPI DUP1 PUSH4 0x256C52D3 EQ PUSH2 0x2925 JUMPI DUP1 PUSH4 0x34954999 EQ PUSH2 0x2902 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x2660 JUMPI DUP1 PUSH4 0x37562B29 EQ PUSH2 0x2618 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x25C8 JUMPI DUP1 PUSH4 0x444A50C2 EQ PUSH2 0x252D JUMPI DUP1 PUSH4 0x44CDA485 EQ PUSH2 0x24ED JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x221E JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x215A JUMPI DUP1 PUSH4 0x533A12A5 EQ PUSH2 0x2130 JUMPI DUP1 PUSH4 0x5AA76BE0 EQ PUSH2 0x2101 JUMPI DUP1 PUSH4 0x63AB68EF EQ PUSH2 0x20E3 JUMPI DUP1 PUSH4 0x65AF67BD EQ PUSH2 0x20A3 JUMPI DUP1 PUSH4 0x6F502056 EQ PUSH2 0x2017 JUMPI DUP1 PUSH4 0x6FD31A41 EQ PUSH2 0x1FEE JUMPI DUP1 PUSH4 0x700C8367 EQ PUSH2 0x1CAE JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1C51 JUMPI DUP1 PUSH4 0x72F022C2 EQ PUSH2 0x1C33 JUMPI DUP1 PUSH4 0x73C84D21 EQ PUSH2 0x1C0A JUMPI DUP1 PUSH4 0x78640668 EQ PUSH2 0x1BA9 JUMPI DUP1 PUSH4 0x84EBAAE1 EQ PUSH2 0x19B2 JUMPI DUP1 PUSH4 0x886DBDF9 EQ PUSH2 0x1878 JUMPI DUP1 PUSH4 0x8B3511F7 EQ PUSH2 0x1822 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x17F9 JUMPI DUP1 PUSH4 0x950C7822 EQ PUSH2 0x1786 JUMPI DUP1 PUSH4 0x9DCF0B7A EQ PUSH2 0x174E JUMPI DUP1 PUSH4 0xA9D6921B EQ PUSH2 0x1689 JUMPI DUP1 PUSH4 0xAB76C9ED EQ PUSH2 0x1660 JUMPI DUP1 PUSH4 0xAE169A50 EQ PUSH2 0x14AC JUMPI DUP1 PUSH4 0xB488202D EQ PUSH2 0x1483 JUMPI DUP1 PUSH4 0xB6BB1754 EQ PUSH2 0x144C JUMPI DUP1 PUSH4 0xBC3F931F EQ PUSH2 0x1390 JUMPI DUP1 PUSH4 0xBC858185 EQ PUSH2 0x130D JUMPI DUP1 PUSH4 0xC8AB686A EQ PUSH2 0x12DE JUMPI DUP1 PUSH4 0xCDD78CFC EQ PUSH2 0x12C0 JUMPI DUP1 PUSH4 0xCE083D73 EQ PUSH2 0x1280 JUMPI DUP1 PUSH4 0xD23254B4 EQ PUSH2 0x120E JUMPI DUP1 PUSH4 0xD472A570 EQ PUSH2 0xB20 JUMPI DUP1 PUSH4 0xD75EBCE5 EQ PUSH2 0xB02 JUMPI DUP1 PUSH4 0xE69FE3DC EQ PUSH2 0x74B JUMPI DUP1 PUSH4 0xE77FC7A4 EQ PUSH2 0x576 JUMPI DUP1 PUSH4 0xE9725C21 EQ PUSH2 0x536 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4A5 JUMPI DUP1 PUSH4 0xF7333E33 EQ PUSH2 0x487 JUMPI PUSH4 0xFE83BECE EQ PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI DUP1 PUSH1 0x40 SWAP2 PUSH2 0x1E0 DUP4 MLOAD PUSH2 0x244 DUP2 PUSH2 0x2B0C JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP6 DUP3 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE DUP3 PUSH1 0xE0 DUP3 ADD MSTORE DUP3 PUSH2 0x100 DUP3 ADD MSTORE DUP3 PUSH2 0x120 DUP3 ADD MSTORE DUP3 PUSH2 0x140 DUP3 ADD MSTORE DUP3 PUSH2 0x160 DUP3 ADD MSTORE DUP3 PUSH2 0x180 DUP3 ADD MSTORE DUP3 PUSH2 0x1A0 DUP3 ADD MSTORE DUP3 PUSH2 0x1C0 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 PUSH2 0x478 JUMPI JUMPDEST PUSH2 0x2B9 SWAP1 PUSH2 0x30A7 JUMP JUMPDEST DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 MSTORE KECCAK256 PUSH1 0xD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2D0 DUP4 PUSH2 0x2B0C JUMP JUMPDEST DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2FD PUSH1 0x3 DUP3 ADD PUSH2 0x2B5C JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x30E PUSH1 0x4 DUP3 ADD PUSH2 0x2B5C JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 DUP2 ADD SLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x7 DUP2 ADD SLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 DUP2 ADD SLOAD PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 DUP2 ADD SLOAD PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA DUP2 ADD SLOAD PUSH2 0x140 DUP5 ADD MSTORE PUSH1 0xFF PUSH1 0xB DUP3 ADD SLOAD DUP2 DUP2 AND ISZERO ISZERO PUSH2 0x160 DUP7 ADD MSTORE DUP2 DUP2 PUSH1 0x8 SHR AND ISZERO ISZERO PUSH2 0x180 DUP7 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO PUSH2 0x1A0 DUP5 ADD MSTORE PUSH1 0xC DUP2 ADD SLOAD PUSH2 0x1C0 DUP5 ADD MSTORE ADD SLOAD PUSH2 0x1E0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD DUP1 SWAP2 PUSH1 0x20 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1E0 PUSH2 0x3F4 PUSH2 0x3DE PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x200 PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x220 DUP7 ADD SWAP1 PUSH2 0x2C02 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD DUP6 DUP3 SUB PUSH1 0x1F NOT ADD PUSH1 0xA0 DUP8 ADD MSTORE PUSH2 0x2C02 JUMP JUMPDEST SWAP2 PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x100 DUP6 ADD MSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x120 DUP2 ADD MLOAD PUSH2 0x140 DUP6 ADD MSTORE PUSH2 0x140 DUP2 ADD MLOAD PUSH2 0x160 DUP6 ADD MSTORE PUSH2 0x160 DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x180 DUP6 ADD MSTORE PUSH2 0x180 DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x1A0 DUP6 ADD MSTORE PUSH2 0x1A0 DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x1C0 DUP6 ADD MSTORE PUSH2 0x1C0 DUP2 ADD MLOAD DUP3 DUP6 ADD MSTORE ADD MLOAD PUSH2 0x200 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST POP PUSH1 0xC9 SLOAD DUP2 GT ISZERO PUSH2 0x2B0 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH1 0xD6 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x4BF PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0x4C7 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x4E2 JUMPI PUSH2 0x4DF SWAP1 PUSH2 0x2DAE JUMP JUMPDEST DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x550 PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0x558 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xD4 SLOAD AND OR PUSH1 0xD4 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x590 PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0x598 PUSH2 0x2C58 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x44 CALLDATALOAD DUP3 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x746 JUMPI PUSH1 0x64 CALLDATALOAD SWAP2 DUP4 DUP4 AND DUP1 SWAP4 SUB PUSH2 0x746 JUMPI DUP6 SLOAD SWAP4 PUSH1 0xFF DUP6 PUSH1 0x8 SHR AND ISZERO SWAP5 DUP6 DUP1 SWAP7 PUSH2 0x739 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x722 JUMPI JUMPDEST ISZERO PUSH2 0x6C6 JUMPI PUSH1 0xFF NOT DUP2 AND PUSH1 0x1 OR DUP9 SSTORE DUP6 PUSH2 0x6B5 JUMPI JUMPDEST POP PUSH2 0x609 PUSH1 0xFF DUP9 SLOAD PUSH1 0x8 SHR AND PUSH2 0x604 DUP2 PUSH2 0x2FE6 JUMP JUMPDEST PUSH2 0x2FE6 JUMP JUMPDEST PUSH2 0x612 CALLER PUSH2 0x2DAE JUMP JUMPDEST DUP7 SLOAD SWAP6 PUSH2 0x624 PUSH1 0xFF DUP9 PUSH1 0x8 SHR AND PUSH2 0x2FE6 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP5 AND DUP5 PUSH1 0xD1 SLOAD AND OR PUSH1 0xD1 SSTORE AND DUP3 PUSH1 0xD2 SLOAD AND OR PUSH1 0xD2 SSTORE DUP2 PUSH1 0xD3 SLOAD AND OR PUSH1 0xD3 SSTORE PUSH1 0xD4 SLOAD AND OR PUSH1 0xD4 SSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0xD5 SSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0xD6 SSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0xD7 SSTORE PUSH1 0x78 PUSH1 0xD8 SSTORE PUSH2 0x1F4 PUSH1 0xD9 SSTORE PUSH1 0xC8 PUSH1 0xDA SSTORE PUSH2 0x680 JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0xFF00 NOT AND DUP2 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR DUP8 SSTORE CODESIZE PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5DA JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP3 AND EQ PUSH2 0x5DA JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP3 AND LT PUSH2 0x5D3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAFE JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP1 PUSH2 0xAF2 JUMPI JUMPDEST PUSH2 0x774 SWAP1 PUSH2 0x30A7 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0xCA DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xB DUP2 ADD DUP1 SLOAD SWAP1 PUSH2 0x793 PUSH1 0xFF DUP4 AND ISZERO PUSH2 0x30EB JUMP JUMPDEST PUSH1 0xFF DUP3 PUSH1 0x10 SHR AND ISZERO PUSH2 0xAB4 JUMPI PUSH2 0x7B0 PUSH1 0x5 DUP5 ADD SLOAD PUSH1 0xD8 SLOAD SWAP1 PUSH2 0x3173 JUMP JUMPDEST TIMESTAMP LT PUSH2 0xA6F JUMPI DUP5 DUP7 MSTORE PUSH1 0xCD DUP5 MSTORE PUSH2 0x7D4 PUSH1 0x40 DUP8 KECCAK256 SLOAD PUSH1 0xCE DUP7 MSTORE PUSH1 0x40 DUP9 KECCAK256 SLOAD SWAP1 PUSH2 0x3173 JUMP JUMPDEST ISZERO PUSH2 0xA36 JUMPI DUP5 DUP7 MSTORE PUSH1 0xCD DUP5 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 SLOAD PUSH1 0xCE DUP7 MSTORE SWAP1 DUP8 KECCAK256 SLOAD PUSH2 0xFFFF NOT SWAP1 SWAP4 AND SWAP3 LT PUSH1 0x8 DUP2 SWAP1 SHL PUSH2 0xFF00 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0x1 OR SWAP1 SSTORE SWAP1 TIMESTAMP PUSH1 0xD DUP3 ADD SSTORE PUSH1 0xDC SLOAD DUP1 ISZERO PUSH2 0xA22 JUMPI PUSH1 0x0 NOT ADD PUSH1 0xDC SSTORE PUSH2 0x82B PUSH1 0xDD SLOAD PUSH2 0x3082 JUMP JUMPDEST PUSH1 0xDD SSTORE DUP4 DUP6 MSTORE PUSH1 0xCA DUP4 MSTORE PUSH1 0x40 DUP6 KECCAK256 SWAP1 DUP6 PUSH2 0x84E PUSH1 0x7 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD SWAP1 PUSH2 0x3173 JUMP JUMPDEST PUSH2 0x869 PUSH2 0x2710 SWAP2 DUP3 PUSH2 0x862 PUSH1 0xDA SLOAD DUP4 PUSH2 0x3180 JUMP JUMPDEST DIV SWAP1 PUSH2 0x3193 JUMP JUMPDEST DUP3 DUP7 ISZERO PUSH2 0xA18 JUMPI POP DUP3 DUP1 SWAP3 PUSH2 0x882 DUP3 SWAP4 PUSH1 0xD9 SLOAD SWAP1 PUSH2 0x3180 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP8 ADD SLOAD SWAP7 DIV SWAP6 DUP7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 DUP3 ISZERO PUSH2 0xA0F JUMPI JUMPDEST CALL ISZERO PUSH2 0xA04 JUMPI JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0xD4 SLOAD DUP9 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 DUP3 AND SWAP1 DUP3 AND DUP1 PUSH2 0x9A1 JUMPI JUMPDEST POP POP PUSH1 0xD1 SLOAD AND SWAP1 DUP2 ISZERO ISZERO DUP1 PUSH2 0x998 JUMPI JUMPDEST PUSH2 0x92E JUMPI JUMPDEST POP POP POP SWAP1 PUSH32 0x1EE447DE28C6FF53BC0403BDBC8F4114866F73B12FC451B0605FC923B02B65BF SWAP4 PUSH2 0x91B DUP4 PUSH1 0x6 PUSH1 0x7 PUSH1 0x60 SWAP8 SWAP7 ADD SLOAD SWAP2 ADD SLOAD SWAP1 PUSH2 0x3173 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE LOG2 DUP1 RETURN JUMPDEST DUP2 EXTCODESIZE ISZERO PUSH2 0x994 JUMPI DUP3 SWAP2 PUSH1 0x44 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH4 0x1C8FDEB5 PUSH1 0xE3 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE DUP11 PUSH1 0x24 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x989 JUMPI PUSH2 0x96B JUMPI JUMPDEST DUP1 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0x978 SWAP1 SWAP5 SWAP4 SWAP3 SWAP5 PUSH2 0x2B28 JUMP JUMPDEST PUSH2 0x985 JUMPI SWAP1 SWAP2 DUP6 CODESIZE PUSH2 0x965 JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 ISZERO ISZERO PUSH2 0x8D9 JUMP JUMPDEST DUP1 SWAP5 SWAP3 SWAP4 SWAP5 EXTCODESIZE ISZERO PUSH2 0x994 JUMPI PUSH1 0x44 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH4 0x13EF88D1 PUSH1 0xE3 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE DUP12 PUSH1 0x24 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x9F9 JUMPI PUSH2 0x9E4 JUMPI JUMPDEST SWAP1 DUP2 DUP10 SWAP4 SWAP3 PUSH2 0x8C9 JUMP JUMPDEST PUSH2 0x9F1 SWAP1 SWAP9 SWAP2 SWAP3 SWAP9 PUSH2 0x2B28 JUMP JUMPDEST SWAP7 SWAP1 CODESIZE PUSH2 0x9DA JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH2 0x89E JUMP JUMPDEST SWAP5 POP POP POP POP PUSH2 0x8A5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x139BC8111053C81D9BDD195CC818D85CDD PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44414F20766F74696E6720706572696F64206E6F7420656E6465640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x111053C81D9BDD1A5B99C81B9BDD081CDD185C9D1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD DUP3 GT ISZERO PUSH2 0x76B JUMP JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH1 0xD9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAFE JUMPI PUSH2 0xB4C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2D38 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x994 JUMPI PUSH2 0xB6B SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2D38 JUMP JUMPDEST SWAP1 PUSH1 0xD5 SLOAD CALLVALUE LT PUSH2 0x11C9 JUMPI DUP1 MLOAD ISZERO PUSH2 0x118C JUMPI DUP2 MLOAD ISZERO PUSH2 0x1147 JUMPI TIMESTAMP PUSH1 0x44 CALLDATALOAD GT ISZERO PUSH2 0x1102 JUMPI PUSH1 0xD1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 PUSH2 0x1054 JUMPI JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x20 PUSH1 0x1 PUSH1 0xC9 SLOAD ADD SWAP5 DUP6 PUSH1 0xC9 SSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH4 0x656D0C39 PUSH1 0xE0 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0xA04 JUMPI DUP6 SWAP3 PUSH2 0x101C JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 PUSH2 0xBE5 DUP4 PUSH2 0x2B0C JUMP JUMPDEST DUP5 DUP4 MSTORE CALLER PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE DUP3 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE CALLVALUE PUSH1 0xC0 DUP3 ADD MSTORE DUP4 PUSH1 0xE0 DUP3 ADD MSTORE DUP4 PUSH2 0x100 DUP3 ADD MSTORE DUP4 PUSH2 0x120 DUP3 ADD MSTORE DUP4 PUSH2 0x140 DUP3 ADD MSTORE DUP4 PUSH2 0x160 DUP3 ADD MSTORE DUP4 PUSH2 0x180 DUP3 ADD MSTORE DUP4 PUSH2 0x1A0 DUP3 ADD MSTORE TIMESTAMP PUSH2 0x1C0 DUP3 ADD MSTORE DUP4 PUSH2 0x1E0 DUP3 ADD MSTORE DUP3 DUP5 MSTORE PUSH1 0xCA PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 SWAP1 DUP1 MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xF43 JUMPI DUP2 SWAP1 PUSH2 0xCAC PUSH1 0x3 DUP7 ADD SLOAD PUSH2 0x2A86 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xFCC JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xF62 JUMPI DUP9 SWAP3 PUSH2 0xF57 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 DUP4 ADD SSTORE JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xF43 JUMPI PUSH2 0xD06 PUSH1 0x4 DUP6 ADD SLOAD PUSH2 0x2A86 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xEFF JUMPI JUMPDEST POP SWAP2 DUP7 SWAP4 SWAP2 DUP7 SWAP4 PUSH1 0x20 SWAP9 POP DUP9 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xE84 JUMPI DUP7 SWAP4 DUP4 PUSH1 0x40 SWAP7 SWAP5 PUSH1 0xD SWAP5 PUSH2 0x1E0 SWAP5 PUSH2 0xE0A SWAP12 SWAP3 PUSH2 0xE79 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x4 DUP6 ADD SSTORE JUMPDEST PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x5 DUP6 ADD SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 DUP6 ADD SSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0x7 DUP6 ADD SSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH1 0x8 DUP6 ADD SSTORE PUSH2 0x120 DUP2 ADD MLOAD PUSH1 0x9 DUP6 ADD SSTORE PUSH2 0x140 DUP2 ADD MLOAD PUSH1 0xA DUP6 ADD SSTORE PUSH1 0xB DUP5 ADD PUSH2 0xDB7 PUSH2 0x160 DUP4 ADD MLOAD ISZERO ISZERO DUP3 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x180 DUP3 ADD MLOAD DUP2 SLOAD PUSH2 0xFF00 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x8 SHL PUSH2 0xFF00 AND OR DUP2 SSTORE PUSH2 0x1A0 DUP3 ADD MLOAD DUP2 SLOAD PUSH3 0xFF0000 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x10 SHL PUSH3 0xFF0000 AND OR SWAP1 SSTORE PUSH2 0x1C0 DUP2 ADD MLOAD PUSH1 0xC DUP6 ADD SSTORE ADD MLOAD SWAP2 ADD SSTORE CALLER DUP2 MSTORE PUSH1 0xCF DUP8 MSTORE KECCAK256 PUSH2 0x3046 JUMP JUMPDEST PUSH2 0xE15 PUSH1 0xDB SLOAD PUSH2 0x3082 JUMP JUMPDEST PUSH1 0xDB SSTORE PUSH2 0xE23 PUSH1 0xDC SLOAD PUSH2 0x3082 JUMP JUMPDEST PUSH1 0xDC SSTORE DUP2 PUSH32 0x37F3EDF7ED237F91FD6999D49411C7E10B3602F2E561A5ADF21934775659C61A PUSH2 0xE5D PUSH1 0x40 MLOAD SWAP4 PUSH1 0x60 DUP6 MSTORE PUSH1 0x60 DUP6 ADD SWAP1 PUSH2 0x2C02 JUMP JUMPDEST SWAP3 PUSH1 0x44 CALLDATALOAD DUP7 DUP3 ADD MSTORE CALLVALUE PUSH1 0x40 DUP3 ADD MSTORE DUP1 CALLER SWAP5 SUB SWAP1 LOG3 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0xD3F JUMP JUMPDEST SWAP1 PUSH1 0x4 DUP6 ADD DUP8 MSTORE DUP10 DUP8 KECCAK256 SWAP2 DUP8 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0xEE5 JUMPI POP SWAP4 PUSH1 0x1 DUP5 PUSH1 0xD SWAP5 PUSH2 0x1E0 SWAP5 PUSH2 0xE0A SWAP12 SWAP9 PUSH1 0x40 SWAP11 SWAP9 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xECC JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x4 DUP6 ADD SSTORE PUSH2 0xD57 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xEBC JUMP JUMPDEST DUP2 DUP4 ADD MLOAD DUP5 SSTORE DUP11 SWAP8 POP PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP12 ADD SWAP2 DUP12 ADD PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x4 DUP6 ADD DUP9 MSTORE PUSH1 0x20 DUP9 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0xF3C JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0xF31 JUMPI POP POP PUSH2 0xD0F JUMP JUMPDEST DUP10 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xF1B JUMP JUMPDEST POP DUP1 PUSH2 0xF1B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0xCCB JUMP JUMPDEST PUSH1 0x3 DUP7 ADD DUP10 MSTORE PUSH1 0x20 DUP10 KECCAK256 SWAP3 POP PUSH1 0x1F NOT DUP5 AND DUP10 JUMPDEST DUP2 DUP2 LT PUSH2 0xFB4 JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0xF9B JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 DUP4 ADD SSTORE PUSH2 0xCE3 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xF8B JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0xF75 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x3 DUP6 ADD DUP9 MSTORE PUSH1 0x20 DUP9 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0x1015 JUMPI JUMPDEST SWAP1 DUP5 SWAP4 SWAP3 SWAP2 JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x1007 JUMPI POP POP PUSH2 0xCB5 JUMP JUMPDEST DUP11 DUP2 SSTORE DUP6 SWAP5 POP PUSH1 0x1 ADD PUSH2 0xFF1 JUMP JUMPDEST POP DUP1 PUSH2 0xFEB JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x104C JUMPI JUMPDEST DUP2 PUSH2 0x1038 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1048 JUMPI MLOAD SWAP1 CODESIZE PUSH2 0xBD7 JUMP JUMPDEST DUP5 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x102B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1853E995 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 DUP8 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA04 JUMPI DUP6 SWAP2 PUSH2 0x10C8 JUMPI JUMPDEST POP PUSH2 0xBA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x417374726F6C6F676572206E6F74207665726966696564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x10FA JUMPI JUMPDEST DUP2 PUSH2 0x10E2 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1048 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x1048 JUMPI CODESIZE PUSH2 0x107E JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x10D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446561646C696E65206D75737420626520696E20746865206675747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4465736372697074696F6E2063616E6E6F7420626520656D7074790000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x5469746C652063616E6E6F7420626520656D707479 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420617374726F6C6F676572207374616B65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 PUSH1 0x80 SWAP2 PUSH2 0x122D PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0xCB PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0xFF PUSH1 0x2 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 ADD SLOAD AND SWAP1 PUSH1 0xFF PUSH1 0x40 MLOAD SWAP4 DUP2 DUP2 AND ISZERO ISZERO DUP6 MSTORE PUSH1 0x8 SHR AND ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x129A PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0x12A2 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xD2 SLOAD AND OR PUSH1 0xD2 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH1 0xDA SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x12F8 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0xD5 SSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0xD6 SSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0xD7 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAFE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1330 PUSH2 0x2C42 JUMP JUMPDEST AND DUP3 MSTORE PUSH1 0xCF DUP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP2 PUSH1 0x40 MLOAD DUP1 SWAP3 DUP1 DUP6 SLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP5 DUP4 MSTORE DUP1 DUP4 KECCAK256 SWAP3 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x1379 JUMPI PUSH2 0x1375 DUP6 PUSH2 0x1369 DUP2 DUP10 SUB DUP3 PUSH2 0x2B3B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2CFD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP4 SLOAD DUP7 MSTORE SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1352 JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 PUSH1 0x80 SWAP2 PUSH2 0x13AF PUSH2 0x2C58 JUMP JUMPDEST DUP2 PUSH1 0x60 DUP5 MLOAD PUSH2 0x13BD DUP2 PUSH2 0x2AF1 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP7 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0xCB PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x13F5 DUP2 PUSH2 0x2AF1 JUMP JUMPDEST DUP2 SLOAD SWAP2 PUSH1 0xFF DUP4 AND ISZERO ISZERO SWAP3 DUP4 DUP4 MSTORE PUSH1 0xFF PUSH1 0x20 DUP5 ADD SWAP2 PUSH1 0x8 SHR AND ISZERO ISZERO DUP2 MSTORE PUSH1 0x60 PUSH1 0xFF PUSH1 0x2 PUSH1 0x1 DUP6 ADD SLOAD SWAP5 PUSH1 0x40 DUP8 ADD SWAP6 DUP7 MSTORE ADD SLOAD AND SWAP4 ADD SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE MLOAD ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE MLOAD PUSH1 0x40 DUP4 ADD MSTORE MLOAD ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x80 PUSH1 0xDB SLOAD PUSH1 0xDC SLOAD PUSH1 0xDD SLOAD PUSH1 0xDE SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0xD2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAFE JUMPI PUSH1 0x4 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 PUSH2 0x1654 JUMPI JUMPDEST PUSH2 0x14D4 SWAP1 PUSH2 0x30A7 JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0xCA DUP3 MSTORE PUSH1 0xFF PUSH1 0xB PUSH1 0x40 DUP6 KECCAK256 ADD SLOAD AND ISZERO PUSH2 0x160F JUMPI DUP1 DUP4 MSTORE PUSH1 0xCB DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF DUP2 SLOAD AND ISZERO PUSH2 0x15DA JUMPI PUSH1 0x2 ADD SWAP2 DUP3 SLOAD PUSH1 0xFF DUP2 AND PUSH2 0x159C JUMPI DUP5 SWAP1 PUSH2 0x1523 CALLER DUP6 PUSH2 0x31A0 JUMP JUMPDEST SWAP5 DUP6 ISZERO SWAP2 DUP3 ISZERO PUSH2 0x1531 JUMPI DUP4 DUP1 RETURN JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 SWAP1 DUP6 SWAP1 PUSH2 0x1592 JUMPI JUMPDEST DUP3 DUP1 SWAP3 SWAP2 DUP2 SWAP3 CALLER SWAP1 CALL ISZERO PUSH2 0x1587 JUMPI PUSH32 0x24B5EFA61DD1CFC659205A97FB8ED868F3CB8C81922BAB2B96423E5DE1DE2CB7 SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE CALLER SWAP4 LOG3 CODESIZE DUP1 DUP1 DUP4 DUP2 DUP1 DUP1 DUP4 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x8FC SWAP2 POP PUSH2 0x1543 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14995DD85C9908185B1C9958591E4818DB185A5B5959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x139BC81D9BDD1948199BDD5B99 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726564696374696F6E206E6F74207265736F6C766564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD DUP2 GT ISZERO PUSH2 0x14CB JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0xD3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0xDC SLOAD PUSH2 0x16A6 DUP2 PUSH2 0x3352 JUMP JUMPDEST SWAP1 PUSH2 0x16B4 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH2 0x16C3 PUSH1 0x1F NOT SWAP2 PUSH2 0x3352 JUMP JUMPDEST ADD SWAP2 PUSH1 0x20 SWAP3 CALLDATASIZE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0xC9 SLOAD SWAP1 SWAP3 DUP4 PUSH1 0x1 JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x16EC JUMPI PUSH1 0x40 MLOAD DUP1 PUSH2 0x1375 DUP8 DUP3 PUSH2 0x2CFD JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0xCA DUP4 MSTORE PUSH1 0xFF PUSH1 0xB PUSH1 0x40 DUP5 KECCAK256 ADD SLOAD AND ISZERO PUSH2 0x1712 JUMPI JUMPDEST PUSH2 0x170D SWAP1 PUSH2 0x3082 JUMP JUMPDEST PUSH2 0x16D6 JUMP JUMPDEST SWAP5 DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x173A JUMPI PUSH2 0x1732 DUP2 DUP8 DUP6 PUSH2 0x170D SWAP5 PUSH1 0x5 SHL DUP10 ADD ADD MSTORE PUSH2 0x3082 JUMP JUMPDEST SWAP6 SWAP1 POP PUSH2 0x1704 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 SWAP1 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0xCD PUSH1 0x20 MSTORE DUP2 DUP1 DUP3 KECCAK256 SLOAD SWAP2 PUSH1 0xCE PUSH1 0x20 MSTORE KECCAK256 SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAFE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x17A9 PUSH2 0x2C42 JUMP JUMPDEST AND DUP3 MSTORE PUSH1 0xD0 DUP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP2 PUSH1 0x40 MLOAD DUP1 SWAP3 DUP1 DUP6 SLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP5 DUP4 MSTORE DUP1 DUP4 KECCAK256 SWAP3 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x17E2 JUMPI PUSH2 0x1375 DUP6 PUSH2 0x1369 DUP2 DUP10 SUB DUP3 PUSH2 0x2B3B JUMP JUMPDEST DUP4 SLOAD DUP7 MSTORE SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x17CB JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x183C PUSH2 0x2C42 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0xD0 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x24 CALLDATALOAD SWAP3 SWAP1 DUP4 LT ISZERO PUSH2 0x484 JUMPI PUSH1 0x20 PUSH2 0x186A DUP5 DUP5 PUSH2 0x2C6E JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH1 0x3 SHL SHR DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x4 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 PUSH2 0x19A6 JUMPI JUMPDEST PUSH2 0x189F SWAP1 PUSH2 0x30A7 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0xCA PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0xB DUP2 ADD SWAP1 PUSH1 0x5 DUP3 SLOAD SWAP2 PUSH2 0x18C2 PUSH1 0xFF DUP5 AND ISZERO PUSH2 0x30EB JUMP JUMPDEST ADD SLOAD TIMESTAMP LT PUSH2 0x1961 JUMPI PUSH1 0xFF DUP2 PUSH1 0x10 SHR AND PUSH2 0x191C JUMPI PUSH3 0x10000 SWAP1 PUSH3 0xFF0000 NOT AND OR SWAP1 SSTORE PUSH32 0xC83104E48F44C8C7B89A4DEC1259A93BFFCEF18013DC1AC5891A260DE98A50E5 PUSH1 0x20 PUSH2 0x1912 PUSH1 0xD8 SLOAD TIMESTAMP PUSH2 0x3173 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44414F20766F74696E6720616C72656164792061637469766500000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726564696374696F6E20646561646C696E65206E6F74207265616368656400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD DUP2 GT ISZERO PUSH2 0x1896 JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x19CF PUSH2 0x2CEE JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD DUP2 ISZERO ISZERO DUP1 PUSH2 0x1B9D JUMPI JUMPDEST PUSH2 0x19E5 SWAP1 PUSH2 0x30A7 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 PUSH1 0xCA DUP2 MSTORE PUSH1 0xFF PUSH1 0xB PUSH1 0x40 DUP8 KECCAK256 ADD SLOAD PUSH2 0x1A04 DUP3 DUP3 AND ISZERO PUSH2 0x30EB JUMP JUMPDEST PUSH1 0x10 SHR AND ISZERO PUSH2 0x1B61 JUMPI DUP3 DUP6 MSTORE PUSH1 0xCC DUP2 MSTORE PUSH1 0x40 DUP6 KECCAK256 CALLER DUP7 MSTORE DUP2 MSTORE PUSH2 0x1A2E PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD AND ISZERO PUSH2 0x3137 JUMP JUMPDEST PUSH2 0x1A37 CALLER PUSH2 0x32C9 JUMP JUMPDEST ISZERO PUSH2 0x1B2A JUMPI PUSH32 0xF34F077F143D412407A903C03D8D2132B5DD9C006763FDF1FC57F5133610E64F SWAP2 PUSH2 0x1B08 SWAP2 PUSH1 0x40 MLOAD PUSH2 0x1A6E DUP2 PUSH2 0x2AC0 JUMP JUMPDEST PUSH1 0x1 DUP2 MSTORE PUSH1 0x1 DUP3 DUP3 ADD DUP9 ISZERO ISZERO DUP2 MSTORE PUSH2 0x1ACB PUSH1 0x40 DUP5 ADD SWAP2 DUP7 DUP4 MSTORE DUP10 DUP13 MSTORE PUSH1 0xCC DUP7 MSTORE PUSH1 0x40 DUP13 KECCAK256 CALLER DUP14 MSTORE DUP7 MSTORE PUSH2 0x1AB4 PUSH1 0x40 DUP14 KECCAK256 SWAP6 MLOAD ISZERO ISZERO DUP7 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST MLOAD DUP5 SLOAD PUSH2 0xFF00 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x8 SHL PUSH2 0xFF00 AND OR DUP5 SSTORE JUMP JUMPDEST MLOAD SWAP2 ADD SSTORE DUP6 ISZERO PUSH2 0x1B0E JUMPI PUSH1 0xCD SWAP1 DUP6 DUP9 MSTORE MSTORE PUSH1 0x40 DUP7 KECCAK256 PUSH2 0x1AEA DUP2 SLOAD PUSH2 0x3082 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 ISZERO ISZERO DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER SWAP5 SWAP2 DUP3 SWAP2 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG3 DUP1 RETURN JUMPDEST PUSH1 0xCE SWAP1 DUP6 DUP9 MSTORE MSTORE PUSH1 0x40 DUP7 KECCAK256 PUSH2 0x1B23 DUP2 SLOAD PUSH2 0x3082 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x1AED JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x2737BA1030902220A79036B2B6B132B9 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x44414F20766F74696E67206E6F7420616374697665 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0xC9 SLOAD DUP3 GT ISZERO PUSH2 0x19DC JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 PUSH1 0x60 SWAP2 PUSH2 0x1BC8 PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0xCC PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 PUSH1 0x1 DUP2 SLOAD SWAP2 ADD SLOAD PUSH1 0xFF PUSH1 0x40 MLOAD SWAP3 DUP2 DUP2 AND ISZERO ISZERO DUP5 MSTORE PUSH1 0x8 SHR AND ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0xD4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH1 0xD8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH2 0x1C6A PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1CC6 PUSH2 0x2CEE JUMP JUMPDEST SWAP1 DUP1 ISZERO ISZERO DUP1 PUSH2 0x1FE2 JUMPI JUMPDEST PUSH2 0x1CD9 SWAP1 PUSH2 0x30A7 JUMP JUMPDEST PUSH1 0xD6 SLOAD CALLVALUE LT PUSH2 0x1F9D JUMPI PUSH1 0xD7 SLOAD CALLVALUE GT PUSH2 0x1F60 JUMPI DUP1 DUP4 MSTORE PUSH1 0x20 PUSH1 0xCA DUP2 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH2 0x1D09 PUSH1 0xFF PUSH1 0xB DUP4 ADD SLOAD AND ISZERO PUSH2 0x30EB JUMP JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 0x1F25 JUMPI DUP3 DUP6 MSTORE PUSH1 0xCB DUP3 MSTORE PUSH1 0x40 DUP6 KECCAK256 CALLER DUP7 MSTORE DUP3 MSTORE PUSH2 0x1D36 PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD AND ISZERO PUSH2 0x3137 JUMP JUMPDEST PUSH2 0x1D3F CALLER PUSH2 0x32C9 JUMP JUMPDEST ISZERO PUSH2 0x1EE0 JUMPI PUSH1 0x6 DUP2 ADD SLOAD CALLVALUE LT PUSH2 0x1E8B JUMPI SWAP1 PUSH1 0xD0 SWAP2 PUSH2 0x1DE2 PUSH1 0x40 MLOAD PUSH2 0x1D62 DUP2 PUSH2 0x2AF1 JUMP JUMPDEST PUSH1 0x1 DUP2 MSTORE PUSH1 0x2 DUP9 DUP6 DUP4 ADD DUP10 ISZERO ISZERO DUP2 MSTORE PUSH2 0x1DC6 PUSH1 0x40 DUP6 ADD SWAP2 CALLVALUE DUP4 MSTORE PUSH2 0x1DAF PUSH1 0x40 PUSH1 0x60 DUP9 ADD SWAP6 DUP1 DUP8 MSTORE DUP14 DUP2 MSTORE PUSH1 0xCB DUP13 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE DUP13 MSTORE KECCAK256 SWAP7 MLOAD ISZERO ISZERO DUP8 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST MLOAD DUP6 SLOAD PUSH2 0xFF00 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x8 SHL PUSH2 0xFF00 AND OR DUP6 SSTORE JUMP JUMPDEST MLOAD PUSH1 0x1 DUP5 ADD SSTORE MLOAD ISZERO ISZERO SWAP2 ADD SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x7 DUP2 ADD PUSH2 0x1DF1 CALLVALUE DUP3 SLOAD PUSH2 0x3173 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0xA DUP2 ADD PUSH2 0x1E01 DUP2 SLOAD PUSH2 0x3082 JUMP JUMPDEST SWAP1 SSTORE DUP5 ISZERO PUSH2 0x1E76 JUMPI PUSH1 0x8 ADD PUSH2 0x1E17 CALLVALUE DUP3 SLOAD PUSH2 0x3173 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST CALLER DUP6 MSTORE MSTORE PUSH2 0x1E2B DUP2 PUSH1 0x40 DUP6 KECCAK256 PUSH2 0x3046 JUMP JUMPDEST PUSH2 0x1E37 CALLVALUE PUSH1 0xDE SLOAD PUSH2 0x3173 JUMP JUMPDEST PUSH1 0xDE SSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE CALLVALUE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 PUSH32 0xCBDF6214089CBA887ECBF35A0B6A734589959C9763342C756BB2A80CA2BC9F6E SWAP2 DUP2 SWAP1 DUP2 ADD PUSH2 0x1B08 JUMP JUMPDEST PUSH1 0x9 ADD PUSH2 0x1E84 CALLVALUE DUP3 SLOAD PUSH2 0x3173 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x1E1A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x566F746572207374616B65206D757374206265203E3D20617374726F6C6F6765 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x72207374616B65 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374206F776E20417374726F4368617274204E465420746F20766F746500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x159BDD1A5B99C81C195C9A5BD908195B991959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0xA6E8C2D6CA40C2DADEEADCE840E8DEDE40D0D2CED PUSH1 0x5B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420766F746572207374616B650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD DUP2 GT ISZERO PUSH2 0x1CD0 JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0xD1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x2037 PUSH2 0x2D56 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x2044 DUP4 DUP4 PUSH2 0x3173 JUMP JUMPDEST GT PUSH2 0x2052 JUMPI PUSH1 0xD9 SSTORE PUSH1 0xDA SSTORE DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F74616C2070657263656E74616765732063616E6E6F742065786365656420 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x313025 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x20BD PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0x20C5 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xD3 SLOAD AND OR PUSH1 0xD3 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH1 0xD5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH2 0x2128 PUSH2 0x2120 PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x31A0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 PUSH1 0x20 SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0xCD DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x21B3 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x2233 PUSH2 0x2C42 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x994 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x994 JUMPI PUSH2 0x2263 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x2CB7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP3 SWAP2 SWAP1 PUSH2 0x229D ADDRESS DUP6 EQ ISZERO PUSH2 0x2DF7 JUMP JUMPDEST PUSH2 0x22BA PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP5 DUP3 DUP7 SLOAD AND EQ PUSH2 0x2E58 JUMP JUMPDEST PUSH2 0x22C2 PUSH2 0x2D56 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x22F8 JUMPI POP POP PUSH2 0x4DF SWAP2 POP PUSH2 0x2EB9 JUMP JUMPDEST DUP3 AND PUSH1 0x40 MLOAD SWAP4 PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL DUP8 SWAP2 DUP2 PUSH2 0x24BA JUMPI JUMPDEST POP PUSH2 0x237C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP5 SWAP3 SWAP4 SWAP5 SUB PUSH2 0x2463 JUMPI PUSH2 0x238E DUP5 PUSH2 0x2EB9 JUMP JUMPDEST PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B DUP6 DUP1 LOG2 DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x245B JUMPI JUMPDEST PUSH2 0x23C8 JUMPI JUMPDEST POP POP POP DUP1 RETURN JUMPDEST PUSH2 0x2449 SWAP3 DUP5 DUP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x23DB DUP7 PUSH2 0x2AC0 JUMP JUMPDEST PUSH1 0x27 DUP7 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP6 DUP8 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP8 ADD MSTORE DUP5 DUP2 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x2452 JUMPI RETURNDATASIZE PUSH2 0x242D DUP2 PUSH2 0x2C9C JUMP JUMPDEST SWAP1 PUSH2 0x243B PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP2 MSTORE DUP7 DUP2 SWAP5 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY PUSH2 0x2F49 JUMP JUMPDEST POP CODESIZE DUP1 DUP1 PUSH2 0x23C2 JUMP JUMPDEST PUSH1 0x60 SWAP3 POP PUSH2 0x2F49 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x23BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x24E6 JUMPI JUMPDEST PUSH2 0x24D2 DUP2 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x24E2 JUMPI MLOAD SWAP1 CODESIZE PUSH2 0x231B JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x24C8 JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x2507 PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0x250F PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xD1 SLOAD AND OR PUSH1 0xD1 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 PUSH1 0x60 SWAP2 PUSH2 0x254C PUSH2 0x2C58 JUMP JUMPDEST DUP2 DUP4 DUP1 MLOAD PUSH2 0x2559 DUP2 PUSH2 0x2AC0 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0xCC PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x258C DUP2 PUSH2 0x2AC0 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x40 PUSH1 0x1 PUSH1 0xFF DUP4 AND ISZERO ISZERO SWAP5 DUP6 DUP6 MSTORE PUSH1 0xFF PUSH1 0x20 DUP7 ADD SWAP5 PUSH1 0x8 SHR AND ISZERO ISZERO DUP5 MSTORE ADD SLOAD SWAP3 ADD SWAP2 DUP3 MSTORE PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE MLOAD ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE MLOAD PUSH1 0x40 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH2 0x25E1 PUSH2 0x2D56 JUMP JUMPDEST DUP1 DUP1 DUP1 DUP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x33 SLOAD AND SELFBALANCE SWAP1 DUP3 DUP3 ISZERO PUSH2 0x260F JUMPI JUMPDEST CALL ISZERO PUSH2 0x2603 JUMPI DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH2 0x25FA JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x2632 PUSH2 0x2C42 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0xCF PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x24 CALLDATALOAD SWAP3 SWAP1 DUP4 LT ISZERO PUSH2 0x484 JUMPI PUSH1 0x20 PUSH2 0x186A DUP5 DUP5 PUSH2 0x2C6E JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAFE JUMPI PUSH2 0x267B PUSH2 0x2C42 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH2 0x26B2 ADDRESS DUP3 EQ ISZERO PUSH2 0x2DF7 JUMP JUMPDEST PUSH2 0x26CF PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP4 DUP4 SLOAD AND EQ PUSH2 0x2E58 JUMP JUMPDEST PUSH2 0x26D7 PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP5 DUP3 ADD SWAP3 DUP3 DUP5 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 GT OR PUSH2 0xF43 JUMPI DUP4 PUSH1 0x40 MSTORE DUP7 DUP4 MSTORE PUSH1 0xFF PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD AND PUSH1 0x0 EQ PUSH2 0x2732 JUMPI POP POP POP POP PUSH2 0x4DF SWAP2 POP PUSH2 0x2EB9 JUMP JUMPDEST DUP5 SWAP3 SWAP4 SWAP5 AND SWAP1 PUSH1 0x40 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE DUP7 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL DUP9 SWAP2 DUP2 PUSH2 0x28CF JUMPI JUMPDEST POP PUSH2 0x27B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP6 SWAP4 SWAP5 SWAP6 SUB PUSH2 0x2878 JUMPI PUSH2 0x27C8 DUP3 PUSH2 0x2EB9 JUMP JUMPDEST PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B DUP7 DUP1 LOG2 DUP5 DUP4 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2871 JUMPI JUMPDEST PUSH2 0x2805 JUMPI JUMPDEST POP POP POP POP POP DUP1 RETURN JUMPDEST DUP1 PUSH2 0x2866 SWAP6 PUSH1 0x40 MLOAD SWAP6 PUSH2 0x2817 DUP8 PUSH2 0x2AC0 JUMP JUMPDEST PUSH1 0x27 DUP8 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP7 DUP9 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP9 ADD MSTORE MLOAD SWAP1 DUP5 GAS DELEGATECALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x2452 JUMPI RETURNDATASIZE PUSH2 0x242D DUP2 PUSH2 0x2C9C JUMP JUMPDEST POP CODESIZE DUP1 DUP1 DUP1 DUP5 PUSH2 0x27FD JUMP JUMPDEST POP DUP1 PUSH2 0x27F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP DUP8 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x28FB JUMPI JUMPDEST PUSH2 0x28E7 DUP2 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x28F7 JUMPI MLOAD SWAP1 CODESIZE PUSH2 0x2755 JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x28DD JUMP JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH2 0x291C PUSH2 0x2D56 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0xD8 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x40 PUSH1 0x20 SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0xCE DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x484 JUMPI PUSH1 0x20 PUSH1 0xD7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x484 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x484 JUMPI PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 SWAP1 PUSH2 0x29B2 PUSH1 0x3 DUP4 ADD PUSH2 0x2B5C JUMP JUMPDEST SWAP2 PUSH2 0x29BF PUSH1 0x4 DUP3 ADD PUSH2 0x2B5C JUMP JUMPDEST SWAP3 PUSH1 0x5 DUP3 ADD SLOAD SWAP4 PUSH1 0x6 DUP4 ADD SLOAD PUSH1 0x7 DUP5 ADD SLOAD PUSH1 0x8 DUP6 ADD SLOAD SWAP1 PUSH1 0x9 DUP7 ADD SLOAD SWAP3 PUSH1 0xA DUP8 ADD SLOAD SWAP5 PUSH1 0xB DUP9 ADD SLOAD SWAP7 PUSH1 0xC DUP10 ADD SLOAD SWAP9 PUSH1 0xD ADD SLOAD SWAP10 PUSH1 0x40 MLOAD SWAP14 DUP15 DUP1 SWAP15 DUP2 MSTORE PUSH1 0x20 ADD MSTORE PUSH1 0x40 DUP14 ADD MSTORE DUP12 PUSH2 0x200 PUSH1 0x60 DUP2 SWAP3 ADD MSTORE DUP13 ADD PUSH2 0x2A1A SWAP2 PUSH2 0x2C02 JUMP JUMPDEST DUP12 DUP2 SUB PUSH1 0x80 DUP14 ADD MSTORE PUSH2 0x2A2B SWAP2 PUSH2 0x2C02 JUMP JUMPDEST SWAP9 PUSH1 0xA0 DUP12 ADD MSTORE PUSH1 0xC0 DUP11 ADD MSTORE PUSH1 0xE0 DUP10 ADD MSTORE PUSH2 0x100 DUP9 ADD MSTORE PUSH2 0x120 DUP8 ADD MSTORE PUSH2 0x140 DUP7 ADD MSTORE PUSH1 0xFF DUP2 AND ISZERO ISZERO PUSH2 0x160 DUP7 ADD MSTORE DUP1 PUSH1 0x8 SHR PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x180 DUP7 ADD MSTORE PUSH1 0x10 SHR PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x1A0 DUP6 ADD MSTORE PUSH2 0x1C0 DUP5 ADD MSTORE PUSH2 0x1E0 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x2AB6 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x2AA0 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x2A95 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2ADB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2ADB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x200 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2ADB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2ADB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2ADB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x2B70 DUP5 PUSH2 0x2A86 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x2BDF JUMPI POP PUSH1 0x1 EQ PUSH2 0x2B9C JUMPI JUMPDEST POP POP PUSH2 0x2B9A SWAP3 POP SUB DUP4 PUSH2 0x2B3B JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x2BC7 JUMPI POP POP PUSH2 0x2B9A SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x2B8C JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x2BAF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2B9A SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x2B8C JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x2C2E JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x746 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x746 JUMPI JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x2C86 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2ADB JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x2CC3 DUP3 PUSH2 0x2C9C JUMP JUMPDEST SWAP2 PUSH2 0x2CD1 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x2B3B JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x746 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x746 JUMPI JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x2D24 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x2D16 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x746 JUMPI DUP2 PUSH1 0x20 PUSH2 0x2D53 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2CB7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x2D6A JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP1 SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 JUMP JUMPDEST ISZERO PUSH2 0x2DFE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2E5F JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x2EEE JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x2FAB JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x2F5D JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x2F66 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x2FBE JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x2FE2 SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x2C02 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2FED JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x2ADB JUMPI PUSH2 0x3068 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x2C6E JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL PUSH1 0x0 NOT DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x3091 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x30AE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x125B9D985B1A59081C1C99591A58DD1A5BDB881251 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x30F2 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726564696374696F6E20616C7265616479207265736F6C7665640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x313E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x105B1C9958591E481D9BDD1959 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x3091 JUMPI JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x3091 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3091 JUMPI JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 PUSH1 0xCB PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 PUSH1 0xB DUP2 ADD SLOAD SWAP1 PUSH1 0xFF DUP3 AND ISZERO DUP1 ISZERO PUSH2 0x32BD JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x32AF JUMPI JUMPDEST PUSH2 0x32A8 JUMPI PUSH1 0xFF DUP5 SLOAD SWAP3 PUSH1 0x8 SHR AND SWAP2 PUSH1 0xFF DUP4 ISZERO ISZERO SWAP2 PUSH1 0x8 SHR AND ISZERO ISZERO SUB PUSH2 0x32A8 JUMPI PUSH2 0x323C DUP3 PUSH2 0x321A PUSH1 0x7 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD SWAP1 PUSH2 0x3173 JUMP JUMPDEST PUSH2 0x322E PUSH2 0x2710 SWAP2 DUP3 PUSH2 0x862 PUSH1 0xDA SLOAD DUP4 PUSH2 0x3180 JUMP JUMPDEST SWAP1 DUP7 SWAP3 PUSH2 0x3291 JUMPI JUMPDEST POP PUSH2 0x3193 JUMP JUMPDEST SWAP2 ISZERO PUSH2 0x3287 JUMPI PUSH1 0x8 ADD SLOAD SWAP1 JUMPDEST DUP2 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x3259 JUMPI POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x3269 SWAP3 SWAP5 SWAP4 SWAP6 ADD SLOAD PUSH2 0x3180 JUMP JUMPDEST SWAP2 PUSH2 0x3273 JUMPI POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x9 ADD SLOAD SWAP1 PUSH2 0x3248 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH2 0x32A0 PUSH1 0xD9 SLOAD DUP4 PUSH2 0x3180 JUMP JUMPDEST DIV SWAP1 CODESIZE PUSH2 0x3236 JUMP JUMPDEST POP POP SWAP1 POP SWAP1 JUMP JUMPDEST POP PUSH1 0xFF PUSH1 0x2 DUP6 ADD SLOAD AND PUSH2 0x31E4 JUMP JUMPDEST POP PUSH1 0xFF DUP5 SLOAD AND ISZERO PUSH2 0x31DD JUMP JUMPDEST PUSH1 0xD2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 SWAP1 DUP3 ISZERO PUSH2 0x334A JUMPI PUSH1 0x24 PUSH1 0x20 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP5 MSTORE AND PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x3317 JUMPI JUMPDEST POP PUSH2 0x3312 JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x3342 JUMPI JUMPDEST DUP2 PUSH2 0x3331 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2B3B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x484 JUMPI POP MLOAD SWAP1 CODESIZE PUSH2 0x3307 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x3324 JUMP JUMPDEST POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2ADB JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA2646970667358221220D7 GT SMOD GT DUP5 SWAP1 0xE8 PUSH19 0xF156994DC33D3BF3A3F4AD2907B297FAFDC09C 0xAB PUSH27 0xCF719C64736F6C6343000811003300000000000000000000000000 ","sourceMap":"455:18712:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16322:17;;;:62;;;455:18712;16314:96;;;:::i;:::-;455:18712;;16427:11;455:18712;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16322:62;-1:-1:-1;16360:14:11;455:18712;16343:41;;;16322:62;;455:18712;;;;;;;;;;;;;;;;;2228:28;455:18712;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;:::i;:::-;1303:62:0;;:::i;:::-;-1:-1:-1;;;;;455:18712:11;;2402:22:0;455:18712:11;;2496:8:0;;;:::i;:::-;455:18712:11;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;:::i;:::-;1303:62:0;;:::i;:::-;455:18712:11;;;;;;-1:-1:-1;;;;;455:18712:11;;18168:36;455:18712;;;18168:36;455:18712;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;:::i;:::-;;;:::i;:::-;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3301:14:5;3347:34;;;;;;455:18712:11;3346:108:5;;;;455:18712:11;;;;-1:-1:-1;;455:18712:11;;;;;;;3562:65:5;;455:18712:11;;5366:69:5;455:18712:11;;;;;;5366:69:5;;;:::i;:::-;;:::i;:::-;1195:12:0;929:10:8;1195:12:0;:::i;:::-;455:18712:11;;;5366:69:5;455:18712:11;;;;;5366:69:5;:::i;:::-;455:18712:11;-1:-1:-1;;;;;455:18712:11;;;;;3841:38;455:18712;;;3841:38;455:18712;;;3889:30;455:18712;;;3889:30;455:18712;;3929:22;455:18712;;;3929:22;455:18712;3961:36;455:18712;;;3961:36;455:18712;;;4007:40;455:18712;;;4057:30;455:18712;;;4097:30;455:18712;4157:9;4137:29;455:18712;4228:3;4199:32;455:18712;4271:3;4247:27;455:18712;3647:99:5;;455:18712:11;;;3647:99:5;455:18712:11;;;;;3721:14:5;455:18712:11;;;;;;3721:14:5;455:18712:11;;3562:65:5;-1:-1:-1;;455:18712:11;;;;;3562:65:5;;;455:18712:11;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;3346:108:5;3426:4;;1713:19:7;:23;3387:66:5;;3346:108;3387:66;455:18712:11;;;;;3436:17:5;3346:108;;3347:34;455:18712:11;;;;;3365:16:5;3347:34;;455:18712:11;;;;;;;;;;;;;;;;;;;;10174:17;;;;:62;;;455:18712;10166:96;;;:::i;:::-;455:18712;;;10318:11;455:18712;;;;;10363:21;;;455:18712;;;10354:62;455:18712;;;10362:22;10354:62;:::i;:::-;455:18712;;;;;;;;10524:39;:19;;;455:18712;10546:17;455:18712;10524:39;;:::i;:::-;10505:15;:58;455:18712;;;;;10678:11;455:18712;;10678:54;455:18712;;;;10707:10;455:18712;;;;;;10678:54;;:::i;:::-;10750:17;455:18712;;;;;10678:11;455:18712;;;;;;;10707:10;455:18712;;;;;;-1:-1:-1;;455:18712:11;;;-1:-1:-1;;455:18712:11;;;;;;;;;;;;;;-1:-1:-1;10505:15:11;10972:21;;;455:18712;11030:33;455:18712;;;;;;;;11030:33;455:18712;11075:37;:35;455:18712;11075:37;:::i;:::-;:35;455:18712;;;;10318:11;455:18712;;;;;12703:26;;:55;:26;;;455:18712;12732:26;;;455:18712;12703:55;;:::i;:::-;12869:22;12827:5;455:18712;;12791:32;12802:21;455:18712;12791:32;;:::i;:::-;455:18712;12869:22;;:::i;:::-;12910:28;12957:414;;;;455:18712;;;;13065:45;455:18712;;13084:26;455:18712;13065:45;;:::i;:::-;455:18712;13141:21;;;455:18712;;;;;;-1:-1:-1;;;;;455:18712:11;13133:57;;;;;12957:414;13133:57;;;;12957:414;455:18712;11310:21;;455:18712;11075:35;11333:23;;455:18712;14911:16;455:18712;;;-1:-1:-1;;;;;455:18712:11;;;;;;;;14907:158;;12957:414;455:18712;;15087:17;455:18712;;15087:31;;;;:52;;;12957:414;15083:171;;12957:414;11425:26;;;;11382:117;11425:26;:55;:26;12732;12703;455:18712;11425:26;;;455:18712;11454:26;;455:18712;11425:55;;:::i;:::-;455:18712;;;;;;;;;;;;;11382:117;455:18712;;15083:171;15155:88;;;;;455:18712;;;;;;;971:66:3;;;;;;;;15155:88:11;;455:18712;15155:88;;455:18712;;;;;;15155:88;;;;;;;;15083:171;;;;15155:88;;;;;;;;:::i;:::-;455:18712;;15155:88;;;;;;455:18712;;;;15155:88;455:18712;;971:66:3;455:18712:11;;971:66:3;;;;15155:88:11;455:18712;;;15087:52;15122:17;;;;15087:52;;14907:158;14957:97;;;;;;;;;455:18712;;;;;971:66:3;;;;;;;;14957:97:11;;455:18712;14957:97;;455:18712;;;;;;14957:97;;;;;;;;14907:158;;;;;;;;14957:97;;;;;;;;:::i;:::-;;;;;;;455:18712;;971:66:3;455:18712:11;;971:66:3;;;;13133:57:11;455:18712;;971:66:3;455:18712:11;;971:66:3;;;;13133:57:11;;;;;12957:414;;;;;;;;455:18712;-1:-1:-1;;;455:18712:11;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;10174:62;-1:-1:-1;10212:14:11;455:18712;10195:41;;;10174:62;;455:18712;;;;;;;;;;;;;;;;;;2334:41;455:18712;;;;;;;;-1:-1:-1;455:18712:11;;-1:-1:-1;;455:18712:11;;;;;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;;;:::i;:::-;;4714:18;455:18712;4701:9;:31;455:18712;;;;4784:24;455:18712;;;;4852:30;455:18712;;4944:15;455:18712;;4932:27;455:18712;;;5052:17;455:18712;-1:-1:-1;;;;;455:18712:11;;;5048:168;;455:18712;;;;;5226:14;455:18712;;;;5226:14;455:18712;;;971:66:3;;;;;;;5458:65:11;;5420:10;455:18712;5458:65;;455:18712;5458:65;;;;;;;;;;;455:18712;;;;;;;;:::i;:::-;;;;5420:10;455:18712;5348:606;;455:18712;;5348:606;;455:18712;5348:606;455:18712;5348:606;;455:18712;5348:606;;;455:18712;;;;5348:606;;455:18712;4701:9;5348:606;;;455:18712;5348:606;455:18712;5348:606;;455:18712;5348:606;;;;455:18712;5348:606;;;;455:18712;5348:606;;;;455:18712;5348:606;;;;455:18712;5348:606;;;;455:18712;5348:606;;;;455:18712;4944:15;5348:606;;;455:18712;5348:606;;;;455:18712;;;;5320:11;455:18712;;;;;;;;;;;;;;;;;;;5348:606;;455:18712;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;5348:606;;455:18712;;;;;;5348:606;;455:18712;;;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5348:606;;;455:18712;;;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5348:606;455:18712;5965:52;455:18712;;;;;;;;;;;;;;;;;;;;;;;;;;5348:606;;455:18712;;;;;5348:606;;;455:18712;;;;;;5348:606;;455:18712;;;;;5348:606;;;455:18712;;;;;5348:606;;;455:18712;;;;;5348:606;;;455:18712;;;;;;;;;5348:606;;;455:18712;;;;;;;;;;;;;;;;;;;;5348:606;;;455:18712;;;-1:-1:-1;;455:18712:11;;;;;;;;;;;5348:606;;;455:18712;;;-1:-1:-1;;455:18712:11;;;;;;;;;;;5348:606;;;455:18712;;;;;5348:606;455:18712;;;;5420:10;455:18712;;5965:21;455:18712;;;5965:52;:::i;:::-;6027:34;:15;455:18712;6027:34;:::i;:::-;:15;455:18712;6071:35;:33;455:18712;6071:35;:::i;:::-;:33;455:18712;;6122:73;455:18712;;;;;;;;;;;;:::i;:::-;;;;;;;;4701:9;455:18712;;;;5420:10;;6122:73;;;;455:18712;;;;;;;;;;-1:-1:-1;455:18712:11;;;;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;;;;;5348:606;455:18712;5965:52;455:18712;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;455:18712:11;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;-1:-1:-1;455:18712:11;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;455:18712:11;;;;;-1:-1:-1;455:18712:11;;;5458:65;;;;455:18712;5458:65;;455:18712;5458:65;;;;;;455:18712;5458:65;;;:::i;:::-;;;455:18712;;;;;5458:65;;;;455:18712;;;;5458:65;;;-1:-1:-1;5458:65:11;;5048:168;455:18712;;-1:-1:-1;;;5107:70:11;;5166:10;455:18712;5107:70;;455:18712;;;;;5107:70;;;;;;;;;;;;5048:168;455:18712;5048:168;455:18712;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;5107:70;;;455:18712;5107:70;;;;;;;;;455:18712;5107:70;;;:::i;:::-;;;455:18712;;;;;;;;;;;;5107:70;;;;;;-1:-1:-1;5107:70:11;;455:18712;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;;:::i;:::-;;;;;1689:57;455:18712;;;;;;;;;;;;;;;;;;;1689:57;455:18712;1689:57;455:18712;1689:57;;455:18712;1689:57;;455:18712;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;:::i;:::-;1303:62:0;;:::i;:::-;455:18712:11;;;;;;-1:-1:-1;;;;;455:18712:11;;17934:30;455:18712;;;17934:30;455:18712;;;;;;;;;;;;;;;;;2393:36;455:18712;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;1303:62:0;;:::i;:::-;455:18712:11;;18347:40;455:18712;;;18397:30;455:18712;;;18437:30;455:18712;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;455:18712:11;;:::i;:::-;;;;16888:21;455:18712;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;16575:5;455:18712;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2452:38;455:18712;2452:38;455:18712;2452:38;455:18712;2452:38;455:18712;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2083:28;455:18712;;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;11698:17;;;:62;;;455:18712;11690:96;;;:::i;:::-;455:18712;;;11842:11;455:18712;;;11886:21;455:18712;;;11886:21;455:18712;;;;;;;;11974:5;455:18712;;;;;11995:10;455:18712;;;;;;;;;;;;;;12074:18;;455:18712;;;;;;;;11995:10;;12153:47;11995:10;12153:47;;:::i;:::-;12214:16;;;;;;12210:201;;455:18712;;;12210:201;-1:-1:-1;;455:18712:11;;;;;12285:42;;;;;;12210:201;11995:10;;;;;;;12285:42;;;;;12346:54;455:18712;;;;;;11995:10;12346:54;;12210:201;;;;;;;455:18712;;;12285:42;455:18712;;971:66:3;455:18712:11;;971:66:3;;;;12285:42:11;;;-1:-1:-1;12285:42:11;;455:18712;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;11698:62;-1:-1:-1;11736:14:11;455:18712;11719:41;;;11698:62;;455:18712;;;;;;;;;;;;;2117:24;455:18712;;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;17185:33;455:18712;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;17290:14;455:18712;17229:17;;;17185:33;17285:29;;;;;;;455:18712;;;;;;;:::i;17316:3::-;455:18712;;;17340:11;455:18712;;;17340:25;455:18712;;;17340:25;455:18712;;17339:26;17335:110;;17316:3;;;;:::i;:::-;17270:13;;17335:110;455:18712;;;;;;;;17423:7;455:18712;;;17316:3;455:18712;;;;;;;17423:7;:::i;:::-;17335:110;;;;;455:18712;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;;;17627:11;455:18712;;;;;;;;17655:10;455:18712;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;455:18712:11;;:::i;:::-;;;;17030:9;455:18712;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1513:6:0;455:18712:11;;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;:::i;:::-;-1:-1:-1;;;;;455:18712:11;;;1988:46;455:18712;;;;;;;;;;;1988:46;;;;;455:18712;1988:46;;;;:::i;:::-;455:18712;;;;;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;8163:17;;;:62;;;455:18712;8155:96;;;:::i;:::-;455:18712;;;8307:11;455:18712;;;;;8352:21;;;455:18712;8442:19;455:18712;;;8343:62;455:18712;;;8351:22;8343:62;:::i;:::-;8442:19;455:18712;8423:15;:38;455:18712;;;;;;;;;;;;;;;;;8640:68;455:18712;8672:35;8690:17;455:18712;8423:15;8672:35;:::i;:::-;455:18712;;;;;8640:68;455:18712;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;8163:62;-1:-1:-1;8201:14:11;455:18712;8184:41;;;8163:62;;455:18712;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;:::i;:::-;;;;9066:17;;;:62;;;455:18712;9058:96;;;:::i;:::-;455:18712;;;;9210:11;455:18712;;;9255:21;455:18712;;;9255:21;455:18712;9246:62;455:18712;;;9254:22;9246:62;:::i;:::-;455:18712;;;;;;;;;9397:8;455:18712;;;;;9421:10;455:18712;;;;9388:71;455:18712;;;;;;9396:45;9388:71;:::i;:::-;9556:28;9421:10;9556:28;:::i;:::-;455:18712;;;9911:58;455:18712;9911:58;455:18712;;;;;;:::i;:::-;;;;;9654:106;;;455:18712;;;;;;;9654:106;;455:18712;;;;;;;9397:8;455:18712;;;;;9421:10;455:18712;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;;;;;;;;;;9771:125;;;;9799:11;455:18712;;;;;;;;9799:28;455:18712;;9799:28;:::i;:::-;455:18712;;9771:125;455:18712;;;;;;;;;;;;;;;9421:10;;455:18712;;;;;;;9911:58;;;;455:18712;;9771:125;9858:10;455:18712;;;;;;;;9858:27;455:18712;;9858:27;:::i;:::-;455:18712;;9771:125;;455:18712;;;;;971:66:3;;;;455:18712:11;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;971:66:3;;;;455:18712:11;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;9066:62;-1:-1:-1;9104:14:11;455:18712;9087:41;;;9066:62;;455:18712;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;;:::i;:::-;;;;;1752:63;455:18712;;;;;;;;;;;;;;;;;;;;1752:63;;455:18712;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2147:31;455:18712;;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;2296:32;455:18712;;;;;;;;;;;;;;;;;;;;1303:62:0;;:::i;:::-;2758:6;455:18712:11;;-1:-1:-1;;;;;;455:18712:11;;;;;;;-1:-1:-1;;;;;455:18712:11;2806:40:0;455:18712:11;;2806:40:0;455:18712:11;;;-1:-1:-1;455:18712:11;;-1:-1:-1;;455:18712:11;;;;;;;;:::i;:::-;6504:17;;;;:62;;;455:18712;6496:96;;;:::i;:::-;6623:13;455:18712;6610:9;:26;455:18712;;6696:13;455:18712;6610:9;6683:26;455:18712;;;;;;6791:11;455:18712;;;;;6827:62;455:18712;6836:21;;;455:18712;;6835:22;6827:62;:::i;:::-;6925:19;;;455:18712;6907:15;:37;455:18712;;;;;;6987:5;455:18712;;;;;7008:10;455:18712;;;;6978:68;455:18712;;;;;;6986:42;6978:68;:::i;:::-;7123:28;7008:10;7123:28;:::i;:::-;455:18712;;;7280:26;;;455:18712;6610:9;7267:39;455:18712;;;7796:9;455:18712;;;;;;;:::i;:::-;;;;;7396:139;;;;455:18712;;;;;;;7396:139;;6610:9;;455:18712;;;;7396:139;;;455:18712;;;;;;;6987:5;455:18712;;;;;7008:10;455:18712;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7546:26;;;:39;6610:9;455:18712;;7546:39;:::i;:::-;455:18712;;7595:22;;;:24;455:18712;;7595:24;:::i;:::-;455:18712;;7638:140;;;;7663:24;;:37;6610:9;455:18712;;7663:37;:::i;:::-;455:18712;;7638:140;7008:10;455:18712;;;7796:41;455:18712;;;;7796:41;:::i;:::-;7847:40;6610:9;7847:27;455:18712;7847:40;:::i;:::-;:27;455:18712;;;;;;;;;6610:9;455:18712;;;;7008:10;;7903:53;;455:18712;;;;7903:53;455:18712;7638:140;7731:23;;:36;6610:9;455:18712;;7731:36;:::i;:::-;455:18712;;7638:140;;455:18712;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;6504:62;-1:-1:-1;6542:14:11;455:18712;6525:41;;;6504:62;;455:18712;;;;;;;;;;;;;2045:32;455:18712;;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;1303:62:0;;:::i;:::-;18792:4:11;18736:52;;;;:::i;:::-;:60;455:18712;;18846:56;455:18712;18912:46;455:18712;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;:::i;:::-;1303:62:0;;:::i;:::-;455:18712:11;;;;;;-1:-1:-1;;;;;455:18712:11;;18048:22;455:18712;;;18048:22;455:18712;;;;;;;;;;;;;;;;;2189:33;455:18712;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;;;;1821:46;455:18712;;;;;;;;;;;;;;;;;;;;;;;2333:6:6;-1:-1:-1;;;;;455:18712:11;2324:4:6;2316:23;455:18712:11;;;;;-1:-1:-1;;;;;;;;;;;455:18712:11;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;455:18712:11;;-1:-1:-1;;455:18712:11;;;;;;:::i;:::-;;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1898:6:6;455:18712:11;;;;;1873:80:6;1889:4;1881:23;;;1873:80;:::i;:::-;1963:87;-1:-1:-1;;;;;;;;;;;455:18712:11;;;;;1971:30:6;1963:87;:::i;:::-;1303:62:0;;:::i;:::-;971:66:3;455:18712:11;;;;;;3330:17:3;;;;;;:::i;3232:526::-;455:18712:11;;;;971:66:3;;;;3383:63;;;;;;455:18712:11;3383:63:3;;;;;;;;;3232:526;-1:-1:-1;3379:302:3;;455:18712:11;;-1:-1:-1;;;3610:56:3;;455:18712:11;3610:56:3;;971:66;;;;455:18712:11;971:66:3;;455:18712:11;971:66:3;455:18712:11;;;971:66:3;-1:-1:-1;;;971:66:3;;;;;;3610:56;3379:302;3496:28;;;;;971:66;;2171:17;;;:::i;:::-;2204:27;;;;455:18712:11;;2523:15:3;;;:28;;;3379:302;2519:123;;3379:302;3232:526;;;455:18712:11;;2519:123:3;7318:69:7;455:18712:11;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;7276:25:7;;;;;;;;;455:18712:11;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;7318:69:7;:::i;:::-;;2519:123:3;;;;;455:18712:11;;;-1:-1:-1;7318:69:7;:::i;2523:28:3:-;;455:18712:11;2523:28:3;;971:66;455:18712:11;;-1:-1:-1;;;971:66:3;;455:18712:11;971:66:3;;;;;;455:18712:11;971:66:3;;455:18712:11;971:66:3;455:18712:11;;;971:66:3;-1:-1:-1;;;971:66:3;;;;;;;3383:63;;;;;;;;;;;;;;;;;:::i;:::-;;;971:66;;;;;3383:63;;;;971:66;455:18712:11;;;3383:63:3;;;;;455:18712:11;;;;;;;-1:-1:-1;;455:18712:11;;;;;;:::i;:::-;1303:62:0;;:::i;:::-;455:18712:11;;;;;;-1:-1:-1;;;;;455:18712:11;;17804:38;455:18712;;;17804:38;455:18712;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;16731:8;455:18712;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1303:62:0;;:::i;:::-;455:18712:11;;;;;;;;;1513:6:0;455:18712:11;;19046:21;19020:48;;;;;;455:18712;19020:48;;;;455:18712;;19020:48;455:18712;;971:66:3;;;;;;;;19020:48:11;;;;;455:18712;;;;;;;-1:-1:-1;;455:18712:11;;;;;;:::i;:::-;-1:-1:-1;;;;;455:18712:11;;;1924:58;455:18712;;;;;;;;;;;1924:58;;;;;455:18712;1924:58;;;;:::i;455:18712::-;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1898:6:6;455:18712:11;;1873:80:6;1889:4;1881:23;;;1873:80;:::i;:::-;1963:87;-1:-1:-1;;;;;;;;;;;455:18712:11;;;;;1971:30:6;1963:87;:::i;:::-;1303:62:0;;:::i;:::-;455:18712:11;;;;;;;;;;-1:-1:-1;;;;;455:18712:11;;;;;;;;;;;;971:66:3;455:18712:11;;3232:526:3;455:18712:11;;;3330:17:3;;;;;;;;:::i;3232:526::-;455:18712:11;;;;;;;;971:66:3;;;3383:63;;;;455:18712:11;3383:63:3;;;;;;;;;3232:526;-1:-1:-1;3379:302:3;;455:18712:11;;-1:-1:-1;;;3610:56:3;;455:18712:11;3610:56:3;;971:66;;;;;;;455:18712:11;971:66:3;455:18712:11;;;971:66:3;-1:-1:-1;;;971:66:3;;;;;;3610:56;3379:302;3496:28;;;;;971:66;;2171:17;;;:::i;:::-;2204:27;;;;455:18712:11;;;2523:15:3;;;:28;;;3379:302;2519:123;;3379:302;3232:526;;;;;455:18712:11;;2519:123:3;455:18712:11;7318:69:7;455:18712:11;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;7276:25:7;;;;;;455:18712:11;;;;;;;;:::i;7318:69:7:-;;2519:123:3;;;;;;;2523:28;;;;;971:66;455:18712:11;;-1:-1:-1;;;971:66:3;;455:18712:11;971:66:3;;;;;;;;;455:18712:11;971:66:3;455:18712:11;;;971:66:3;-1:-1:-1;;;971:66:3;;;;;;;3383:63;;;;;;;;;;;;;;;;;:::i;:::-;;;971:66;;;;;3383:63;;;;971:66;455:18712:11;;;3383:63:3;;;;;455:18712:11;;;;;;;-1:-1:-1;;455:18712:11;;;;1303:62:0;;:::i;:::-;455:18712:11;;18558:29;455:18712;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;;;;1873:45;455:18712;;;;;;;;;;;;;;;;;;;;;;;;2262:28;455:18712;;;;;;;;;;;;;;-1:-1:-1;;455:18712:11;;;;;;;;1629:54;455:18712;;;;;;;;1629:54;;455:18712;1629:54;;;455:18712;-1:-1:-1;;;;;455:18712:11;;;;;1629:54;455:18712;1629:54;;;:::i;:::-;;;455:18712;1629:54;;;:::i;:::-;;;;;455:18712;1629:54;;;;455:18712;1629:54;;;455:18712;1629:54;;;455:18712;1629:54;;;;455:18712;1629:54;;;;455:18712;1629:54;;;;455:18712;1629:54;;;;455:18712;1629:54;;;455:18712;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1629:54;455:18712;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;455:18712:11;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;455:18712:11;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;455:18712:11;;;;;;;:::o;:::-;-1:-1:-1;;;;;455:18712:11;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;455:18712:11;;;;;;;:::o;:::-;;;;;;-1:-1:-1;455:18712:11;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;-1:-1:-1;455:18712:11;;;;-1:-1:-1;455:18712:11;;-1:-1:-1;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;455:18712:11;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;455:18712:11;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;455:18712:11;;-1:-1:-1;455:18712:11;;;-1:-1:-1;455:18712:11;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;455:18712:11;;;;;;-1:-1:-1;;455:18712:11;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;455:18712:11;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;1599:130:0:-;1513:6;455:18712:11;-1:-1:-1;;;;;455:18712:11;929:10:8;1662:23:0;455:18712:11;;1599:130:0:o;455:18712:11:-;;;;971:66:3;;;455:18712:11;;;;;;;;;;;;;;;;;;2666:187:0;2758:6;455:18712:11;;-1:-1:-1;;;;;455:18712:11;;;-1:-1:-1;;;;;;455:18712:11;;;;;;;;;;2806:40:0;-1:-1:-1;;2806:40:0;2666:187::o;455:18712:11:-;;;;:::o;:::-;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;1699:281:3;1713:19:7;;:23;455:18712:11;;-1:-1:-1;;;;;;;;;;;455:18712:11;;-1:-1:-1;;;;;;455:18712:11;-1:-1:-1;;;;;455:18712:11;;;;;;;;;1699:281:3:o;455:18712:11:-;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;7682:628:7;;;;7886:418;;;455:18712:11;;;7917:22:7;7913:286;;8212:17;;:::o;7913:286::-;1713:19;:23;455:18712:11;;8212:17:7;:::o;455:18712:11:-;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;7886:418:7;455:18712:11;;;;-1:-1:-1;8991:21:7;:17;;9163:142;;;;;;;8987:379;455:18712:11;;-1:-1:-1;;;9335:20:7;;455:18712:11;9335:20:7;;;455:18712:11;;;;;;;;;;;:::i;:::-;9335:20:7;;;455:18712:11;;;;:::o;:::-;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;455:18712:11;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;-1:-1:-1;;;455:18712:11;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;13486:1210::-;-1:-1:-1;455:18712:11;;;13632:11;455:18712;;;;;;13688:5;455:18712;;;;;;;;;;;;;;;;;;;13740:21;;;;455:18712;;;;;13739:22;455:18712;;13739:40;;13486:1210;13739:62;;;;13486:1210;13735:101;;455:18712;;;;;;;;;;;;;;;;;;13893:31;13889:70;;14400:35;13988:26;:55;:26;;;455:18712;14017:26;;;455:18712;13988:55;;:::i;:::-;14154:22;14112:5;455:18712;;14076:32;14087:21;455:18712;14076:32;;:::i;14154:22::-;14195:28;;14233:123;;;13486:1210;14400:35;;:::i;:::-;14468:71;;;;455:18712;14489:24;455:18712;14468:71;;14562:16;;;;;14558:105;;14681:8;;;;;13486:1210;:::o;14558:105::-;455:18712;14602:34;:16;;;;;455:18712;14602:34;:::i;:::-;455:18712;;;;;14594:58;:::o;455:18712::-;-1:-1:-1;;;455:18712:11;;;;;;;;14468:71;14516:23;;455:18712;14468:71;;;14233:123;455:18712;;;14291:45;14310:26;455:18712;14291:45;;:::i;:::-;455:18712;14233:123;;;;13889:70;13940:8;;;;;:::o;13739:62::-;13783:18;455:18712;13783:18;;;455:18712;;13739:62;;:40;455:18712;;;;;13765:14;13739:40;;15330:378;15414:13;455:18712;-1:-1:-1;;;;;455:18712:11;;;;;15414:27;;15410:44;;455:18712;15549:39;455:18712;;;971:66:3;;;;;;;;15549:39:11;;455:18712;15549:39;;;455:18712;15549:39;;-1:-1:-1;;15549:39:11;;;15330:378;-1:-1:-1;15545:157:11;;15679:12;-1:-1:-1;15679:12:11;:::o;15545:157::-;15636:11;;15629:18;:::o;15549:39::-;;;;;;;;;;;;;;;;;:::i;:::-;;;455:18712;;;;;;15549:39;;;;;;;-1:-1:-1;15549:39:11;;15410:44;15443:11;;;455:18712;15443:11;:::o;455:18712::-;-1:-1:-1;;;;;455:18712:11;;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2649400","executionCost":"infinite","totalCost":"infinite"},"external":{"astroChartNFT()":"2961","astrologerManager()":"2631","astrologerPredictions(address,uint256)":"6880","astrologerRewardPercentage()":"3135","calculateVoterReward(uint256,address)":"infinite","castDAOVote(uint256,bool,uint256)":"infinite","claimReward(uint256)":"infinite","createPrediction(string,string,uint256)":"infinite","daoNoVotes(uint256)":"2365","daoVotes(uint256,address)":"5112","daoVotingDuration()":"2673","daoYesVotes(uint256)":"2563","getActivePredictions()":"infinite","getAstrologerPredictions(address)":"infinite","getDAOVote(uint256,address)":"infinite","getDAOVoteCounts(uint256)":"5090","getPrediction(uint256)":"infinite","getUserVotes(address)":"infinite","getVote(uint256,address)":"infinite","initialize(address,address,address,address,uint256,uint256,uint256)":"infinite","maxVoterStake()":"2277","minAstrologerStake()":"2541","minVoterStake()":"3245","owner()":"2829","platformFeePercentage()":"3047","predictionStats()":"9316","predictions(uint256)":"infinite","proxiableUUID()":"infinite","renounceOwnership()":"28459","reputationScorer()":"2719","resolvePrediction(uint256)":"infinite","setAstroChartNFT(address)":"27432","setAstrologerManager(address)":"26794","setDAOVotingDuration(uint256)":"24469","setReputationScorer(address)":"27564","setRewardPercentages(uint256,uint256)":"46925","setStakeLimits(uint256,uint256,uint256)":"69391","setZodiacDAO(address)":"26926","startDAOVoting(uint256)":"32918","transferOwnership(address)":"29183","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite","userVotes(address,uint256)":"7298","voteOnPrediction(uint256,bool)":"infinite","votes(uint256,address)":"7628","withdraw()":"infinite","zodiacDAO()":"2917"},"internal":{"_authorizeUpgrade(address)":"infinite","distributeRewards(uint256,bool)":"infinite","hasAstroChartNFT(address)":"infinite","isDAOMember(address,uint256)":"infinite","updateAstrologerReputation(address,uint256,bool)":"infinite"}},"methodIdentifiers":{"astroChartNFT()":"b488202d","astrologerManager()":"6fd31a41","astrologerPredictions(address,uint256)":"37562b29","astrologerRewardPercentage()":"d75ebce5","calculateVoterReward(uint256,address)":"5aa76be0","castDAOVote(uint256,bool,uint256)":"84ebaae1","claimReward(uint256)":"ae169a50","createPrediction(string,string,uint256)":"d472a570","daoNoVotes(uint256)":"256c52d3","daoVotes(uint256,address)":"78640668","daoVotingDuration()":"72f022c2","daoYesVotes(uint256)":"533a12a5","getActivePredictions()":"a9d6921b","getAstrologerPredictions(address)":"bc858185","getDAOVote(uint256,address)":"444a50c2","getDAOVoteCounts(uint256)":"9dcf0b7a","getPrediction(uint256)":"fe83bece","getUserVotes(address)":"950c7822","getVote(uint256,address)":"bc3f931f","initialize(address,address,address,address,uint256,uint256,uint256)":"e77fc7a4","maxVoterStake()":"0e8c47f2","minAstrologerStake()":"63ab68ef","minVoterStake()":"f7333e33","owner()":"8da5cb5b","platformFeePercentage()":"cdd78cfc","predictionStats()":"b6bb1754","predictions(uint256)":"004fbbb0","proxiableUUID()":"52d1902d","renounceOwnership()":"715018a6","reputationScorer()":"73c84d21","resolvePrediction(uint256)":"e69fe3dc","setAstroChartNFT(address)":"ce083d73","setAstrologerManager(address)":"44cda485","setDAOVotingDuration(uint256)":"34954999","setReputationScorer(address)":"e9725c21","setRewardPercentages(uint256,uint256)":"6f502056","setStakeLimits(uint256,uint256,uint256)":"c8ab686a","setZodiacDAO(address)":"65af67bd","startDAOVoting(uint256)":"886dbdf9","transferOwnership(address)":"f2fde38b","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286","userVotes(address,uint256)":"8b3511f7","voteOnPrediction(uint256,bool)":"700c8367","votes(uint256,address)":"d23254b4","withdraw()":"3ccfd60b","zodiacDAO()":"ab76c9ed"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"predictionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"daoMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DAOVoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"predictionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"DAOVotingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"predictionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"astrologer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"astrologerStake\",\"type\":\"uint256\"}],\"name\":\"PredictionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"predictionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"outcome\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"astrologerReward\",\"type\":\"uint256\"}],\"name\":\"PredictionResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"predictionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"predictionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"astroChartNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"astrologerManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"astrologerPredictions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"astrologerRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"calculateVoterReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_outcome\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"castDAOVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"createPrediction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daoNoVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"daoVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoVotingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daoYesVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivePredictions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_astrologer\",\"type\":\"address\"}],\"name\":\"getAstrologerPredictions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getDAOVote\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct WorldPredictionMarket.DAOVote\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"}],\"name\":\"getDAOVoteCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"}],\"name\":\"getPrediction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"astrologer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"astrologerId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"astrologerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoterStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVoterStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVoterStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoters\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isResolved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"outcome\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"daoVotingActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolvedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct WorldPredictionMarket.WorldPrediction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserVotes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVote\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rewardClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct WorldPredictionMarket.Vote\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_astrologerManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_astroChartNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zodiacDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reputationScorer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAstrologerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minVoterStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxVoterStake\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxVoterStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAstrologerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minVoterStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predictionStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPredictions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activePredictions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolvedPredictions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVolume\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"predictions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"astrologer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"astrologerId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"astrologerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoterStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVoterStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVoterStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoters\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isResolved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"outcome\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"daoVotingActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolvedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reputationScorer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"}],\"name\":\"resolvePrediction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_astroChartNFT\",\"type\":\"address\"}],\"name\":\"setAstroChartNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_astrologerManager\",\"type\":\"address\"}],\"name\":\"setAstrologerManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDAOVotingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reputationScorer\",\"type\":\"address\"}],\"name\":\"setReputationScorer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_astrologerRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platformFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setRewardPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAstrologerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minVoterStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxVoterStake\",\"type\":\"uint256\"}],\"name\":\"setStakeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zodiacDAO\",\"type\":\"address\"}],\"name\":\"setZodiacDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"}],\"name\":\"startDAOVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"voteOnPrediction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rewardClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zodiacDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"castDAOVote(uint256,bool,uint256)\":{\"params\":{\"_outcome\":\"True if prediction was correct, false if incorrect\",\"_predictionId\":\"The prediction ID\",\"_tokenId\":\"The DAO token ID for voting\"}},\"claimReward(uint256)\":{\"params\":{\"_predictionId\":\"The prediction ID\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createPrediction(string,string,uint256)\":{\"params\":{\"_deadline\":\"The deadline for the prediction\",\"_description\":\"The detailed description\",\"_title\":\"The title of the prediction\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"resolvePrediction(uint256)\":{\"params\":{\"_predictionId\":\"The prediction ID\"}},\"startDAOVoting(uint256)\":{\"params\":{\"_predictionId\":\"The prediction ID\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"voteOnPrediction(uint256,bool)\":{\"params\":{\"_predictionId\":\"The prediction ID\",\"_vote\":\"True for YES, false for NO\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateVoterReward(uint256,address)\":{\"notice\":\"Calculate voter reward amount\"},\"castDAOVote(uint256,bool,uint256)\":{\"notice\":\"DAO members vote on prediction outcome\"},\"claimReward(uint256)\":{\"notice\":\"Claim rewards for correct predictions\"},\"createPrediction(string,string,uint256)\":{\"notice\":\"Create a world prediction by staking FLOW\"},\"resolvePrediction(uint256)\":{\"notice\":\"Resolve prediction based on DAO votes\"},\"startDAOVoting(uint256)\":{\"notice\":\"Start DAO voting after prediction deadline\"},\"voteOnPrediction(uint256,bool)\":{\"notice\":\"Vote on a prediction (requires AstroChart NFT)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WorldPredictionMarket.sol\":\"WorldPredictionMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"contracts/WorldPredictionMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"./interfaces/IAstrologerManager.sol\\\";\\nimport \\\"./interfaces/IReputationScorer.sol\\\";\\n\\ncontract WorldPredictionMarket is \\n    Initializable, \\n    OwnableUpgradeable, \\n    UUPSUpgradeable \\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    CountersUpgradeable.Counter private _predictionIds;\\n    \\n    struct WorldPrediction {\\n        uint256 id;\\n        address astrologer;\\n        uint256 astrologerId;\\n        string title;\\n        string description;\\n        uint256 deadline;\\n        uint256 astrologerStake;\\n        uint256 totalVoterStake;\\n        uint256 yesVoterStake;\\n        uint256 noVoterStake;\\n        uint256 totalVoters;\\n        bool isResolved;\\n        bool outcome;\\n        bool daoVotingActive;\\n        uint256 createdAt;\\n        uint256 resolvedAt;\\n    }\\n\\n    struct Vote {\\n        bool hasVoted;\\n        bool vote; // true = YES, false = NO\\n        uint256 stakeAmount;\\n        bool rewardClaimed;\\n    }\\n\\n    struct DAOVote {\\n        bool hasVoted;\\n        bool vote; // true = YES (correct), false = NO (incorrect)\\n        uint256 tokenId;\\n    }\\n\\n    struct PredictionStats {\\n        uint256 totalPredictions;\\n        uint256 activePredictions;\\n        uint256 resolvedPredictions;\\n        uint256 totalVolume;\\n    }\\n\\n    mapping(uint256 => WorldPrediction) public predictions;\\n    mapping(uint256 => mapping(address => Vote)) public votes;\\n    mapping(uint256 => mapping(address => DAOVote)) public daoVotes;\\n    mapping(uint256 => uint256) public daoYesVotes;\\n    mapping(uint256 => uint256) public daoNoVotes;\\n    mapping(address => uint256[]) public astrologerPredictions;\\n    mapping(address => uint256[]) public userVotes;\\n    \\n    address public astrologerManager;\\n    address public astroChartNFT;\\n    address public zodiacDAO;\\n    address public reputationScorer;\\n    \\n    uint256 public minAstrologerStake;\\n    uint256 public minVoterStake;\\n    uint256 public maxVoterStake;\\n    uint256 public daoVotingDuration;\\n    uint256 public astrologerRewardPercentage; // 500 = 5%\\n    uint256 public platformFeePercentage; // 200 = 2%\\n    \\n    PredictionStats public predictionStats;\\n    \\n    event PredictionCreated(\\n        uint256 indexed predictionId,\\n        address indexed astrologer,\\n        string title,\\n        uint256 deadline,\\n        uint256 astrologerStake\\n    );\\n\\n    event VoteCast(\\n        uint256 indexed predictionId,\\n        address indexed voter,\\n        bool vote,\\n        uint256 stakeAmount\\n    );\\n\\n    event DAOVoteCast(\\n        uint256 indexed predictionId,\\n        address indexed daoMember,\\n        bool vote,\\n        uint256 tokenId\\n    );\\n\\n    event PredictionResolved(\\n        uint256 indexed predictionId,\\n        bool outcome,\\n        uint256 totalStake,\\n        uint256 astrologerReward\\n    );\\n\\n    event RewardClaimed(\\n        uint256 indexed predictionId,\\n        address indexed claimer,\\n        uint256 rewardAmount\\n    );\\n\\n    event DAOVotingStarted(\\n        uint256 indexed predictionId,\\n        uint256 endTime\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _astrologerManager,\\n        address _astroChartNFT,\\n        address _zodiacDAO,\\n        address _reputationScorer,\\n        uint256 _minAstrologerStake,\\n        uint256 _minVoterStake,\\n        uint256 _maxVoterStake\\n    ) public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        \\n        astrologerManager = _astrologerManager;\\n        astroChartNFT = _astroChartNFT;\\n        zodiacDAO = _zodiacDAO;\\n        reputationScorer = _reputationScorer;\\n        minAstrologerStake = _minAstrologerStake;\\n        minVoterStake = _minVoterStake;\\n        maxVoterStake = _maxVoterStake;\\n        daoVotingDuration = 2 minutes; // Reduced for testing\\n        astrologerRewardPercentage = 500; // 5%\\n        platformFeePercentage = 200; // 2%\\n    }\\n\\n    /**\\n     * @notice Create a world prediction by staking FLOW\\n     * @param _title The title of the prediction\\n     * @param _description The detailed description\\n     * @param _deadline The deadline for the prediction\\n     */\\n    function createPrediction(\\n        string memory _title,\\n        string memory _description,\\n        uint256 _deadline\\n    ) external payable returns (uint256) {\\n        require(msg.value >= minAstrologerStake, \\\"Insufficient astrologer stake\\\");\\n        require(bytes(_title).length > 0, \\\"Title cannot be empty\\\");\\n        require(bytes(_description).length > 0, \\\"Description cannot be empty\\\");\\n        require(_deadline > block.timestamp, \\\"Deadline must be in the future\\\");\\n\\n        // Verify astrologer is registered\\n        if (astrologerManager != address(0)) {\\n            require(IAstrologerManager(astrologerManager).isAstrologerVerified(msg.sender), \\\"Astrologer not verified\\\");\\n        }\\n\\n        _predictionIds.increment();\\n        uint256 predictionId = _predictionIds.current();\\n\\n        predictions[predictionId] = WorldPrediction({\\n            id: predictionId,\\n            astrologer: msg.sender,\\n            astrologerId: IAstrologerManager(astrologerManager).getAstrologerId(msg.sender),\\n            title: _title,\\n            description: _description,\\n            deadline: _deadline,\\n            astrologerStake: msg.value,\\n            totalVoterStake: 0,\\n            yesVoterStake: 0,\\n            noVoterStake: 0,\\n            totalVoters: 0,\\n            isResolved: false,\\n            outcome: false,\\n            daoVotingActive: false,\\n            createdAt: block.timestamp,\\n            resolvedAt: 0\\n        });\\n\\n        astrologerPredictions[msg.sender].push(predictionId);\\n        predictionStats.totalPredictions++;\\n        predictionStats.activePredictions++;\\n\\n        emit PredictionCreated(predictionId, msg.sender, _title, _deadline, msg.value);\\n        return predictionId;\\n    }\\n\\n    /**\\n     * @notice Vote on a prediction (requires AstroChart NFT)\\n     * @param _predictionId The prediction ID\\n     * @param _vote True for YES, false for NO\\n     */\\n    function voteOnPrediction(uint256 _predictionId, bool _vote) external payable {\\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \\\"Invalid prediction ID\\\");\\n        require(msg.value >= minVoterStake, \\\"Insufficient voter stake\\\");\\n        require(msg.value <= maxVoterStake, \\\"Stake amount too high\\\");\\n        \\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        require(!prediction.isResolved, \\\"Prediction already resolved\\\");\\n        require(block.timestamp < prediction.deadline, \\\"Voting period ended\\\");\\n        require(!votes[_predictionId][msg.sender].hasVoted, \\\"Already voted\\\");\\n        \\n        // Verify voter has minted AstroChart NFT\\n        require(hasAstroChartNFT(msg.sender), \\\"Must own AstroChart NFT to vote\\\");\\n        \\n        // Verify voter stake is >= astrologer stake\\n        require(msg.value >= prediction.astrologerStake, \\\"Voter stake must be >= astrologer stake\\\");\\n\\n        votes[_predictionId][msg.sender] = Vote({\\n            hasVoted: true,\\n            vote: _vote,\\n            stakeAmount: msg.value,\\n            rewardClaimed: false\\n        });\\n\\n        prediction.totalVoterStake += msg.value;\\n        prediction.totalVoters++;\\n        \\n        if (_vote) {\\n            prediction.yesVoterStake += msg.value;\\n        } else {\\n            prediction.noVoterStake += msg.value;\\n        }\\n        \\n        userVotes[msg.sender].push(_predictionId);\\n        predictionStats.totalVolume += msg.value;\\n\\n        emit VoteCast(_predictionId, msg.sender, _vote, msg.value);\\n    }\\n\\n    /**\\n     * @notice Start DAO voting after prediction deadline\\n     * @param _predictionId The prediction ID\\n     */\\n    function startDAOVoting(uint256 _predictionId) external {\\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \\\"Invalid prediction ID\\\");\\n        \\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        require(!prediction.isResolved, \\\"Prediction already resolved\\\");\\n        require(block.timestamp >= prediction.deadline, \\\"Prediction deadline not reached\\\");\\n        require(!prediction.daoVotingActive, \\\"DAO voting already active\\\");\\n\\n        prediction.daoVotingActive = true;\\n        \\n        emit DAOVotingStarted(_predictionId, block.timestamp + daoVotingDuration);\\n    }\\n\\n    /**\\n     * @notice DAO members vote on prediction outcome\\n     * @param _predictionId The prediction ID\\n     * @param _outcome True if prediction was correct, false if incorrect\\n     * @param _tokenId The DAO token ID for voting\\n     */\\n    function castDAOVote(uint256 _predictionId, bool _outcome, uint256 _tokenId) external {\\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \\\"Invalid prediction ID\\\");\\n        \\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        require(!prediction.isResolved, \\\"Prediction already resolved\\\");\\n        require(prediction.daoVotingActive, \\\"DAO voting not active\\\");\\n        require(!daoVotes[_predictionId][msg.sender].hasVoted, \\\"Already voted\\\");\\n        \\n        // Verify DAO membership by checking AstroChart NFT ownership\\n        require(hasAstroChartNFT(msg.sender), \\\"Not a DAO member\\\");\\n\\n        daoVotes[_predictionId][msg.sender] = DAOVote({\\n            hasVoted: true,\\n            vote: _outcome,\\n            tokenId: _tokenId\\n        });\\n\\n        if (_outcome) {\\n            daoYesVotes[_predictionId]++;\\n        } else {\\n            daoNoVotes[_predictionId]++;\\n        }\\n\\n        emit DAOVoteCast(_predictionId, msg.sender, _outcome, _tokenId);\\n    }\\n\\n    /**\\n     * @notice Resolve prediction based on DAO votes\\n     * @param _predictionId The prediction ID\\n     */\\n    function resolvePrediction(uint256 _predictionId) external {\\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \\\"Invalid prediction ID\\\");\\n        \\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        require(!prediction.isResolved, \\\"Prediction already resolved\\\");\\n        require(prediction.daoVotingActive, \\\"DAO voting not started\\\");\\n        require(block.timestamp >= prediction.deadline + daoVotingDuration, \\\"DAO voting period not ended\\\");\\n\\n        // Determine outcome based on DAO votes\\n        uint256 totalDAOVotes = daoYesVotes[_predictionId] + daoNoVotes[_predictionId];\\n        require(totalDAOVotes > 0, \\\"No DAO votes cast\\\");\\n        \\n        bool outcome = daoYesVotes[_predictionId] > daoNoVotes[_predictionId];\\n        \\n        prediction.isResolved = true;\\n        prediction.outcome = outcome;\\n        prediction.resolvedAt = block.timestamp;\\n        \\n        predictionStats.activePredictions--;\\n        predictionStats.resolvedPredictions++;\\n\\n        // Calculate and distribute rewards\\n        uint256 astrologerReward = distributeRewards(_predictionId, outcome);\\n        \\n        // Update reputation\\n        updateAstrologerReputation(prediction.astrologer, prediction.astrologerId, outcome);\\n\\n        emit PredictionResolved(_predictionId, outcome, prediction.totalVoterStake + prediction.astrologerStake, astrologerReward);\\n    }\\n\\n    /**\\n     * @notice Claim rewards for correct predictions\\n     * @param _predictionId The prediction ID\\n     */\\n    function claimReward(uint256 _predictionId) external {\\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \\\"Invalid prediction ID\\\");\\n        \\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        require(prediction.isResolved, \\\"Prediction not resolved\\\");\\n        \\n        Vote storage vote = votes[_predictionId][msg.sender];\\n        require(vote.hasVoted, \\\"No vote found\\\");\\n        require(!vote.rewardClaimed, \\\"Reward already claimed\\\");\\n\\n        uint256 rewardAmount = calculateVoterReward(_predictionId, msg.sender);\\n        if (rewardAmount > 0) {\\n            vote.rewardClaimed = true;\\n            payable(msg.sender).transfer(rewardAmount);\\n            emit RewardClaimed(_predictionId, msg.sender, rewardAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Distribute rewards after prediction resolution\\n     */\\n    function distributeRewards(uint256 _predictionId, bool outcome) internal returns (uint256) {\\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        \\n        uint256 totalPot = prediction.totalVoterStake + prediction.astrologerStake;\\n        uint256 platformFee = (totalPot * platformFeePercentage) / 10000;\\n        uint256 distributablePot = totalPot - platformFee;\\n        \\n        uint256 astrologerReward = 0;\\n        \\n        if (outcome) {\\n            // Astrologer was correct - gets 5% of total pot\\n            astrologerReward = (distributablePot * astrologerRewardPercentage) / 10000;\\n            payable(prediction.astrologer).transfer(astrologerReward);\\n        } else {\\n            // Astrologer was wrong - stake is redistributed to winning voters\\n            // Reputation will be penalized by updateAstrologerReputation\\n        }\\n        \\n        return astrologerReward;\\n    }\\n\\n    /**\\n     * @notice Calculate voter reward amount\\n     */\\n    function calculateVoterReward(uint256 _predictionId, address _voter) public view returns (uint256) {\\n        WorldPrediction storage prediction = predictions[_predictionId];\\n        Vote storage vote = votes[_predictionId][_voter];\\n        \\n        if (!prediction.isResolved || !vote.hasVoted || vote.rewardClaimed) {\\n            return 0;\\n        }\\n\\n        // Only winning voters get rewards\\n        if (vote.vote != prediction.outcome) {\\n            return 0;\\n        }\\n\\n        uint256 totalPot = prediction.totalVoterStake + prediction.astrologerStake;\\n        uint256 platformFee = (totalPot * platformFeePercentage) / 10000;\\n        uint256 distributablePot = totalPot - platformFee;\\n        \\n        uint256 astrologerReward = 0;\\n        if (prediction.outcome) {\\n            astrologerReward = (distributablePot * astrologerRewardPercentage) / 10000;\\n        }\\n        \\n        uint256 voterRewardPool = distributablePot - astrologerReward;\\n        uint256 winningStake = prediction.outcome ? prediction.yesVoterStake : prediction.noVoterStake;\\n        \\n        if (winningStake > 0) {\\n            return (vote.stakeAmount * voterRewardPool) / winningStake;\\n        }\\n        \\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Update astrologer reputation based on prediction outcome\\n     */\\n    function updateAstrologerReputation(address _astrologer, uint256 _astrologerId, bool _wasCorrect) internal {\\n        if (reputationScorer != address(0)) {\\n            IReputationScorer(reputationScorer).updateReputationFromWorldPrediction(_astrologer, _wasCorrect);\\n        }\\n        \\n        if (astrologerManager != address(0) && _astrologerId > 0) {\\n            IAstrologerManager(astrologerManager).recordPredictionResult(_astrologerId, _wasCorrect);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if user has AstroChart NFT\\n     */\\n    function hasAstroChartNFT(address _user) internal view returns (bool) {\\n        if (astroChartNFT == address(0)) return true; // For testing\\n        \\n        // Check if user has at least one AstroChart NFT\\n        try IERC721(astroChartNFT).balanceOf(_user) returns (uint256 balance) {\\n            return balance > 0;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if user is DAO member\\n     */\\n    function isDAOMember(address _user, uint256 _tokenId) internal view returns (bool) {\\n        if (zodiacDAO == address(0)) return msg.sender == owner(); // For testing, only owner can vote\\n        \\n        // Check if user owns the DAO token\\n        try IERC721(zodiacDAO).ownerOf(_tokenId) returns (address owner) {\\n            return owner == _user;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    // View functions\\n    function getPrediction(uint256 _predictionId) external view returns (WorldPrediction memory) {\\n        require(_predictionId > 0 && _predictionId <= _predictionIds.current(), \\\"Invalid prediction ID\\\");\\n        return predictions[_predictionId];\\n    }\\n\\n    function getVote(uint256 _predictionId, address _voter) external view returns (Vote memory) {\\n        return votes[_predictionId][_voter];\\n    }\\n\\n    function getDAOVote(uint256 _predictionId, address _voter) external view returns (DAOVote memory) {\\n        return daoVotes[_predictionId][_voter];\\n    }\\n\\n    function getAstrologerPredictions(address _astrologer) external view returns (uint256[] memory) {\\n        return astrologerPredictions[_astrologer];\\n    }\\n\\n    function getUserVotes(address _user) external view returns (uint256[] memory) {\\n        return userVotes[_user];\\n    }\\n\\n    function getActivePredictions() external view returns (uint256[] memory) {\\n        uint256[] memory activeIds = new uint256[](predictionStats.activePredictions);\\n        uint256 count = 0;\\n        \\n        for (uint256 i = 1; i <= _predictionIds.current(); i++) {\\n            if (!predictions[i].isResolved) {\\n                activeIds[count] = i;\\n                count++;\\n            }\\n        }\\n        \\n        return activeIds;\\n    }\\n\\n    function getDAOVoteCounts(uint256 _predictionId) external view returns (uint256 yesVotes, uint256 noVotes) {\\n        return (daoYesVotes[_predictionId], daoNoVotes[_predictionId]);\\n    }\\n\\n    // Admin functions\\n    function setAstrologerManager(address _astrologerManager) external onlyOwner {\\n        astrologerManager = _astrologerManager;\\n    }\\n\\n    function setAstroChartNFT(address _astroChartNFT) external onlyOwner {\\n        astroChartNFT = _astroChartNFT;\\n    }\\n\\n    function setZodiacDAO(address _zodiacDAO) external onlyOwner {\\n        zodiacDAO = _zodiacDAO;\\n    }\\n\\n    function setReputationScorer(address _reputationScorer) external onlyOwner {\\n        reputationScorer = _reputationScorer;\\n    }\\n\\n    function setStakeLimits(uint256 _minAstrologerStake, uint256 _minVoterStake, uint256 _maxVoterStake) external onlyOwner {\\n        minAstrologerStake = _minAstrologerStake;\\n        minVoterStake = _minVoterStake;\\n        maxVoterStake = _maxVoterStake;\\n    }\\n\\n    function setDAOVotingDuration(uint256 _duration) external onlyOwner {\\n        daoVotingDuration = _duration;\\n    }\\n\\n    function setRewardPercentages(uint256 _astrologerRewardPercentage, uint256 _platformFeePercentage) external onlyOwner {\\n        require(_astrologerRewardPercentage + _platformFeePercentage <= 1000, \\\"Total percentages cannot exceed 10%\\\");\\n        astrologerRewardPercentage = _astrologerRewardPercentage;\\n        platformFeePercentage = _platformFeePercentage;\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n}\\n\\n// Interface for ERC721 (for NFT checks)\\ninterface IERC721 {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n} \",\"keccak256\":\"0x508baba9d76de202836b1716317248eb1f945e0db965598835a1926d8e27be9d\",\"license\":\"MIT\"},\"contracts/interfaces/IAstrologerManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAstrologerManager {\\n    struct Astrologer {\\n        uint256 id;\\n        address wallet;\\n        string name;\\n        string description;\\n        string specialty;\\n        uint256 experience;\\n        uint256 reputation;\\n        uint256 totalPredictions;\\n        uint256 accuratePredictions;\\n        uint256 tokenContract;\\n        bool isVerified;\\n        bool isActive;\\n        uint256 registeredAt;\\n        uint256 lastActive;\\n    }\\n\\n    function getAstrologerByWallet(address wallet) external view returns (Astrologer memory);\\n    function getAstrologer(uint256 astrologerId) external view returns (Astrologer memory);\\n    function updateReputation(uint256 astrologerId, uint256 newReputation) external;\\n    function recordPredictionResult(uint256 astrologerId, bool wasAccurate) external;\\n    function setTokenContract(uint256 astrologerId, uint256 tokenContract) external;\\n    function isAstrologerVerified(address wallet) external view returns (bool);\\n    function getAstrologerId(address wallet) external view returns (uint256);\\n} \",\"keccak256\":\"0x11ca9cb820c6a6cec9a66342e9d644365a1c256aff7fc4cca46964dbcdae6e64\",\"license\":\"MIT\"},\"contracts/interfaces/IReputationScorer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReputationScorer {\\n    function updateReputationFromWorldPrediction(\\n        address _astrologer,\\n        bool _wasCorrect\\n    ) external;\\n\\n    function getReputationMultiplier(address _astrologer) external view returns (uint256);\\n    \\n    function getReputationScore(address _astrologer) external view returns (\\n        uint256 id,\\n        address astrologer,\\n        uint256 totalPredictions,\\n        uint256 accuratePredictions,\\n        uint256 accuracyPercentage,\\n        uint256 reputationMultiplier,\\n        uint256 marketPredictions,\\n        uint256 dailyPredictions,\\n        uint256 oneToOnePredictions,\\n        uint256 lastUpdated,\\n        bool isActive\\n    );\\n} \",\"keccak256\":\"0x703180fb5f26749d16b00844cc9f4ff63a31eeb43e1fa2303a2c8bd5a7bb2b82\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":503,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":506,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1172,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":485,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":800,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"__gap","offset":0,"slot":"151","type":"t_array(t_uint256)50_storage"},{"astId":1378,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"_predictionIds","offset":0,"slot":"201","type":"t_struct(Counter)1179_storage"},{"astId":1441,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"predictions","offset":0,"slot":"202","type":"t_mapping(t_uint256,t_struct(WorldPrediction)1411_storage)"},{"astId":1448,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"votes","offset":0,"slot":"203","type":"t_mapping(t_uint256,t_mapping(t_address,t_struct(Vote)1420_storage))"},{"astId":1455,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"daoVotes","offset":0,"slot":"204","type":"t_mapping(t_uint256,t_mapping(t_address,t_struct(DAOVote)1427_storage))"},{"astId":1459,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"daoYesVotes","offset":0,"slot":"205","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1463,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"daoNoVotes","offset":0,"slot":"206","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1468,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"astrologerPredictions","offset":0,"slot":"207","type":"t_mapping(t_address,t_array(t_uint256)dyn_storage)"},{"astId":1473,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"userVotes","offset":0,"slot":"208","type":"t_mapping(t_address,t_array(t_uint256)dyn_storage)"},{"astId":1475,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"astrologerManager","offset":0,"slot":"209","type":"t_address"},{"astId":1477,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"astroChartNFT","offset":0,"slot":"210","type":"t_address"},{"astId":1479,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"zodiacDAO","offset":0,"slot":"211","type":"t_address"},{"astId":1481,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"reputationScorer","offset":0,"slot":"212","type":"t_address"},{"astId":1483,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"minAstrologerStake","offset":0,"slot":"213","type":"t_uint256"},{"astId":1485,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"minVoterStake","offset":0,"slot":"214","type":"t_uint256"},{"astId":1487,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"maxVoterStake","offset":0,"slot":"215","type":"t_uint256"},{"astId":1489,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"daoVotingDuration","offset":0,"slot":"216","type":"t_uint256"},{"astId":1491,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"astrologerRewardPercentage","offset":0,"slot":"217","type":"t_uint256"},{"astId":1493,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"platformFeePercentage","offset":0,"slot":"218","type":"t_uint256"},{"astId":1496,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"predictionStats","offset":0,"slot":"219","type":"t_struct(PredictionStats)1436_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_array(t_uint256)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256[])","numberOfBytes":"32","value":"t_array(t_uint256)dyn_storage"},"t_mapping(t_address,t_struct(DAOVote)1427_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct WorldPredictionMarket.DAOVote)","numberOfBytes":"32","value":"t_struct(DAOVote)1427_storage"},"t_mapping(t_address,t_struct(Vote)1420_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct WorldPredictionMarket.Vote)","numberOfBytes":"32","value":"t_struct(Vote)1420_storage"},"t_mapping(t_uint256,t_mapping(t_address,t_struct(DAOVote)1427_storage))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.DAOVote))","numberOfBytes":"32","value":"t_mapping(t_address,t_struct(DAOVote)1427_storage)"},"t_mapping(t_uint256,t_mapping(t_address,t_struct(Vote)1420_storage))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => struct WorldPredictionMarket.Vote))","numberOfBytes":"32","value":"t_mapping(t_address,t_struct(Vote)1420_storage)"},"t_mapping(t_uint256,t_struct(WorldPrediction)1411_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct WorldPredictionMarket.WorldPrediction)","numberOfBytes":"32","value":"t_struct(WorldPrediction)1411_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)1179_storage":{"encoding":"inplace","label":"struct CountersUpgradeable.Counter","members":[{"astId":1178,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(DAOVote)1427_storage":{"encoding":"inplace","label":"struct WorldPredictionMarket.DAOVote","members":[{"astId":1422,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"hasVoted","offset":0,"slot":"0","type":"t_bool"},{"astId":1424,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"vote","offset":1,"slot":"0","type":"t_bool"},{"astId":1426,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"tokenId","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_struct(PredictionStats)1436_storage":{"encoding":"inplace","label":"struct WorldPredictionMarket.PredictionStats","members":[{"astId":1429,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"totalPredictions","offset":0,"slot":"0","type":"t_uint256"},{"astId":1431,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"activePredictions","offset":0,"slot":"1","type":"t_uint256"},{"astId":1433,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"resolvedPredictions","offset":0,"slot":"2","type":"t_uint256"},{"astId":1435,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"totalVolume","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(Vote)1420_storage":{"encoding":"inplace","label":"struct WorldPredictionMarket.Vote","members":[{"astId":1413,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"hasVoted","offset":0,"slot":"0","type":"t_bool"},{"astId":1415,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"vote","offset":1,"slot":"0","type":"t_bool"},{"astId":1417,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"stakeAmount","offset":0,"slot":"1","type":"t_uint256"},{"astId":1419,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"rewardClaimed","offset":0,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_struct(WorldPrediction)1411_storage":{"encoding":"inplace","label":"struct WorldPredictionMarket.WorldPrediction","members":[{"astId":1380,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"id","offset":0,"slot":"0","type":"t_uint256"},{"astId":1382,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"astrologer","offset":0,"slot":"1","type":"t_address"},{"astId":1384,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"astrologerId","offset":0,"slot":"2","type":"t_uint256"},{"astId":1386,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"title","offset":0,"slot":"3","type":"t_string_storage"},{"astId":1388,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"description","offset":0,"slot":"4","type":"t_string_storage"},{"astId":1390,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"deadline","offset":0,"slot":"5","type":"t_uint256"},{"astId":1392,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"astrologerStake","offset":0,"slot":"6","type":"t_uint256"},{"astId":1394,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"totalVoterStake","offset":0,"slot":"7","type":"t_uint256"},{"astId":1396,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"yesVoterStake","offset":0,"slot":"8","type":"t_uint256"},{"astId":1398,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"noVoterStake","offset":0,"slot":"9","type":"t_uint256"},{"astId":1400,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"totalVoters","offset":0,"slot":"10","type":"t_uint256"},{"astId":1402,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"isResolved","offset":0,"slot":"11","type":"t_bool"},{"astId":1404,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"outcome","offset":1,"slot":"11","type":"t_bool"},{"astId":1406,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"daoVotingActive","offset":2,"slot":"11","type":"t_bool"},{"astId":1408,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"createdAt","offset":0,"slot":"12","type":"t_uint256"},{"astId":1410,"contract":"contracts/WorldPredictionMarket.sol:WorldPredictionMarket","label":"resolvedAt","offset":0,"slot":"13","type":"t_uint256"}],"numberOfBytes":"448"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"calculateVoterReward(uint256,address)":{"notice":"Calculate voter reward amount"},"castDAOVote(uint256,bool,uint256)":{"notice":"DAO members vote on prediction outcome"},"claimReward(uint256)":{"notice":"Claim rewards for correct predictions"},"createPrediction(string,string,uint256)":{"notice":"Create a world prediction by staking FLOW"},"resolvePrediction(uint256)":{"notice":"Resolve prediction based on DAO votes"},"startDAOVoting(uint256)":{"notice":"Start DAO voting after prediction deadline"},"voteOnPrediction(uint256,bool)":{"notice":"Vote on a prediction (requires AstroChart NFT)"}},"version":1}}},"contracts/interfaces/IAstrologerManager.sol":{"IAstrologerManager":{"abi":[{"inputs":[{"internalType":"uint256","name":"astrologerId","type":"uint256"}],"name":"getAstrologer","outputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"wallet","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"specialty","type":"string"},{"internalType":"uint256","name":"experience","type":"uint256"},{"internalType":"uint256","name":"reputation","type":"uint256"},{"internalType":"uint256","name":"totalPredictions","type":"uint256"},{"internalType":"uint256","name":"accuratePredictions","type":"uint256"},{"internalType":"uint256","name":"tokenContract","type":"uint256"},{"internalType":"bool","name":"isVerified","type":"bool"},{"internalType":"bool","name":"isActive","type":"bool"},{"internalType":"uint256","name":"registeredAt","type":"uint256"},{"internalType":"uint256","name":"lastActive","type":"uint256"}],"internalType":"struct IAstrologerManager.Astrologer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"getAstrologerByWallet","outputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"wallet","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"specialty","type":"string"},{"internalType":"uint256","name":"experience","type":"uint256"},{"internalType":"uint256","name":"reputation","type":"uint256"},{"internalType":"uint256","name":"totalPredictions","type":"uint256"},{"internalType":"uint256","name":"accuratePredictions","type":"uint256"},{"internalType":"uint256","name":"tokenContract","type":"uint256"},{"internalType":"bool","name":"isVerified","type":"bool"},{"internalType":"bool","name":"isActive","type":"bool"},{"internalType":"uint256","name":"registeredAt","type":"uint256"},{"internalType":"uint256","name":"lastActive","type":"uint256"}],"internalType":"struct IAstrologerManager.Astrologer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"getAstrologerId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"isAstrologerVerified","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"astrologerId","type":"uint256"},{"internalType":"bool","name":"wasAccurate","type":"bool"}],"name":"recordPredictionResult","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"astrologerId","type":"uint256"},{"internalType":"uint256","name":"tokenContract","type":"uint256"}],"name":"setTokenContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"astrologerId","type":"uint256"},{"internalType":"uint256","name":"newReputation","type":"uint256"}],"name":"updateReputation","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getAstrologer(uint256)":"b56faf11","getAstrologerByWallet(address)":"61cb82ba","getAstrologerId(address)":"656d0c39","isAstrologerVerified(address)":"30a7d32a","recordPredictionResult(uint256,bool)":"e47ef5a8","setTokenContract(uint256,uint256)":"5273496a","updateReputation(uint256,uint256)":"0675f763"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"astrologerId\",\"type\":\"uint256\"}],\"name\":\"getAstrologer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"specialty\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"experience\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPredictions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuratePredictions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenContract\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActive\",\"type\":\"uint256\"}],\"internalType\":\"struct IAstrologerManager.Astrologer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getAstrologerByWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"specialty\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"experience\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPredictions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuratePredictions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenContract\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActive\",\"type\":\"uint256\"}],\"internalType\":\"struct IAstrologerManager.Astrologer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getAstrologerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isAstrologerVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"astrologerId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wasAccurate\",\"type\":\"bool\"}],\"name\":\"recordPredictionResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"astrologerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenContract\",\"type\":\"uint256\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"astrologerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReputation\",\"type\":\"uint256\"}],\"name\":\"updateReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IAstrologerManager.sol\":\"IAstrologerManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IAstrologerManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAstrologerManager {\\n    struct Astrologer {\\n        uint256 id;\\n        address wallet;\\n        string name;\\n        string description;\\n        string specialty;\\n        uint256 experience;\\n        uint256 reputation;\\n        uint256 totalPredictions;\\n        uint256 accuratePredictions;\\n        uint256 tokenContract;\\n        bool isVerified;\\n        bool isActive;\\n        uint256 registeredAt;\\n        uint256 lastActive;\\n    }\\n\\n    function getAstrologerByWallet(address wallet) external view returns (Astrologer memory);\\n    function getAstrologer(uint256 astrologerId) external view returns (Astrologer memory);\\n    function updateReputation(uint256 astrologerId, uint256 newReputation) external;\\n    function recordPredictionResult(uint256 astrologerId, bool wasAccurate) external;\\n    function setTokenContract(uint256 astrologerId, uint256 tokenContract) external;\\n    function isAstrologerVerified(address wallet) external view returns (bool);\\n    function getAstrologerId(address wallet) external view returns (uint256);\\n} \",\"keccak256\":\"0x11ca9cb820c6a6cec9a66342e9d644365a1c256aff7fc4cca46964dbcdae6e64\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IReputationScorer.sol":{"IReputationScorer":{"abi":[{"inputs":[{"internalType":"address","name":"_astrologer","type":"address"}],"name":"getReputationMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_astrologer","type":"address"}],"name":"getReputationScore","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"astrologer","type":"address"},{"internalType":"uint256","name":"totalPredictions","type":"uint256"},{"internalType":"uint256","name":"accuratePredictions","type":"uint256"},{"internalType":"uint256","name":"accuracyPercentage","type":"uint256"},{"internalType":"uint256","name":"reputationMultiplier","type":"uint256"},{"internalType":"uint256","name":"marketPredictions","type":"uint256"},{"internalType":"uint256","name":"dailyPredictions","type":"uint256"},{"internalType":"uint256","name":"oneToOnePredictions","type":"uint256"},{"internalType":"uint256","name":"lastUpdated","type":"uint256"},{"internalType":"bool","name":"isActive","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_astrologer","type":"address"},{"internalType":"bool","name":"_wasCorrect","type":"bool"}],"name":"updateReputationFromWorldPrediction","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getReputationMultiplier(address)":"b107e88c","getReputationScore(address)":"75a67d5c","updateReputationFromWorldPrediction(address,bool)":"9f7c4688"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_astrologer\",\"type\":\"address\"}],\"name\":\"getReputationMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_astrologer\",\"type\":\"address\"}],\"name\":\"getReputationScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"astrologer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalPredictions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuratePredictions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputationMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketPredictions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyPredictions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oneToOnePredictions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_astrologer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_wasCorrect\",\"type\":\"bool\"}],\"name\":\"updateReputationFromWorldPrediction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IReputationScorer.sol\":\"IReputationScorer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IReputationScorer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReputationScorer {\\n    function updateReputationFromWorldPrediction(\\n        address _astrologer,\\n        bool _wasCorrect\\n    ) external;\\n\\n    function getReputationMultiplier(address _astrologer) external view returns (uint256);\\n    \\n    function getReputationScore(address _astrologer) external view returns (\\n        uint256 id,\\n        address astrologer,\\n        uint256 totalPredictions,\\n        uint256 accuratePredictions,\\n        uint256 accuracyPercentage,\\n        uint256 reputationMultiplier,\\n        uint256 marketPredictions,\\n        uint256 dailyPredictions,\\n        uint256 oneToOnePredictions,\\n        uint256 lastUpdated,\\n        bool isActive\\n    );\\n} \",\"keccak256\":\"0x703180fb5f26749d16b00844cc9f4ff63a31eeb43e1fa2303a2c8bd5a7bb2b82\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}